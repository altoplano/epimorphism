CURRENT PROJECTS:
  - detect system/perf profile
    - if there are too many aux buffers (texture units), we'll have an issue?
		- dynamic par/zn/aux count

	- asynchronous compiling
	  - when switching, clone root(both main & disp?), get new modId
		- return true, new application root
		- compile wrt new root
		- freeze scripts
		- when compiling done, switch out root, unfreeze scripts
		- remove get uniforms from engine loop
		- split compilation into stages

		- also, batch compilation?  only happens once every n ms?

  - async asset loading?
	  - what do we do when we dont have the asset yet?
		- which images are loaded (also, clean up main)?
		- load small images to start, bigger images when needed?

	- cleanup
	  - double incZn is busted
    - make sure everything re. scripts still works
	  - findParent is kind of ghetto
		- be better about reloading objects after refs might change
    - better data organization
	    - merge configs & states?
		  - what goes in config, what goes into states?


NEXT PROJECTS:
  - release?
    - kickstarter for audio responsiveness?
	  - make main pattern a little better

	- restructure data
		- modules are instances of components - specific values for variables & scripts
		- components are instances of families.
		  - contain code
			- variable specifications ie how many par, how many images, & default values
		- families are variable names & dimensions.  basically where this object fits.
		- scripts could use some more thought.
		  - which module do they belong to?
			- how to syncronize multiple scripts? i.e, color & disp?

	- pattern:
		- patternRefPool?
    - make patterns modules/pattern level scripts?
	  - put pattern into systemST, patternRefPool.  stop passing pattern around
	  - interpolating between patterns?

	- database support
	  - which database?
		- how are things stored/serialized?
		- search by family, component, flags, props, id
		- what about things like libName?
		- sync local & remote dbs
		- put textures in db
		- misc:
		  - update flags on save (default != true)
  	  - check for duplicates when saving (id = hash of contents?)
      - namespace collisions detection

	- more importing/compiling
		- MISC
		  - could maybe clean up switch a bit more (remove imports/purges, combine methods)
		  - maybe module.modules should be [SubModule = SubLib String | SubPool String] or something
      - module/submodule cycles??
			- only way to modify tree is via switch?

	- UI
	  - basic idea is that all db & data modifications happen through UI
		- but we need to completely rework how the ui happens.
		  - dont want to have to pause to update tree, that's kind of ghetto
			- individually pause paths/modules?
			- reactive UI?
		- misc
		  - https://ace.c9.io/#nav=about
			- for paths, show current value in console

-------------------------------- BACKLOG --------------------------------

BUGS:
  - catch errors when parsing t_exp
  - no error message when image texture doesnt exist
  - reduce is a substition in seeds, but comes from appliction.  the order of "modules {x: .., y: ..}" matters :/

  - on windows menu disappears hovering over res selector
  - weird when opening console in fullscreen
  - shader indentation issues with switching & in general
  - error handling for failing to enter fullscreen mode
  - number parsing flakey? how so?

PERF:
  - zoom out performance problem.  unclear what the deal is.  really bad with 1/z
  - choppy in safari

SYSTEM:
  - scripts
    - way of switching modules while keeping phase/scripts.
	  - keep scripts when switching modules?
  - javascript files are all over the place
	- fract a sub on main body set in engine before compiling?
  - use git for deploy
  - addGlobalEventListeners is a bit ghetto
  - more work on fract.  more specific fracts.  like for seed vs T.  can possibly also increase quality
	- too many debug statements going on (in engine?)
  - prevent default in ui.js
  - make serializable a class
  - remote control (webui, websockets, etc)
  - currently manually implementing GL.repeat for aux
  - compiler substitutions %XXXX%, etc can still cause errors?  dont remember what kind
  - investigate dsl for scripts
  - engine stability/lost context - https://www.khronos.org/registry/webgl/extensions/WEBGL_lose_context/
  - main & disp share includes
  - preprocesser malfunctions give weird errors
	- https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_shaders/ - gets a host translated version of the shader (GLSL ES, HLSL)
	- chrome/ff shader debugger/editor
  - better engine error checking/handling
	- get rid of if statements ins seed_w & clean all of that up

FEATURE IDEAS:
  - blend maps!! variable interpolation
	- catagorize transformations:
  	- symmetries, is_inversion, scale, periodic?, rational?, accumulation points, empty regions?, elementary, custom?
	- use images(self????) as transformations
	- vector fields
  - seed impulses
	- graphically outline seeds?
	- superformula - https://en.wikipedia.org/wiki/Superformula
  - for each pixel, define a normal vector, so we can do lighting & material effects
  - investigate dsl for scripts
  - webcam input

FUTURE:
  - test on ipad
  - test on android
	- unit tests
  - logging system
  - programming guidelines document - i.e make sure all tree modifications rebuild mod ref lib
  - benchmarking tools
  - image comparison testing

NO CLUE:
  - saving images loses bit depth??
  - weird divide by zero issue - glitch in content
  - maybe pixel alignment issues with images?





MATH:
  t_inner:z / (z + 1) + z / (z - 1)}
  zn [1.500 + 0.000i, 0.000 + 0.000i, 0.800 + 0.000i, 0.200 + 0.000i]
  creates a legitimate fractal
	I saw something that might explain it
