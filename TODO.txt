RELEASE
  LAUNCH:
  	- about page / gallery
  	- mailing list
  	- upgrade hosting
	SYSTEM:
		- test in ie
		- save debugState somewhere for analysis - save server?
		- there are a bunch of dummy scripts assigned to things atm
		- pre import hooks?  i.e, when loading a T module, choose a random t_inner, before importing?
  CONTENTS:
	  - initial state
	  - interpolating between patterns?
		T:
		  - state machine - "tan(z) + i * tan(-z)"
			- visualization
			- vector fields
			- expand library
			- animations
			- make sure paths/animations dont zoom out/in too much?
		SEED:
		  - impulses
			- wca & multi seed
			- images, use w for value
			- expand library
		COLOR:
		  - length_scale
	  POST:


NEXT
 SYSTEM
  - scripts
    - way of switching modules while keeping phase/scripts.  isn't recompiling ghetto(what?)
	  - keep scripts when switching modules?
	- patternRefPool?
  - make patterns modules/pattern level scripts
  - mainRef refernece in randomMain seems ghetto
  - module.modules should be [SubModule = SubLib String | SubPool String] or something
  - remove mid from scripts?

LATER
  - better deploy system
  - weird when opening console in fullscreen
  - really choppy at higher resolutions
  - addGlobalEventListeners is a bit ghetto
  - weird divide by zero issue - glitch in content
  - choppiness when doing a bunch of switching.  might be image uploading.  there is a error "texImage2D: invalid image" when a bunch of image switches happen

  - limit to tree size?
  - more debugState info
  - hard pause button (do nothing at all, not just tSpd=0)
	- finish importScript2
  - BETA INFRASTRUCTURE PASS
  - fract
	- too many debug statements going on (in engine?)
	- very minor glitch during image uploading
  - prevent default in ui.js
  - update flags on save (default != true)
  - check for duplicates when saving (id = hash of contents?)
  - make serializable a class
  - make flags a set?
	- screenshots
	- saving server
	- next config/library pass (maybe better error detection)
	- pause only works if tSpd == 1.0
  - how do we figure out the family of a submodle?  can't always use the name
	  -  like if it's a multi_seed ie. @seed:0 @seed:1, etc?
  - namespace collision in modules.lib?
  - maybe pixel alignment issues with images
  - remote control (webui, websockets, etc)
  - currently manually implementing GL.repeat for aux
  - shader indentation issues with switching
  - too many switches can cause par & zn overflow
	- clean up Pattern.purs & Script.purs
  - findParent is kind of ghetto
  - add dimension to component family (vec2, vec4, etc)
  - ModRef used inconsistiently
  - investigate dsl for scripts
  - use fb as texture source
  - enforce integrity of pools & module references
	- scripts conflicting with each other
  - module/submodule cycles??
  - error handling for failing to enter fullscreen mode
  - ERROR HANDLING for createImage - missing images & sync issues & the unusable image issue
  - number parsing flakey?
  - engine stability/lost context - https://www.khronos.org/registry/webgl/extensions/WEBGL_lose_context/
  - compiler performance
  - database support
  - compiler substitutions %XXXX%, etc can still cause errors?  dont remember what kind
  - check out setTimeout vs requestAminFrame
  - figure out how to render UI
  - build some kind of UI
  - video rendering
	- old style (automation) scripts
  - config/ lib file comments
  - detect system/perf profile
  - test on windows
  - test on ipad
  - test on android
	- https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_shaders/
	- unit tests
  - logging system
  - programming guidelines document - i.e make sure all tree modifications rebuild mod ref lib
  - better kernel debug support
  - par, zn, and aux lengths are fixed
  - save images
  - webcam input
  - benchmarking tools
  - image comparison testing
  - preprocesser malfunctions give weird errors
  - passing context to loadLib is annoying
  - main & disp share includes
  - complex numbers library?
	- complex parsing - currently need both components i.e 0.0 + 1.3i
  - better engine error checking/handling
  - texture organization
  - better data organization
	  - put configs in states?
		- where do things go?
		- put ref pools in pattern?
		- some kind of reactive data tree?
  - think of T as vector fields, composition -> vector flow?
