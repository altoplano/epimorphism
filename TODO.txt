POST FARM:
  - clean up after farm
	  - clean up main
	- inline scripts + script/path phases
	- fix importing
    - enforce integrity of pools & module references
    - module/submodule cycles??
    - limit to tree size?
    - par & zn & aux dimension overflow
	- compiler performance
	- components have meta information, modules just have a component & variables
	  - components specify a default instance
	  - component family => var & dim
	- REFACTOR UI - its super ghetto now
		- make ui reactive to pattern/ui conf, etc?
	  - no more text files. entirely done via web - patterns, scripts config, etc
	- move everything to a database
	  - put textures there too?
		- update flags on save (default != true)
  	- check for duplicates when saving (id = hash of contents?)
	  - next config/library pass (maybe better error detection)
    - namespace collision in modules.lib?

  - just release it?
  - kickstarter for audio responsiveness?
	  - make main pattern a little better




NEXT 2
 SYSTEM
	- patternRefPool?
  - make patterns modules/pattern level scripts
  - mainRef refernece in randomMain seems ghetto
  - module.modules should be [SubModule = SubLib String | SubPool String] or something
	- put pattern into systemST, patternRefPool.  remove createScript & stop passing pattern around
	- interpolating between patterns?



BUGS:
	- complex parsing - currently need both components i.e 0.0 + 1.3i
  - catch errors when parsing t_exp
  - no error message when image texture doesnt exist
  - reduce is a substition in seeds, but comes from appliction.  the order of "modules {x: .., y: ..}" matters :/
  - if there are too many aux buffers (texture units), we'll have an issue?
  - on windows menu disappears hovering over res selector
  - weird when opening console in fullscreen
  - shader indentation issues with switching & in general
  - error handling for failing to enter fullscreen mode
  - number parsing flakey? how so?

PERF:
  - zoom out performance problem.  unclear what the deal is.  really bad with 1/z
	- chopiness when at higher resolutions
  - choppy in safari
  - switch stuttering. it's compile speed + texutre upload

SYSTEM:
  - scripts
    - way of switching modules while keeping phase/scripts.
	  - keep scripts when switching modules?
  - javascript files are all over the place
  - this -10000(for random), etc shit is ghetto
	- fract a sub on main body set in engine before compiling?
  - use git for deploy
  - addGlobalEventListeners is a bit ghetto
  - more work on fract.  more specific fracts.  like for seed vs T.  can possibly also increase quality
	- too many debug statements going on (in engine?)
  - prevent default in ui.js
  - make serializable a class
  - detect system/perf profile
  - remote control (webui, websockets, etc)
  - currently manually implementing GL.repeat for aux
  - findParent is kind of ghetto
  - ModRef used inconsistiently
  - compiler substitutions %XXXX%, etc can still cause errors?  dont remember what kind
  - investigate dsl for scripts
  - engine stability/lost context - https://www.khronos.org/registry/webgl/extensions/WEBGL_lose_context/
  - main & disp share includes
  - preprocesser malfunctions give weird errors
	- https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_shaders/
  - scripts conflicting with each other?  who has priority
  - better data organization
	  - merge configs & states?
		- what goes in config, what goes into states?
		- put ref pools in pattern? why did I think of that?
  - better engine error checking/handling

FEATURE IDEAS:
  - blend maps!! variable interpolation
	- catagorize transformations:
  	- symmetries, is_inversion, scale, periodic?, rational?, accumulation points, empty regions?, elementary, custom?
	- use images(self????) as transformations
	- vector fields
  - seed impulses
	- graphically outline seeds?
	- superformula - https://en.wikipedia.org/wiki/Superformula
  - for each pixel, define a normal vector, so we can do lighting & material effects
  - investigate dsl for scripts
  - webcam input

FUTURE:
  - test on ipad
  - test on android
	- unit tests
  - logging system
  - programming guidelines document - i.e make sure all tree modifications rebuild mod ref lib
  - benchmarking tools
  - image comparison testing

NO CLUE:
  - saving images loses bit depth??
  - weird divide by zero issue - glitch in content
  - maybe pixel alignment issues with images?







MATH:
  t_inner:z / (z + 1) + z / (z - 1)}
  zn [1.500 + 0.000i, 0.000 + 0.000i, 0.800 + 0.000i, 0.200 + 0.000i]
  creates a legitimate fractal
	I saw something that might explain it
