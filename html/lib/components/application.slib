application test_pattern {{
  z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
  color = vec4(z, 0.0, 1.0);
}}

application main_test_image {{
  z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
  color = 0.5 * texture2D(aux[#0], z);
  color += 0.5 * texture2D(aux[#1], z);
}}


application epimorphism {{
  vec4 seed, frame;
  vec2 frame_z, t_z;

	vec4 accum = vec4(0.0, 0.0, 0.0, 0.0);

	float delta = 1.0 / (float($fract$) * kernel_dim);
	float ofs = delta * (float($fract$) - 1.0);

 	for(int i=0; i<$fract$; i++){
		for(int j=0; j<$fract$; j++){
      z = z_in;
      z = z - vec2(ofs, ofs) + vec2(2.0 * delta * float(i), 2.0 * delta * float(j));

			%t%

			// get frame
			t_z = z;
			%reduce%
			frame_z = (z + vec2(1.0, 1.0)) / vec2(2.0, 2.0);
			frame = texture2D(fb, frame_z);
			z = t_z;

			//z = z_in;

			// test audio shiz

      /*
			float rad = mod(atan(z.y, z.x) / (2.0 * PI), 1.0);
			float rad2 = (rad > 0.5 ? 2.0 * (1.0 - rad) : 2.0 * rad);
			rad2 = rad2 < 0.5 ? 2.0 * (0.5 - rad2) : 2.0 * (rad2 - 0.5);
			float fdat = texture2D(audioData, vec2(rad2, 0.5)).a;
			float len = length(z) - 0.6 * fdat;
			z = vec2(len * cos(2.0 * PI * rad), len * sin(2.0 * PI * rad));
      */

			%seed%

			// blend
			//accum += vec4(seed.a * seed.rgb + (1.0 - seed.a) * frame.rgb, seed.a);
			//float x = (z_in.x + 1.0) / 2.0;
			//float b = (1.0 - x) * seed.a + x * (1.0 - seed.a);
			accum += mix(frame, seed, seed.a);
		}
	}
	z = z_in;

	float f2 = float($fract$ * $fract$);
	color = accum / vec4(f2, f2, f2, f2);

  %color%
}}


application julia {{
  int j = 0;
  int max_iter = 600;
  float escape_rad = 4.0;

	for(int i = 0; i < 600; i++){
		if(z.x * z.x + z.y * z.y > escape_rad)
			break;

    z = $t_expr$;
		j += 1;
  }

  float mu = float(j) - log(log(length(z)))/ log(2.0);

  if(j != max_iter)
		//color = hsv2rgb(vec4(float(j) / 256.0, 1.0, 1.0, 1.0));
    color = hsv2rgb(vec4(mu / 20.0, 1.0, 1.0, 1.0));
	else
		color = vec4(0.0,0.0,0.0,1.0);

	z = z_in;
}}
