seed seed_nothing {{
	seed = vec4(0.0, 0.0, 0.0, 0.0);
}}

seed seed_multi {{
	vec4 seed0, seed1, seed2;
	vec2 z_i = z;
  %t%

	vec2 z_tmp = z;
	%seed0%
	seed0 = seed;

	z = z_tmp;
	%seed1%
	seed1 = seed;

	z = z_tmp;
	%seed2%
	seed2 = seed;

	float a = 1.0 - (1.0 - seed0.a) * (1.0 - seed1.a) * (1.0 - seed2.a);

	if(a == 0.0)
		seed = vec4(0.0, 0.0, 0.0, 0.0);
	else
		seed = 1.0 / a * (seed2.a * seed2 + (1.0 - seed2.a) * seed1.a * seed1 + (1.0 - seed2.a) * (1.0 - seed1.a) * seed0.a * seed0);
	seed.a = a;
	z = z_i;
}}

seed seed_simple_cool {{
	vec2 z_i = z;
  %t%

  float w = VOID_W;
  float wx = (z.x + @w@) / (2.0 * @w@);
  float wy = (z.y + @w@) / (2.0 * @w@);

  if(z.x >= z.y && z.x >= -1.0 * z.y && z.x > (1.0 - @w@)){
    w = (z.x - (1.0 - @w@)) / @w@;
    wy = z.y / (0.5 * @w@) - 0.5;
  }else if(z.y >= z.x && z.y >= -1.0 * z.x && z.y > (1.0 - @w@)){
    w = (z.y - (1.0 - @w@)) / @w@;
    wy = z.x / (0.5 * @w@) - 0.5;
  }else if(z.y >= z.x && z.y <= -1.0 * z.x && z.x < -1.0 * (1.0 - @w@)){
    w = (-1.0 * (1.0 - @w@) - z.x) / @w@;
    wy = z.y / (0.5 * @w@) - 0.5;
  }else if(z.x >= z.y && z.x <= -1.0 * z.y && z.y < -1.0 * (1.0 - @w@)){
    w = (-1.0 * (1.0 - @w@) - z.y) / @w@;
    wy = z.x / (0.5 * @w@) - 0.5;
  }
  wx = w;
  vec4 frame_w = vec4(w, (abs(w-VOID_W) < 0.00001 ? 0.0 : w * @alpha@), wx, wy);
  seed = vec4(frame_w.x, 0, 0, frame_w.y);
	z = z_i;
}}


seed seed_simple {{
	vec2 z_i = z;
  %t%

  float w = VOID_W;
  float wx = (z.x + @seed_w@) / (2.0 * @seed_w@);
  float wy = (z.y + @seed_w@) / (2.0 * @seed_w@);

  if(z.x >= z.y && z.x >= -1.0 * z.y && z.x > (1.0 - @seed_w@)){
    w = (z.x - (1.0 - @seed_w@)) / @seed_w@;
    wy = z.y / (0.5 * @seed_w@) - 0.5;
  }else if(z.y >= z.x && z.y >= -1.0 * z.x && z.y > (1.0 - @seed_w@)){
    w = (z.y - (1.0 - @seed_w@)) / @seed_w@;
    wy = z.x / (0.5 * @seed_w@) - 0.5;
  }else if(z.y >= z.x && z.y <= -1.0 * z.x && z.x < -1.0 * (1.0 - @seed_w@)){
    w = (-1.0 * (1.0 - @seed_w@) - z.x) / @seed_w@;
    wy = z.y / (0.5 * @seed_w@) - 0.5;
  }else if(z.x >= z.y && z.x <= -1.0 * z.y && z.y < -1.0 * (1.0 - @seed_w@)){
    w = (-1.0 * (1.0 - @seed_w@) - z.y) / @seed_w@;
    wy = z.x / (0.5 * @seed_w@) - 0.5;
  }
  wx = w;
  vec4 frame_w = vec4(w, (abs(w-VOID_W) < 0.00001 ? 0.0 : 1.0), wx, wy);
  seed = vec4(frame_w.x, 0, 0, frame_w.y);
	z = z_i;
}}

seed seed_simple_img {{
	vec2 z_i = z;
  %t%

  float w = VOID_W;
  float wx = (z.x + @seed_w@) / (2.0 * @seed_w@);
  float wy = (z.y + @seed_w@) / (2.0 * @seed_w@);

  if(z.x >= z.y && z.x >= -1.0 * z.y && z.x > (1.0 - @seed_w@)){
    w = (z.x - (1.0 - @seed_w@)) / @seed_w@;
    wy = z.y / (0.5 * @seed_w@) - 0.5;
  }else if(z.y >= z.x && z.y >= -1.0 * z.x && z.y > (1.0 - @seed_w@)){
    w = (z.y - (1.0 - @seed_w@)) / @seed_w@;
    wy = z.x / (0.5 * @seed_w@) - 0.5;
  }else if(z.y >= z.x && z.y <= -1.0 * z.x && z.x < -1.0 * (1.0 - @seed_w@)){
    w = (-1.0 * (1.0 - @seed_w@) - z.x) / @seed_w@;
    wy = z.y / (0.5 * @seed_w@) - 0.5;
  }else if(z.x >= z.y && z.x <= -1.0 * z.y && z.y < -1.0 * (1.0 - @seed_w@)){
    w = (-1.0 * (1.0 - @seed_w@) - z.y) / @seed_w@;
    wy = z.x / (0.5 * @seed_w@) - 0.5;
  }
  wx = w;
  vec4 frame_w = vec4(w, (abs(w-VOID_W) < 0.00001 ? 0.0 : 1.0), wx, wy);

	vec2 ofs = mod(0.25 * frame_w.zw, 1.0);
  seed = texture2D(aux[#0], ofs);
	seed.w = seed.w * frame_w.y;

	z = z_i;
}}



seed seed_wca {{
  vec4 wdt, color;
  float w = VOID_W;
	float a, wx, wy;
	vec2 z_i = z;
  %t%

  // wdt = (w, a, wx, wy)
  %seed_w%

  w = min(wdt.x, 1.0);
	if (w > 0.0)
    %seed_wt%

	a = wdt.y;
  %alpha%

  %seed_color%
	z = z_i;
}}
