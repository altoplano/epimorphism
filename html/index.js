(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Main = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/gene/Programming/pure_morph/output/Control.Alt/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.alt = alt;
};
var altArray = new Alt(function () {
    return Prelude.functorArray;
}, Prelude.append(Prelude.semigroupArray));
var alt = function (dict) {
    return dict.alt;
};
var $less$bar$greater = function (dictAlt) {
    return alt(dictAlt);
};
module.exports = {
    Alt: Alt, 
    "<|>": $less$bar$greater, 
    alt: alt, 
    altArray: altArray
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Alternative/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var alternativeArray = new Alternative(function () {
    return Control_Plus.plusArray;
}, function () {
    return Prelude.applicativeArray;
});
module.exports = {
    Alternative: Alternative, 
    alternativeArray: alternativeArray
};

},{"Control.Plus":"/Users/gene/Programming/pure_morph/output/Control.Plus/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Apply/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var $less$times = function (dictApply) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};
var $times$greater = function (dictApply) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
        };
    };
};
var lift5 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var lift4 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift3 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift2 = function (dictApply) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
module.exports = {
    lift5: lift5, 
    lift4: lift4, 
    lift3: lift3, 
    lift2: lift2, 
    "*>": $times$greater, 
    "<*": $less$times
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Biapplicative/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Biapply = require("Control.Biapply");
var Biapplicative = function (__superclass_Control$dotBiapply$dotBiapply_0, bipure) {
    this["__superclass_Control.Biapply.Biapply_0"] = __superclass_Control$dotBiapply$dotBiapply_0;
    this.bipure = bipure;
};
var bipure = function (dict) {
    return dict.bipure;
};
module.exports = {
    Biapplicative: Biapplicative, 
    bipure: bipure
};

},{"Control.Biapply":"/Users/gene/Programming/pure_morph/output/Control.Biapply/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Biapply/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Bifunctor = require("Data.Bifunctor");
var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.biapply = biapply;
};
var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryFn);
var biapply = function (dict) {
    return dict.biapply;
};
var $less$less$times$greater$greater = function (dictBiapply) {
    return biapply(dictBiapply);
};
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                };
            };
        };
    };
};
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return $less$less$times$greater$greater(dictBiapply)($less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};
var $times$greater$greater = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(Prelude["const"](Prelude.id(Prelude.categoryFn))))(a))(b);
        };
    };
};
var $less$less$times = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
        };
    };
};
module.exports = {
    Biapply: Biapply, 
    bilift3: bilift3, 
    bilift2: bilift2, 
    "<<*": $less$less$times, 
    "*>>": $times$greater$greater, 
    "<<*>>": $less$less$times$greater$greater, 
    biapply: biapply, 
    "<<$>>": $less$less$dollar$greater$greater
};

},{"Data.Bifunctor":"/Users/gene/Programming/pure_morph/output/Data.Bifunctor/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Extend = function (__superclass_Prelude$dotFunctor_0, extend) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.extend = extend;
};
var extendFn = function (dictSemigroup) {
    return new Extend(function () {
        return Prelude.functorFn;
    }, function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](dictSemigroup)(w)(w$prime));
                });
            };
        };
    });
};
var extend = function (dict) {
    return dict.extend;
};
var $less$less$eq = function (dictExtend) {
    return extend(dictExtend);
};
var $eq$less$eq = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(dictExtend)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (dictExtend) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(dictExtend)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (dictExtend) {
    return function (w) {
        return function (f) {
            return $less$less$eq(dictExtend)(f)(w);
        };
    };
};
var duplicate = function (dictExtend) {
    return extend(dictExtend)(Prelude.id(Prelude.categoryFn));
};
module.exports = {
    Extend: Extend, 
    duplicate: duplicate, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    "<<=": $less$less$eq, 
    extend: extend, 
    extendFn: extendFn
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Lazy/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Lazy = function (defer) {
    this.defer = defer;
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (dictLazy) {
    return function (f) {
        return defer(dictLazy)(function (v) {
            return f(fix(dictLazy)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    fix: fix, 
    defer: defer
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Alert/foreign.js":[function(require,module,exports){
/* global exports */

// module Control.Monad.Eff.Alert


    "use strict";

    exports.alert = function(msg) {
        return function() {
          window.alert(msg);
          return {};
        };
    };

},{}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Alert/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
module.exports = {
    alert: $foreign.alert
};

},{"../Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","../Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js","./foreign":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Alert/foreign.js"}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Console/foreign.js":[function(require,module,exports){
/* global exports, console */
"use strict";

// module Control.Monad.Eff.Console

exports.log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

exports.error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Console/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var print = function (dictShow) {
    return function ($1) {
        return $foreign.log(Prelude.show(dictShow)($1));
    };
};
module.exports = {
    print: print, 
    error: $foreign.error, 
    log: $foreign.log
};

},{"../Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","../Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js","./foreign":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Console/foreign.js"}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/foreign.js":[function(require,module,exports){
/* global exports */

// module Control.Monad.Eff.WebGL


    "use strict";

    exports.runWebGl_ = function (f) {
      return f;
  };

},{}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("Control.Monad.Eff");
module.exports = {
    runWebGl_: $foreign.runWebGl_
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/foreign.js","Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Control.Monad.Eff

exports.returnE = function (a) {
  return function () {
    return a;
  };
};

exports.bindE = function (a) {
  return function (f) {
    return function () {
      return f(a())();
    };
  };
};

exports.runPure = function (f) {
  return f();
};

exports.untilE = function (f) {
  return function () {
    while (!f());
    return {};
  };
};

exports.whileE = function (f) {
  return function (a) {
    return function () {
      while (f()) {
        a();
      }
      return {};
    };
  };
};

exports.forE = function (lo) {
  return function (hi) {
    return function (f) {
      return function () {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
};

exports.foreachE = function (as) {
  return function (f) {
    return function () {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(function () {
    return applyEff;
}, $foreign.bindE);
var applyEff = new Prelude.Apply(function () {
    return functorEff;
}, Prelude.ap(monadEff));
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, $foreign.returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff, 
    foreachE: $foreign.foreachE, 
    forE: $foreign.forE, 
    whileE: $foreign.whileE, 
    untilE: $foreign.untilE, 
    runPure: $foreign.runPure
};

},{"../Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js","./foreign":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/foreign.js"}],"/Users/gene/Programming/pure_morph/output/Control.Monad/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var when = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (v) {
                return v1;
            };
            if (!v) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
            };
            throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var unless = function (dictMonad) {
    return function (v) {
        return function (v1) {
            if (!v) {
                return v1;
            };
            if (v) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
            };
            throw new Error("Failed pattern match at Control.Monad line 13, column 1 - line 14, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
module.exports = {
    unless: unless, 
    when: when
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.MonadPlus/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Alternative = require("Control.Alternative");
var Control_Plus = require("Control.Plus");
var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var monadPlusArray = new MonadPlus(function () {
    return Control_Alternative.alternativeArray;
}, function () {
    return Prelude.monadArray;
});
var guard = function (dictMonadPlus) {
    return function (v) {
        if (v) {
            return Prelude["return"]((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
        };
        if (!v) {
            return Control_Plus.empty((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match at Control.MonadPlus line 35, column 1 - line 36, column 1: " + [ v.constructor.name ]);
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard, 
    monadPlusArray: monadPlusArray
};

},{"Control.Alternative":"/Users/gene/Programming/pure_morph/output/Control.Alternative/index.js","Control.Plus":"/Users/gene/Programming/pure_morph/output/Control.Plus/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Control.Plus/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var plusArray = new Plus(function () {
    return Control_Alt.altArray;
}, [  ]);
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty, 
    plusArray: plusArray
};

},{"Control.Alt":"/Users/gene/Programming/pure_morph/output/Control.Alt/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Array.Unsafe/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Array.Unsafe

exports.unsafeIndex = function (xs) {
  return function (n) {
    return xs[n];
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Array.Unsafe/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var tail = function (xs) {
    return Data_Array.slice(1)(Data_Array.length(xs))(xs);
};
var last = function (xs) {
    return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
};
var init = function (xs) {
    return Data_Array.slice(0)(Data_Array.length(xs) - 1)(xs);
};
var head = function (xs) {
    return $foreign.unsafeIndex(xs)(0);
};
module.exports = {
    init: init, 
    last: last, 
    tail: tail, 
    head: head, 
    unsafeIndex: $foreign.unsafeIndex
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Array.Unsafe/foreign.js","Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Array/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Array

//------------------------------------------------------------------------------
// Array creation --------------------------------------------------------------
//------------------------------------------------------------------------------

exports.range = function (start) {
  return function (end) {
    var step = start > end ? -1 : 1;
    var result = [];
    for (var i = start, n = 0; i !== end; i += step) {
      result[n++] = i;
    }
    result[n] = i;
    return result;
  };
};

exports.replicate = function (n) {
  return function (v) {
    if (n < 1) return [];
    var r = new Array(n);
    for (var i = 0; i < n; i++) r[i] = v;
    return r;
  };
};

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.length = function (xs) {
  return xs.length;
};

//------------------------------------------------------------------------------
// Extending arrays ------------------------------------------------------------
//------------------------------------------------------------------------------

exports.cons = function (e) {
  return function (l) {
    return [e].concat(l);
  };
};

exports.snoc = function (l) {
  return function (e) {
    var l1 = l.slice();
    l1.push(e);
    return l1;
  };
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------

exports["uncons'"] = function (empty) {
  return function (next) {
    return function (xs) {
      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
    };
  };
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------

exports.indexImpl = function (just) {
  return function (nothing) {
    return function (xs) {
      return function (i) {
        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
      };
    };
  };
};

exports.findIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports.findLastIndexImpl = function (just) {
  return function (nothing) {
    return function (f) {
      return function (xs) {
        for (var i = xs.length - 1; i >= 0; i--) {
          if (f(xs[i])) return just(i);
        }
        return nothing;
      };
    };
  };
};

exports._insertAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i > l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 0, a);
          return just(l1);
        };
      };
    };
  };
};

exports._deleteAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (l) {
        if (i < 0 || i >= l.length) return nothing;
        var l1 = l.slice();
        l1.splice(i, 1);
        return just(l1);
      };
    };
  };
};

exports._updateAt = function (just) {
  return function (nothing) {
    return function (i) {
      return function (a) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1[i] = a;
          return just(l1);
        };
      };
    };
  };
};

//------------------------------------------------------------------------------
// Transformations -------------------------------------------------------------
//------------------------------------------------------------------------------

exports.reverse = function (l) {
  return l.slice().reverse();
};

exports.concat = function (xss) {
  var result = [];
  for (var i = 0, l = xss.length; i < l; i++) {
    var xs = xss[i];
    for (var j = 0, m = xs.length; j < m; j++) {
      result.push(xs[j]);
    }
  }
  return result;
};

exports.filter = function (f) {
  return function (xs) {
    return xs.filter(f);
  };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.sortImpl = function (f) {
  return function (l) {
    /* jshint maxparams: 2 */
    return l.slice().sort(function (x, y) {
      return f(x)(y);
    });
  };
};

//------------------------------------------------------------------------------
// Subarrays -------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.slice = function (s) {
  return function (e) {
    return function (l) {
      return l.slice(s, e);
    };
  };
};

exports.drop = function (n) {
  return function (l) {
    return n < 1 ? l : l.slice(n);
  };
};

//------------------------------------------------------------------------------
// Zipping ---------------------------------------------------------------------
//------------------------------------------------------------------------------

exports.zipWith = function (f) {
  return function (xs) {
    return function (ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Array/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Lazy = require("Control.Lazy");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Foldable = require("Data.Foldable");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var $colon = $foreign.cons;
var $dot$dot = $foreign.range;
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unzip = $foreign["uncons'"](function (v) {
    return new Data_Tuple.Tuple([  ], [  ]);
})(function (v) {
    return function (ts) {
        var $36 = unzip(ts);
        return new Data_Tuple.Tuple($colon(v.value0)($36.value0), $colon(v.value1)($36.value1));
    };
});
var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x, 
            tail: xs
        });
    };
});
var take = $foreign.slice(0);
var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});
var span = function (p) {
    var go = function (__copy_acc) {
        return function (__copy_xs) {
            var acc = __copy_acc;
            var xs = __copy_xs;
            tco: while (true) {
                var $42 = uncons(xs);
                if ($42 instanceof Data_Maybe.Just && p($42.value0.head)) {
                    var __tco_acc = $colon($42.value0.head)(acc);
                    acc = __tco_acc;
                    xs = $42.value0.tail;
                    continue tco;
                };
                return {
                    init: $foreign.reverse(acc), 
                    rest: xs
                };
            };
        };
    };
    return go([  ]);
};
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var $46 = comp(x)(y);
                if ($46 instanceof Prelude.GT) {
                    return 1;
                };
                if ($46 instanceof Prelude.EQ) {
                    return 0;
                };
                if ($46 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.Array line 409, column 3 - line 414, column 1: " + [ $46.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Prelude.compare(dictOrd))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            if (n < 1) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
            };
            if (Prelude.otherwise) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictMonad["__superclass_Prelude.Applicative_0"]())($foreign.replicate(n)(m));
            };
            throw new Error("Failed pattern match at Data.Array line 136, column 1 - line 137, column 1: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};
var nubBy = function (eq) {
    return function (xs) {
        var $49 = uncons(xs);
        if ($49 instanceof Data_Maybe.Just) {
            return $colon($49.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                return !eq($49.value0.head)(y);
            })($49.value0.tail)));
        };
        if ($49 instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        throw new Error("Failed pattern match: " + [ $49.constructor.name ]);
    };
};
var nub = function (dictEq) {
    return nubBy(Prelude.eq(dictEq));
};
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Prelude.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
    };
    throw new Error("Failed pattern match at Data.Array line 226, column 1 - line 227, column 1: " + [ xs.constructor.name ]);
};
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var $bang$bang = index;
var last = function (xs) {
    return $bang$bang(xs)($foreign.length(xs) - 1);
};
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
        };
    };
};
var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (v) {
        return new Data_Maybe.Just(x);
    };
});
var groupBy = function (op) {
    var go = function (__copy_acc) {
        return function (__copy_xs) {
            var acc = __copy_acc;
            var xs = __copy_xs;
            tco: while (true) {
                var $54 = uncons(xs);
                if ($54 instanceof Data_Maybe.Just) {
                    var sp = span(op($54.value0.head))($54.value0.tail);
                    var __tco_acc = $colon($colon($54.value0.head)(sp.init))(acc);
                    acc = __tco_acc;
                    xs = sp.rest;
                    continue tco;
                };
                if ($54 instanceof Data_Maybe.Nothing) {
                    return $foreign.reverse(acc);
                };
                throw new Error("Failed pattern match at Data.Array line 476, column 1 - line 477, column 1: " + [ $54.constructor.name ]);
            };
        };
    };
    return go([  ]);
};
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Prelude.eq(dictEq))(xs);
    };
};
var group$prime = function (dictOrd) {
    return function ($68) {
        return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($68));
    };
};
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
            })(function (b) {
                return function (bs) {
                    return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Prelude["=="](Prelude.eqOrdering)(cmp(x)(y))(Prelude.GT.value);
            })(ys));
            return Data_Maybe_Unsafe.fromJust(insertAt(i)(x)(ys));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Prelude.compare(dictOrd));
};
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Prelude.eq(dictEq));
};
var filterM = function (dictMonad) {
    return function (p) {
        return $foreign["uncons'"](function (v) {
            return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
        })(function (x) {
            return function (xs) {
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(x))(function (v) {
                    return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(xs))(function (v1) {
                        return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                            if (v) {
                                return $colon(x)(v1);
                            };
                            if (!v) {
                                return v1;
                            };
                            throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                        })());
                    });
                });
            };
        });
    };
};
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Prelude["=="](dictEq)(v)(x);
        });
    };
};
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Prelude["=="](dictEq)(v)(x);
        });
    };
};
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};
var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe_Unsafe.fromJust(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["++"](Prelude.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Prelude["=="](dictEq));
};
var $$delete = function (dictEq) {
    return deleteBy(Prelude.eq(dictEq));
};
var $bslash$bslash = function (dictEq) {
    return function (xs) {
        return function (ys) {
            if ($$null(xs)) {
                return [  ];
            };
            if (Prelude.otherwise) {
                return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
                    return function (ys2) {
                        return $bslash$bslash(dictEq)($$delete(dictEq)(y)(xs))(ys2);
                    };
                })(ys);
            };
            throw new Error("Failed pattern match: " + [ xs.constructor.name, ys.constructor.name ]);
        };
    };
};
var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
var mapMaybe = function (f) {
    return concatMap(function ($69) {
        return Data_Maybe.maybe([  ])(singleton)(f($69));
    });
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var $66 = f(x);
                if ($66 instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if ($66 instanceof Data_Maybe.Just) {
                    return updateAt(i)($66.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array line 349, column 3 - line 358, column 1: " + [ $66.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
        };
    };
};
module.exports = {
    foldM: foldM, 
    unzip: unzip, 
    zip: zip, 
    zipWithA: zipWithA, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    takeWhile: takeWhile, 
    take: take, 
    sortBy: sortBy, 
    sort: sort, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filterM: filterM, 
    concatMap: concatMap, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    ":": $colon, 
    "null": $$null, 
    many: many, 
    some: some, 
    replicateM: replicateM, 
    "..": $dot$dot, 
    singleton: singleton, 
    zipWith: $foreign.zipWith, 
    drop: $foreign.drop, 
    slice: $foreign.slice, 
    filter: $foreign.filter, 
    concat: $foreign.concat, 
    reverse: $foreign.reverse, 
    snoc: $foreign.snoc, 
    cons: $foreign.cons, 
    length: $foreign.length, 
    replicate: $foreign.replicate, 
    range: $foreign.range
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Array/foreign.js","Control.Alt":"/Users/gene/Programming/pure_morph/output/Control.Alt/index.js","Control.Alternative":"/Users/gene/Programming/pure_morph/output/Control.Alternative/index.js","Control.Lazy":"/Users/gene/Programming/pure_morph/output/Control.Lazy/index.js","Control.MonadPlus":"/Users/gene/Programming/pure_morph/output/Control.MonadPlus/index.js","Control.Plus":"/Users/gene/Programming/pure_morph/output/Control.Plus/index.js","Data.Foldable":"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Maybe.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Data.Traversable":"/Users/gene/Programming/pure_morph/output/Data.Traversable/index.js","Data.Tuple":"/Users/gene/Programming/pure_morph/output/Data.Tuple/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.ArrayBuffer.Types/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
module.exports = {};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Bifoldable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Monoid_Endo = require("Data.Monoid.Endo");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
    this.bifoldMap = bifoldMap;
    this.bifoldl = bifoldl;
    this.bifoldr = bifoldr;
};
var bifoldr = function (dict) {
    return dict.bifoldr;
};
var bitraverse_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return bifoldr(dictBifoldable)(function ($18) {
                    return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($18));
                })(function ($19) {
                    return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(g($19));
                })(Prelude.pure(dictApplicative)(Prelude.unit));
            };
        };
    };
};
var bifor_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
var bisequence_ = function (dictBifoldable) {
    return function (dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
    };
};
var bifoldl = function (dict) {
    return dict.bifoldl;
};
var bifoldMapDefaultR = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return function (p) {
                    return bifoldr(dictBifoldable)(function ($20) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f($20));
                    })(function ($21) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(g($21));
                    })(Data_Monoid.mempty(dictMonoid))(p);
                };
            };
        };
    };
};
var bifoldMapDefaultL = function (dictBifoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (g) {
                return function (p) {
                    return bifoldl(dictBifoldable)(function (m) {
                        return function (a) {
                            return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(f(a));
                        };
                    })(function (m) {
                        return function (b) {
                            return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(g(b));
                        };
                    })(Data_Monoid.mempty(dictMonoid))(p);
                };
            };
        };
    };
};
var bifoldMap = function (dict) {
    return dict.bifoldMap;
};
var bifoldlDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($22) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(f)($22)));
                    })(function ($23) {
                        return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(g)($23)));
                    })(p)))(z);
                };
            };
        };
    };
};
var bifoldrDefault = function (dictBifoldable) {
    return function (f) {
        return function (g) {
            return function (z) {
                return function (p) {
                    return Data_Monoid_Endo.runEndo(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($24) {
                        return Data_Monoid_Endo.Endo(f($24));
                    })(function ($25) {
                        return Data_Monoid_Endo.Endo(g($25));
                    })(p))(z);
                };
            };
        };
    };
};
var bifold = function (dictBifoldable) {
    return function (dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
    };
};
var biany = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($26) {
                    return Data_Monoid_Disj.runDisj(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($27) {
                        return Data_Monoid_Disj.Disj(p($27));
                    })(function ($28) {
                        return Data_Monoid_Disj.Disj(q($28));
                    })($26));
                };
            };
        };
    };
};
var biall = function (dictBifoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function (q) {
                return function ($29) {
                    return Data_Monoid_Conj.runConj(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($30) {
                        return Data_Monoid_Conj.Conj(p($30));
                    })(function ($31) {
                        return Data_Monoid_Conj.Conj(q($31));
                    })($29));
                };
            };
        };
    };
};
module.exports = {
    Bifoldable: Bifoldable, 
    biall: biall, 
    biany: biany, 
    bisequence_: bisequence_, 
    bifor_: bifor_, 
    bitraverse_: bitraverse_, 
    bifold: bifold, 
    bifoldMapDefaultL: bifoldMapDefaultL, 
    bifoldMapDefaultR: bifoldMapDefaultR, 
    bifoldlDefault: bifoldlDefault, 
    bifoldrDefault: bifoldrDefault, 
    bifoldMap: bifoldMap, 
    bifoldl: bifoldl, 
    bifoldr: bifoldr
};

},{"Control.Apply":"/Users/gene/Programming/pure_morph/output/Control.Apply/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Data.Monoid.Conj":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Conj/index.js","Data.Monoid.Disj":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Disj/index.js","Data.Monoid.Dual":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Dual/index.js","Data.Monoid.Endo":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Endo/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Bifunctor/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};
var bimap = function (dict) {
    return dict.bimap;
};
var lmap = function (dictBifunctor) {
    return function (f) {
        return bimap(dictBifunctor)(f)(Prelude.id(Prelude.categoryFn));
    };
};
var rmap = function (dictBifunctor) {
    return bimap(dictBifunctor)(Prelude.id(Prelude.categoryFn));
};
module.exports = {
    Bifunctor: Bifunctor, 
    rmap: rmap, 
    lmap: lmap, 
    bimap: bimap
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Bitraversable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
    this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var bisequenceDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return bitraverse(dictBitraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn))(t);
        };
    };
};
var bisequence = function (dict) {
    return dict.bisequence;
};
var bitraverseDefault = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (g) {
                return function (t) {
                    return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                };
            };
        };
    };
};
var bifor = function (dictBitraversable) {
    return function (dictApplicative) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable, 
    bifor: bifor, 
    bisequenceDefault: bisequenceDefault, 
    bitraverseDefault: bitraverseDefault, 
    bisequence: bisequence, 
    bitraverse: bitraverse
};

},{"Data.Bifoldable":"/Users/gene/Programming/pure_morph/output/Data.Bifoldable/index.js","Data.Bifunctor":"/Users/gene/Programming/pure_morph/output/Data.Bifunctor/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Either/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            if (v instanceof Left) {
                return "Left (" + (Prelude.show(dictShow)(v.value0) + ")");
            };
            if (v instanceof Right) {
                return "Right (" + (Prelude.show(dictShow1)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Data.Either line 174, column 1 - line 181, column 1: " + [ v.constructor.name ]);
        });
    };
};
var functorEither = new Prelude.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        if (v1 instanceof Right) {
            return new Right(v(v1.value0));
        };
        throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Left) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Right) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Left) {
                return z;
            };
            if (v1 instanceof Right) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableEither = new Data_Traversable.Traversable(function () {
    return foldableEither;
}, function () {
    return functorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Prelude.pure(dictApplicative)(new Left(v.value0));
        };
        if (v instanceof Right) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 223, column 1: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Left) {
                return Prelude.pure(dictApplicative)(new Left(v1.value0));
            };
            if (v1 instanceof Right) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 223, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var extendEither = new Control_Extend.Extend(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Left) {
            return new Left(v1.value0);
        };
        return new Right(v(v1));
    };
});
var eqEither = function (dictEq) {
    return function (dictEq1) {
        return new Prelude.Eq(function (v) {
            return function (v1) {
                if (v instanceof Left && v1 instanceof Left) {
                    return Prelude["=="](dictEq)(v.value0)(v1.value0);
                };
                if (v instanceof Right && v1 instanceof Right) {
                    return Prelude["=="](dictEq1)(v.value0)(v1.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (dictOrd) {
    return function (dictOrd1) {
        return new Prelude.Ord(function () {
            return eqEither(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
        }, function (v) {
            return function (v1) {
                if (v instanceof Left && v1 instanceof Left) {
                    return Prelude.compare(dictOrd)(v.value0)(v1.value0);
                };
                if (v instanceof Right && v1 instanceof Right) {
                    return Prelude.compare(dictOrd1)(v.value0)(v1.value0);
                };
                if (v instanceof Left) {
                    return Prelude.LT.value;
                };
                if (v1 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match at Data.Either line 191, column 1 - line 197, column 1: " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var either = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return v(v2.value0);
            };
            if (v2 instanceof Right) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var boundedEither = function (dictBounded) {
    return function (dictBounded1) {
        return new Prelude.Bounded(new Left(Prelude.bottom(dictBounded)), new Right(Prelude.top(dictBounded1)));
    };
};
var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Left) {
                return new Left(v(v2.value0));
            };
            if (v2 instanceof Right) {
                return new Right(v1(v2.value0));
            };
            throw new Error("Failed pattern match at Data.Either line 56, column 1 - line 92, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
});
var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(z)(v2.value0);
                };
                if (v2 instanceof Right) {
                    return v1(z)(v2.value0);
                };
                throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
}, function (v) {
    return function (v1) {
        return function (z) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return v(v2.value0)(z);
                };
                if (v2 instanceof Right) {
                    return v1(v2.value0)(z);
                };
                throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableEither;
}, function () {
    return bifunctorEither;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Left) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v.value0);
        };
        if (v instanceof Right) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Either line 223, column 1 - line 229, column 1: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            return function (v2) {
                if (v2 instanceof Left) {
                    return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v(v2.value0));
                };
                if (v2 instanceof Right) {
                    return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v1(v2.value0));
                };
                throw new Error("Failed pattern match at Data.Either line 223, column 1 - line 229, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
            };
        };
    };
});
var applyEither = new Prelude.Apply(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return new Left(v.value0);
        };
        if (v instanceof Right) {
            return Prelude["<$>"](functorEither)(v.value0)(v1);
        };
        throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindEither = new Prelude.Bind(function () {
    return applyEither;
}, either(function (e) {
    return function (v) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}));
var semigroupEither = function (dictSemigroup) {
    return new Prelude.Semigroup(function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.append(dictSemigroup))(x))(y);
        };
    });
};
var semiringEither = function (dictSemiring) {
    return new Prelude.Semiring(function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.add(dictSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.mul(dictSemiring))(x))(y);
        };
    }, new Right(Prelude.one(dictSemiring)), new Right(Prelude.zero(dictSemiring)));
};
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function () {
    return functorEither;
}, function (v) {
    return function (v1) {
        if (v instanceof Left) {
            return v1;
        };
        return v;
    };
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    bifunctorEither: bifunctorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither, 
    boundedEither: boundedEither, 
    foldableEither: foldableEither, 
    bifoldableEither: bifoldableEither, 
    traversableEither: traversableEither, 
    bitraversableEither: bitraversableEither, 
    semiringEither: semiringEither, 
    semigroupEither: semigroupEither
};

},{"Control.Alt":"/Users/gene/Programming/pure_morph/output/Control.Alt/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Bifoldable":"/Users/gene/Programming/pure_morph/output/Data.Bifoldable/index.js","Data.Bifunctor":"/Users/gene/Programming/pure_morph/output/Data.Bifunctor/index.js","Data.Bitraversable":"/Users/gene/Programming/pure_morph/output/Data.Bitraversable/index.js","Data.Foldable":"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Data.Traversable":"/Users/gene/Programming/pure_morph/output/Data.Traversable/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Foldable/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Foldable

exports.foldrArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};

exports.foldlArray = function (f) {
  return function (init) {
    return function (xs) {
      var acc = init;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Maybe_Last = require("Data.Maybe.Last");
var Data_Monoid = require("Data.Monoid");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Endo = require("Data.Monoid.Endo");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (dictApplicative) {
    return function (dictFoldable) {
        return function (f) {
            return foldr(dictFoldable)(function ($161) {
                return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
            })(Prelude.pure(dictApplicative)(Prelude.unit));
        };
    };
};
var for_ = function (dictApplicative) {
    return function (dictFoldable) {
        return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
    };
};
var sequence_ = function (dictApplicative) {
    return function (dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (dictFoldable) {
    return function (dictMonoid) {
        return function (sep) {
            return function (xs) {
                var go = function (v) {
                    return function (x) {
                        if (v.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                        };
                    };
                };
                return (foldl(dictFoldable)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(dictMonoid)
                })(xs)).acc;
            };
        };
    };
};
var maximumBy = function (dictFoldable) {
    return function (cmp) {
        var max$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $87 = cmp(v.value0)(v1);
                        if ($87 instanceof Prelude.GT) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable line 246, column 3 - line 247, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
    };
};
var maximum = function (dictOrd) {
    return function (dictFoldable) {
        return maximumBy(dictFoldable)(Prelude.compare(dictOrd));
    };
};
var mconcat = function (dictFoldable) {
    return function (dictMonoid) {
        return foldl(dictFoldable)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(dictMonoid));
    };
};
var minimumBy = function (dictFoldable) {
    return function (cmp) {
        var min$prime = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v1);
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just((function () {
                        var $91 = cmp(v.value0)(v1);
                        if ($91 instanceof Prelude.LT) {
                            return v.value0;
                        };
                        return v1;
                    })());
                };
                throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
    };
};
var minimum = function (dictOrd) {
    return function (dictFoldable) {
        return minimumBy(dictFoldable)(Prelude.compare(dictOrd));
    };
};
var product = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Prelude["*"](dictSemiring))(Prelude.one(dictSemiring));
    };
};
var sum = function (dictFoldable) {
    return function (dictSemiring) {
        return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
    };
};
var foldableMultiplicative = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
            };
            throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
}, function (v) {
    return function (z) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
            };
            throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableDisj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableConj = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldableAdditive = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v)(z);
        };
    };
});
var foldMapDefaultR = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (xs) {
                return foldr(dictFoldable)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid))(xs);
            };
        };
    };
};
var foldableArray = new Foldable(function (dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
}, $foreign.foldlArray, $foreign.foldrArray);
var foldMapDefaultL = function (dictFoldable) {
    return function (dictMonoid) {
        return function (f) {
            return function (xs) {
                return foldl(dictFoldable)(function (acc) {
                    return function (x) {
                        return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid))(xs);
            };
        };
    };
};
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldableLast = new Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldl(foldableMaybe)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return foldr(foldableMaybe)(f)(z)(v);
        };
    };
});
var foldlDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($162) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(c)($162)));
                })(xs)))(u);
            };
        };
    };
};
var foldrDefault = function (dictFoldable) {
    return function (c) {
        return function (u) {
            return function (xs) {
                return Data_Monoid_Endo.runEndo(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($163) {
                    return Data_Monoid_Endo.Endo(c($163));
                })(xs))(u);
            };
        };
    };
};
var fold = function (dictFoldable) {
    return function (dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
    };
};
var find = function (dictFoldable) {
    return function (p) {
        return foldl(dictFoldable)(function (r) {
            return function (x) {
                var $160 = p(x);
                if ($160) {
                    return new Data_Maybe.Just(x);
                };
                if (!$160) {
                    return r;
                };
                throw new Error("Failed pattern match at Data.Foldable line 233, column 1 - line 234, column 1: " + [ $160.constructor.name ]);
            };
        })(Data_Maybe.Nothing.value);
    };
};
var any = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function ($164) {
                return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($165) {
                    return Data_Monoid_Disj.Disj(p($165));
                })($164));
            };
        };
    };
};
var elem = function (dictFoldable) {
    return function (dictEq) {
        return function ($166) {
            return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($166));
        };
    };
};
var notElem = function (dictFoldable) {
    return function (dictEq) {
        return function (x) {
            return function ($167) {
                return !elem(dictFoldable)(dictEq)(x)($167);
            };
        };
    };
};
var or = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return any(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
    };
};
var all = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return function (p) {
            return function ($168) {
                return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($169) {
                    return Data_Monoid_Conj.Conj(p($169));
                })($168));
            };
        };
    };
};
var and = function (dictFoldable) {
    return function (dictBooleanAlgebra) {
        return all(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable, 
    minimumBy: minimumBy, 
    minimum: minimum, 
    maximumBy: maximumBy, 
    maximum: maximum, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    intercalate: intercalate, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMapDefaultR: foldMapDefaultR, 
    foldMapDefaultL: foldMapDefaultL, 
    foldlDefault: foldlDefault, 
    foldrDefault: foldrDefault, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableMaybe: foldableMaybe, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableDisj: foldableDisj, 
    foldableConj: foldableConj, 
    foldableMultiplicative: foldableMultiplicative
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Foldable/foreign.js","Control.Apply":"/Users/gene/Programming/pure_morph/output/Control.Apply/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Maybe.First":"/Users/gene/Programming/pure_morph/output/Data.Maybe.First/index.js","Data.Maybe.Last":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Last/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Data.Monoid.Additive":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Additive/index.js","Data.Monoid.Conj":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Conj/index.js","Data.Monoid.Disj":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Disj/index.js","Data.Monoid.Dual":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Dual/index.js","Data.Monoid.Endo":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Endo/index.js","Data.Monoid.Multiplicative":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Multiplicative/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Function/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Function

exports.mkFn0 = function (fn) {
  return function () {
    return fn({});
  };
};

exports.mkFn1 = function (fn) {
  return function (a) {
    return fn(a);
  };
};

exports.mkFn2 = function (fn) {
  /* jshint maxparams: 2 */
  return function (a, b) {
    return fn(a)(b);
  };
};

exports.mkFn3 = function (fn) {
  /* jshint maxparams: 3 */
  return function (a, b, c) {
    return fn(a)(b)(c);
  };
};

exports.mkFn4 = function (fn) {
  /* jshint maxparams: 4 */
  return function (a, b, c, d) {
    return fn(a)(b)(c)(d);
  };
};

exports.mkFn5 = function (fn) {
  /* jshint maxparams: 5 */
  return function (a, b, c, d, e) {
    return fn(a)(b)(c)(d)(e);
  };
};

exports.mkFn6 = function (fn) {
  /* jshint maxparams: 6 */
  return function (a, b, c, d, e, f) {
    return fn(a)(b)(c)(d)(e)(f);
  };
};

exports.mkFn7 = function (fn) {
  /* jshint maxparams: 7 */
  return function (a, b, c, d, e, f, g) {
    return fn(a)(b)(c)(d)(e)(f)(g);
  };
};

exports.mkFn8 = function (fn) {
  /* jshint maxparams: 8 */
  return function (a, b, c, d, e, f, g, h) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h);
  };
};

exports.mkFn9 = function (fn) {
  /* jshint maxparams: 9 */
  return function (a, b, c, d, e, f, g, h, i) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
  };
};

exports.mkFn10 = function (fn) {
  /* jshint maxparams: 10 */
  return function (a, b, c, d, e, f, g, h, i, j) {
    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
  };
};

exports.runFn0 = function (fn) {
  return fn();
};

exports.runFn1 = function (fn) {
  return function (a) {
    return fn(a);
  };
};

exports.runFn2 = function (fn) {
  return function (a) {
    return function (b) {
      return fn(a, b);
    };
  };
};

exports.runFn3 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return fn(a, b, c);
      };
    };
  };
};

exports.runFn4 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

exports.runFn5 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return fn(a, b, c, d, e);
          };
        };
      };
    };
  };
};

exports.runFn6 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return fn(a, b, c, d, e, f);
            };
          };
        };
      };
    };
  };
};

exports.runFn7 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return fn(a, b, c, d, e, f, g);
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn8 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return fn(a, b, c, d, e, f, g, h);
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn9 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return fn(a, b, c, d, e, f, g, h, i);
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

exports.runFn10 = function (fn) {
  return function (a) {
    return function (b) {
      return function (c) {
        return function (d) {
          return function (e) {
            return function (f) {
              return function (g) {
                return function (h) {
                  return function (i) {
                    return function (j) {
                      return fn(a, b, c, d, e, f, g, h, i, j);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Function/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    on: on, 
    runFn10: $foreign.runFn10, 
    runFn9: $foreign.runFn9, 
    runFn8: $foreign.runFn8, 
    runFn7: $foreign.runFn7, 
    runFn6: $foreign.runFn6, 
    runFn5: $foreign.runFn5, 
    runFn4: $foreign.runFn4, 
    runFn3: $foreign.runFn3, 
    runFn2: $foreign.runFn2, 
    runFn1: $foreign.runFn1, 
    runFn0: $foreign.runFn0, 
    mkFn10: $foreign.mkFn10, 
    mkFn9: $foreign.mkFn9, 
    mkFn8: $foreign.mkFn8, 
    mkFn7: $foreign.mkFn7, 
    mkFn6: $foreign.mkFn6, 
    mkFn5: $foreign.mkFn5, 
    mkFn4: $foreign.mkFn4, 
    mkFn3: $foreign.mkFn3, 
    mkFn2: $foreign.mkFn2, 
    mkFn1: $foreign.mkFn1, 
    mkFn0: $foreign.mkFn0
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Function/foreign.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Invariant = function (imap) {
    this.imap = imap;
};
var imapF = function (dictFunctor) {
    return function ($1) {
        return Prelude["const"](Prelude.map(dictFunctor)($1));
    };
};
var invariantArray = new Invariant(imapF(Prelude.functorArray));
var invariantFn = new Invariant(imapF(Prelude.functorFn));
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    Invariant: Invariant, 
    imapF: imapF, 
    imap: imap, 
    invariantFn: invariantFn, 
    invariantArray: invariantArray
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Int.Bits/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Int.Bits

exports.andImpl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 & n2;
  };
};

exports.orImpl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 | n2;
  };
};

exports.xorImpl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 ^ n2;
  };
};

exports.shl = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 << n2;
  };
};

exports.shr = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 >> n2;
  };
};

exports.zshr = function (n1) {
  return function (n2) {
    /* jshint bitwise: false */
    return n1 >>> n2;
  };
};

exports.complement = function (n) {
  /* jshint bitwise: false */
  return ~n;
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Int.Bits/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var $dot$bar$dot = $foreign.orImpl;
var $dot$up$dot = $foreign.xorImpl;
var $dot$amp$dot = $foreign.andImpl;
module.exports = {
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    ".&.": $dot$amp$dot, 
    complement: $foreign.complement, 
    zshr: $foreign.zshr, 
    shr: $foreign.shr, 
    shl: $foreign.shl
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Int.Bits/foreign.js"}],"/Users/gene/Programming/pure_morph/output/Data.Int/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Int

exports.fromNumberImpl = function (just) {
  return function (nothing) {
    return function (n) {
      /* jshint bitwise: false */
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};

exports.toNumber = function (n) {
  return n;
};

exports.fromStringImpl = function (just) {
  return function (nothing) {
    return function (s) {
      /* jshint bitwise: false */
      var i = parseFloat(s);
      return (i | 0) === i ? just(i) : nothing;
    };
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Int/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Int_Bits = require("Data.Int.Bits");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var $$Math = require("Math");
var odd = function (x) {
    return (x & 1) !== 0;
};
var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var unsafeClamp = function (x) {
    if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
        return Prelude.top(Prelude.boundedInt);
    };
    if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
        return Prelude.bottom(Prelude.boundedInt);
    };
    if (Prelude.otherwise) {
        return Data_Maybe_Unsafe.fromJust(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
};
var round = function ($1) {
    return unsafeClamp($$Math.round($1));
};
var floor = function ($2) {
    return unsafeClamp($$Math.floor($2));
};
var even = function (x) {
    return (x & 1) === 0;
};
var ceil = function ($3) {
    return unsafeClamp($$Math.ceil($3));
};
module.exports = {
    odd: odd, 
    even: even, 
    fromString: fromString, 
    round: round, 
    floor: floor, 
    ceil: ceil, 
    fromNumber: fromNumber, 
    toNumber: $foreign.toNumber
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Int/foreign.js","Data.Int.Bits":"/Users/gene/Programming/pure_morph/output/Data.Int.Bits/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Maybe.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/index.js","Math":"/Users/gene/Programming/pure_morph/output/Math/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Matrix/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_TypeNat = require("Data.TypeNat");
var Data_Array = require("Data.Array");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Type_Proxy = require("Type.Proxy");
var Extensions = require("Extensions");
var Mat = function (x) {
    return x;
};
var toArray = function (v) {
    return v;
};
var getElem = function (dictSized) {
    return function (i) {
        return function (j) {
            return function (v) {
                return Data_Maybe_Unsafe.fromJust(Data_Array["!!"](v)((i * Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value) | 0) + j | 0));
            };
        };
    };
};
var generate = function (dictSized) {
    return function (f) {
        var size = Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value);
        return Mat(Data_Array.concat(Prelude["<$>"](Prelude.functorArray)(function (col) {
            return Prelude["<$>"](Prelude.functorArray)(function (row) {
                return f(col)(row);
            })(Data_Array.range(0)(size - 1));
        })(Data_Array.range(0)(size - 1))));
    };
};
var identity$prime = function (dictSized) {
    return generate(dictSized)(function (i) {
        return function (j) {
            var $23 = i === j;
            if ($23) {
                return 1.0;
            };
            if (!$23) {
                return 0.0;
            };
            throw new Error("Failed pattern match at Data.Matrix line 84, column 1 - line 85, column 1: " + [ $23.constructor.name ]);
        };
    });
};
var transpose = function (dictSized) {
    return function (m) {
        return generate(dictSized)(function (i) {
            return function (j) {
                return getElem(dictSized)(j)(i)(m);
            };
        });
    };
};
var functorMat = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude.map(Prelude.functorArray)(f)(v);
    };
});
var scaleMatrix = function (dictNum) {
    return function ($32) {
        return Prelude["<$>"](functorMat)(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())($32));
    };
};
var fromArray = function (dictSized) {
    return function (l) {
        var size = Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value);
        var $26 = size * size | 0;
        if ($26 === Data_Array.length(l)) {
            return l;
        };
        if (Prelude.otherwise) {
            return Extensions.fail("Matrix>>fromArray: Wrong array length!");
        };
        throw new Error("Failed pattern match at Data.Matrix line 104, column 1 - line 105, column 1: " + [ $26.constructor.name ]);
    };
};
var eqMat = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](Prelude.eqArray(dictEq))(v)(v1);
        };
    });
};
var columns = function (dictSized) {
    return function (v) {
        if (Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value) === 2) {
            return [ Data_Array.slice(0)(2)(v), Data_Array.slice(2)(4)(v) ];
        };
        if (Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value) === 3) {
            return [ Data_Array.slice(0)(3)(v), Data_Array.slice(3)(6)(v), Data_Array.slice(6)(9)(v) ];
        };
        if (Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value) === 4) {
            return [ Data_Array.slice(0)(4)(v), Data_Array.slice(4)(8)(v), Data_Array.slice(8)(12)(v), Data_Array.slice(12)(16)(v) ];
        };
        if (Prelude.otherwise) {
            return Extensions.fail("Matrix>>columns: Proxy size not supprted!");
        };
        throw new Error("Failed pattern match at Data.Matrix line 49, column 1 - line 50, column 1: " + [ v.constructor.name ]);
    };
};
var showMat2 = function (dictShow) {
    return new Prelude.Show(function (m) {
        return "Mat2x2 " + Prelude.show(Prelude.showArray(Prelude.showArray(dictShow)))(columns(Data_TypeNat.s2)(m));
    });
};
var showMat3 = function (dictShow) {
    return new Prelude.Show(function (m) {
        return "Mat3x3 " + Prelude.show(Prelude.showArray(Prelude.showArray(dictShow)))(columns(Data_TypeNat.s3)(m));
    });
};
var showMat4 = function (dictShow) {
    return new Prelude.Show(function (m) {
        return "Mat4x4 " + Prelude.show(Prelude.showArray(Prelude.showArray(dictShow)))(columns(Data_TypeNat.s4)(m));
    });
};
var applyMat = new Prelude.Apply(function () {
    return functorMat;
}, function (v) {
    return function (v1) {
        return Data_Array.zipWith(function (f$prime) {
            return function (a$prime) {
                return f$prime(a$prime);
            };
        })(v)(v1);
    };
});
module.exports = {
    Mat: Mat, 
    transpose: transpose, 
    toArray: toArray, 
    fromArray: fromArray, 
    scaleMatrix: scaleMatrix, 
    getElem: getElem, 
    "identity'": identity$prime, 
    columns: columns, 
    generate: generate, 
    showMat2: showMat2, 
    showMat3: showMat3, 
    showMat4: showMat4, 
    eqMat: eqMat, 
    functorMat: functorMat, 
    applyMat: applyMat
};

},{"Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Data.Maybe.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/index.js","Data.TypeNat":"/Users/gene/Programming/pure_morph/output/Data.TypeNat/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js","Type.Proxy":"/Users/gene/Programming/pure_morph/output/Type.Proxy/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Matrix4/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_TypeNat = require("Data.TypeNat");
var Data_Matrix = require("Data.Matrix");
var Data_Vector3 = require("Data.Vector3");
var Data_Vector4 = require("Data.Vector4");
var Data_Vector = require("Data.Vector");
var Data_Maybe = require("Data.Maybe");
var $$Math = require("Math");
var Extensions = require("Extensions");
var translate3 = function (x) {
    return function (y) {
        return function (z) {
            return function (v) {
                if (v.length === 16) {
                    return [ v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9], v[10], v[11], v[0] * x + v[4] * y + v[8] * z + v[12], v[1] * x + v[5] * y + v[9] * z + v[13], v[2] * x + v[6] * y + v[10] * z + v[14], v[3] * x + v[7] * y + v[11] * z + v[15] ];
                };
                return Extensions.fail("Matrix3>>translate3: Impossible!");
            };
        };
    };
};
var translate = function (v) {
    return function (v1) {
        if (v.length === 3) {
            return translate3(v[0])(v[1])(v[2])(v1);
        };
        return Extensions.fail("Matrix3>>translate: Impossible!");
    };
};
var transform = function (v) {
    return function (v1) {
        if (v.length === 16) {
            var t4 = [ v[3], v[7], v[11] ];
            var w = Data_Vector.dot(v1)(t4) + v[15];
            var t3 = [ v[2], v[6], v[10] ];
            var t2 = [ v[1], v[5], v[9] ];
            var t1 = [ v[0], v[4], v[8] ];
            return [ (Data_Vector.dot(v1)(t1) + v[12]) / w, (Data_Vector.dot(v1)(t2) + v[13]) / w, (Data_Vector.dot(v1)(t3) + v[14]) / w ];
        };
        return Extensions.fail("Matrix4>>transform: Impossible!");
    };
};
var scale3 = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v3.length === 16) {
                    return [ v3[0] * v, v3[1] * v, v3[2] * v, v3[3] * v, v3[4] * v1, v3[5] * v1, v3[6] * v1, v3[7] * v1, v3[8] * v2, v3[9] * v2, v3[10] * v2, v3[11] * v2, v3[12], v3[13], v3[14], v3[15] ];
                };
                return Extensions.fail("Matrix4>>scale3: Impossible!");
            };
        };
    };
};
var scale = function (v) {
    if (v.length === 3) {
        return scale3(v[0])(v[1])(v[2]);
    };
    return Extensions.fail("Matrix4>>scale: Impossible!");
};
var rotate = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1.length === 3 && v2.length === 16) {
                var s = $$Math.sin(v);
                var l = $$Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2]);
                var im = 1.0 / l;
                var x = v1[0] * im;
                var xs = x * s;
                var y = v1[1] * im;
                var ys = y * s;
                var z = v1[2] * im;
                var zs = z * s;
                var c = $$Math.cos(v);
                var c1 = 1.0 - c;
                var xyc1 = x * y * c1;
                var t12 = xyc1 - zs;
                var t21 = xyc1 + zs;
                var xzc1 = x * z * c1;
                var t13 = xzc1 + ys;
                var t31 = xzc1 - ys;
                var yzc1 = y * z * c1;
                var t23 = yzc1 - xs;
                var t32 = yzc1 + xs;
                var t11 = x * x * c1 + c;
                var t22 = y * y * c1 + c;
                var t33 = z * z * c1 + c;
                return [ v2[0] * t11 + v2[4] * t21 + v2[8] * t31, v2[1] * t11 + v2[5] * t21 + v2[9] * t31, v2[2] * t11 + v2[6] * t21 + v2[10] * t31, v2[3] * t11 + v2[7] * t21 + v2[11] * t31, v2[0] * t12 + v2[4] * t22 + v2[8] * t32, v2[1] * t12 + v2[5] * t22 + v2[9] * t32, v2[2] * t12 + v2[6] * t22 + v2[10] * t32, v2[3] * t12 + v2[7] * t22 + v2[11] * t32, v2[0] * t13 + v2[4] * t23 + v2[8] * t33, v2[1] * t13 + v2[5] * t23 + v2[9] * t33, v2[2] * t13 + v2[6] * t23 + v2[10] * t33, v2[3] * t13 + v2[7] * t23 + v2[11] * t33, v2[12], v2[13], v2[14], v2[15] ];
            };
            return Extensions.fail("Matrix4>>rotate: Impossible!");
        };
    };
};
var project = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v.length === 3 && (v1.length === 16 && (v2.length === 16 && v3.length === 4))) {
                    var temp1 = [ v1[0] * v[0] + v1[4] * v[1] + v1[8] * v[2] + v1[12], v1[1] * v[0] + v1[5] * v[1] + v1[9] * v[2] + v1[13], v1[2] * v[0] + v1[6] * v[1] + v1[10] * v[2] + v1[14], v1[3] * v[0] + v1[7] * v[1] + v1[11] * v[2] + v1[15] ];
                    if (temp1.length === 4) {
                        var temp2 = [ v2[0] * temp1[0] + v2[4] * temp1[1] + v2[8] * temp1[2] + v2[12] * temp1[3], v2[1] * temp1[0] + v2[5] * temp1[1] + v2[9] * temp1[2] + v2[13] * temp1[3], v2[2] * temp1[0] + v2[6] * temp1[1] + v2[10] * temp1[2] + v2[14] * temp1[3], -temp1[2] ];
                        if (temp2.length === 4) {
                            var $132 = temp2[3] === 0.0;
                            if ($132) {
                                return Data_Maybe.Nothing.value;
                            };
                            if (!$132) {
                                var gt3$prime = 1.0 / temp2[3];
                                var gt2$prime = temp2[2] * gt3$prime;
                                var gt1$prime = temp2[1] * gt3$prime;
                                var gt0$prime = temp2[0] * gt3$prime;
                                return new Data_Maybe.Just([ (gt0$prime * 0.5 + 0.5) * v3[2] + v3[0], (gt1$prime * 0.5 + 0.5) * v3[3] + v3[1], (1.0 + gt2$prime) * 0.5 ]);
                            };
                            throw new Error("Failed pattern match at Data.Matrix4 line 370, column 1 - line 378, column 1: " + [ $132.constructor.name ]);
                        };
                        return Extensions.fail("Matrix4>>project: Impossible!");
                    };
                    return Extensions.fail("Matrix4>>project: Impossible!");
                };
                return Extensions.fail("Matrix4>>project: Impossible!");
            };
        };
    };
};
var mulMatVect = function (v) {
    return function (v1) {
        if (v.length === 16 && v1.length === 4) {
            return [ v[0] * v1[0] + v[4] * v1[1] + v[8] * v1[2] + v[12] * v1[3], v[1] * v1[0] + v[5] * v1[1] + v[9] * v1[2] + v[13] * v1[3], v[2] * v1[0] + v[6] * v1[1] + v[10] * v1[2] + v[14] * v1[3], v[3] * v1[0] + v[7] * v1[1] + v[11] * v1[2] + v[15] * v1[3] ];
        };
        return Extensions.fail("Matrix4>>mulMatVect: Impossible!");
    };
};
var mulM = function (v) {
    return function (v1) {
        if (v.length === 16 && v1.length === 16) {
            return [ v[0] * v1[0] + v[4] * v1[1] + v[8] * v1[2] + v[12] * v1[3], v[1] * v1[0] + v[5] * v1[1] + v[9] * v1[2] + v[13] * v1[3], v[2] * v1[0] + v[6] * v1[1] + v[10] * v1[2] + v[14] * v1[3], v[3] * v1[0] + v[7] * v1[1] + v[11] * v1[2] + v[15] * v1[3], v[0] * v1[4] + v[4] * v1[5] + v[8] * v1[6] + v[12] * v1[7], v[1] * v1[4] + v[5] * v1[5] + v[9] * v1[6] + v[13] * v1[7], v[2] * v1[4] + v[6] * v1[5] + v[10] * v1[6] + v[14] * v1[7], v[3] * v1[4] + v[7] * v1[5] + v[11] * v1[6] + v[15] * v1[7], v[0] * v1[8] + v[4] * v1[9] + v[8] * v1[10] + v[12] * v1[11], v[1] * v1[8] + v[5] * v1[9] + v[9] * v1[10] + v[13] * v1[11], v[2] * v1[8] + v[6] * v1[9] + v[10] * v1[10] + v[14] * v1[11], v[3] * v1[8] + v[7] * v1[9] + v[11] * v1[10] + v[15] * v1[11], v[0] * v1[12] + v[4] * v1[13] + v[8] * v1[14] + v[12] * v1[15], v[1] * v1[12] + v[5] * v1[13] + v[9] * v1[14] + v[13] * v1[15], v[2] * v1[12] + v[6] * v1[13] + v[10] * v1[14] + v[14] * v1[15], v[3] * v1[12] + v[7] * v1[13] + v[11] * v1[14] + v[15] * v1[15] ];
        };
        return Extensions.fail("Matrix4>>mulM: Impossible!");
    };
};
var mulAffine = function (v) {
    return function (v1) {
        if (v.length === 16 && v1.length === 16) {
            return [ v[0] * v1[0] + v[1] * v1[4] + v[2] * v1[8], v[4] * v1[0] + v[5] * v1[4] + v[6] * v1[8], v[8] * v1[0] + v[9] * v1[4] + v[10] * v1[8], 0.0, v[0] * v1[1] + v[1] * v1[5] + v[2] * v1[9], v[4] * v1[1] + v[5] * v1[5] + v[6] * v1[9], v[8] * v1[1] + v[9] * v1[5] + v[10] * v1[9], 0.0, v[0] * v1[2] + v[1] * v1[6] + v[2] * v1[10], v[4] * v1[2] + v[5] * v1[6] + v[6] * v1[10], v[8] * v1[2] + v[9] * v1[6] + v[10] * v1[10], 0.0, v[0] * v1[3] + v[1] * v1[7] + v[2] * v1[11] + v[3], v[4] * v1[3] + v[5] * v1[7] + v[6] * v1[11] + v[7], v[8] * v1[3] + v[9] * v1[7] + v[10] * v1[11] + v[11], 1.0 ];
        };
        return Extensions.fail("Matrix4>>mulAffine: Impossible!");
    };
};
var mat4 = Data_Matrix.fromArray(Data_TypeNat.s4);
var makeTranslate3 = function (x) {
    return function (y) {
        return function (z) {
            return [ 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0 ];
        };
    };
};
var makeTranslate = function (v) {
    if (v.length === 3) {
        return makeTranslate3(v[0])(v[1])(v[2]);
    };
    return Extensions.fail("Matrix4>>makeTranslate: Impossible!");
};
var makeScale3 = function (x) {
    return function (y) {
        return function (z) {
            return [ x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0 ];
        };
    };
};
var makeScale = function (v) {
    if (v.length === 3) {
        return makeScale3(v[0])(v[1])(v[2]);
    };
    return Extensions.fail("Matrix4>>makeScale: Impossible!");
};
var makeRotate = function (angle) {
    return function (axis) {
        var $278 = Data_Vector.normalize(axis);
        if ($278.length === 3) {
            var s = $$Math.sin(angle);
            var c = $$Math.cos(angle);
            var c1 = 1.0 - c;
            return [ $278[0] * $278[0] * c1 + c, $278[1] * $278[0] * c1 + $278[2] * s, $278[2] * $278[0] * c1 - $278[1] * s, 0.0, $278[0] * $278[1] * c1 - $278[2] * s, $278[1] * $278[1] * c1 + c, $278[1] * $278[2] * c1 + $278[0] * s, 0.0, $278[0] * $278[2] * c1 + $278[1] * s, $278[1] * $278[2] * c1 - $278[0] * s, $278[2] * $278[2] * c1 + c, 0.0, 0.0, 0.0, 0.0, 1.0 ];
        };
        return Extensions.fail("Matrix4>>makeRotate: Impossible!");
    };
};
var makeOrtho = function (left) {
    return function (right) {
        return function (bottom) {
            return function (top) {
                return function (znear) {
                    return function (zfar) {
                        var z = -2.0 / (zfar - znear);
                        var y = 2.0 / (top - bottom);
                        var x = 2.0 / (right - left);
                        var tZ = -(zfar + znear) / (zfar - znear);
                        var tY = -(top + bottom) / (top - bottom);
                        var tX = -(right + left) / (right - left);
                        return [ x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, tX, tY, tZ, 1.0 ];
                    };
                };
            };
        };
    };
};
var makeOrtho2D = function (left) {
    return function (right) {
        return function (bottom) {
            return function (top) {
                return makeOrtho(left)(right)(bottom)(top)(-1.0)(1.0);
            };
        };
    };
};
var makeLookAt = function (v) {
    return function (v1) {
        return function (v2) {
            if (v.length === 3) {
                var $285 = Data_Vector.direction(v)(v1);
                if ($285.length === 3) {
                    var $286 = Data_Vector.normalize(Data_Vector3.cross(Prelude.numNumber)(v2)($285));
                    if ($286.length === 3) {
                        var $287 = Data_Vector.normalize(Data_Vector3.cross(Prelude.numNumber)($285)($286));
                        if ($287.length === 3) {
                            var m2 = [ 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -v[0], -v[1], -v[2], 1.0 ];
                            var m1 = [ $286[0], $287[0], $285[0], 0.0, $286[1], $287[1], $285[1], 0.0, $286[2], $287[2], $285[2], 0.0, 0.0, 0.0, 0.0, 1.0 ];
                            return mulM(m1)(m2);
                        };
                        return Extensions.fail("Matrix4>>makeRotate: Impossible!");
                    };
                    return Extensions.fail("Matrix4>>makeRotate: Impossible!");
                };
                return Extensions.fail("Matrix4>>makeRotate: Impossible!");
            };
            return Extensions.fail("Matrix4>>makeLookAt: Impossible!");
        };
    };
};
var makeFrustum = function (left) {
    return function (right) {
        return function (bottom) {
            return function (top) {
                return function (znear) {
                    return function (zfar) {
                        var z = (right + left) / (right - left);
                        var y = (2.0 * znear) / (top - bottom);
                        var x = (2.0 * znear) / (right - left);
                        var d = (-2.0 * zfar * znear) / (zfar - znear);
                        var c = -(zfar + znear) / (zfar - znear);
                        var b = (top + bottom) / (top - bottom);
                        return [ (2.0 * znear) / (right - left), 0.0, 0.0, 0.0, 0.0, (2.0 * znear) / (top - bottom), 0.0, 0.0, (right + left) / (right - left), (top + bottom) / (top - bottom), -(zfar + znear) / (zfar - znear), -1.0, 0.0, 0.0, (-2.0 * zfar * znear) / (zfar - znear), 0.0 ];
                    };
                };
            };
        };
    };
};
var makePerspective = function (fovy) {
    return function (aspect) {
        return function (znear) {
            return function (zfar) {
                var ymax = znear * $$Math.tan((fovy * $$Math.pi) / 360.0);
                var ymin = -ymax;
                var xmin = ymin * aspect;
                var xmax = ymax * aspect;
                return makeFrustum(xmin)(xmax)(ymin)(ymax)(znear)(zfar);
            };
        };
    };
};
var makeBasis = function (v) {
    return function (v1) {
        return function (v2) {
            if (v.length === 3 && (v1.length === 3 && v2.length === 3)) {
                return [ v[0], v[1], v[2], 0.0, v1[0], v1[1], v1[2], 0.0, v2[0], v2[1], v2[2], 0.0, 0.0, 0.0, 0.0, 1.0 ];
            };
            return Extensions.fail("Matrix4>>makeBasis: Impossible!");
        };
    };
};
var inverseOrthonormal = function (v) {
    if (v.length === 16) {
        var $313 = Data_Matrix.transpose(Data_TypeNat.s4)(v);
        if ($313.length === 16) {
            var t = [ v[12], v[13], v[14] ];
            var r14 = -Data_Vector.dot([ $313[2], $313[6], $313[10] ])(t);
            var r13 = -Data_Vector.dot([ $313[1], $313[5], $313[9] ])(t);
            var r12 = -Data_Vector.dot([ $313[0], $313[4], $313[8] ])(t);
            return [ $313[0], $313[1], $313[2], 0.0, $313[4], $313[5], $313[6], 0.0, $313[8], $313[9], $313[10], 0.0, r12, r13, r14, $313[15] ];
        };
        return Extensions.fail("Matrix4>>inverseOrthonormal: Impossible!");
    };
    return Extensions.fail("Matrix4>>inverseOrthonormal: Impossible!");
};
var inverse = function (v) {
    if (v.length === 16) {
        var b11 = v[10] * v[15] - v[11] * v[14];
        var b10 = v[9] * v[15] - v[11] * v[13];
        var b09 = v[9] * v[14] - v[10] * v[13];
        var b08 = v[8] * v[15] - v[11] * v[12];
        var b07 = v[8] * v[14] - v[10] * v[12];
        var b06 = v[8] * v[13] - v[9] * v[12];
        var b05 = v[2] * v[7] - v[3] * v[6];
        var b04 = v[1] * v[7] - v[3] * v[5];
        var b03 = v[1] * v[6] - v[2] * v[5];
        var b02 = v[0] * v[7] - v[3] * v[4];
        var b01 = v[0] * v[6] - v[2] * v[4];
        var b00 = v[0] * v[5] - v[1] * v[4];
        var d = (((b00 * b11 - b01 * b10) + b02 * b09 + b03 * b08) - b04 * b07) + b05 * b06;
        var $347 = d === 0.0;
        if ($347) {
            return Data_Maybe.Nothing.value;
        };
        if (!$347) {
            var invDet = 1.0 / d;
            return Data_Maybe.Just.create([ ((v[5] * b11 - v[6] * b10) + v[7] * b09) * invDet, ((-v[1] * b11 + v[2] * b10) - v[3] * b09) * invDet, ((v[13] * b05 - v[14] * b04) + v[15] * b03) * invDet, ((-v[9] * b05 + v[10] * b04) - v[11] * b03) * invDet, ((-v[4] * b11 + v[6] * b08) - v[7] * b07) * invDet, ((v[0] * b11 - v[2] * b08) + v[3] * b07) * invDet, ((-v[12] * b05 + v[14] * b02) - v[15] * b01) * invDet, ((v[8] * b05 - v[10] * b02) + v[11] * b01) * invDet, ((v[4] * b10 - v[5] * b08) + v[7] * b06) * invDet, ((-v[0] * b10 + v[1] * b08) - v[3] * b06) * invDet, ((v[12] * b04 - v[13] * b02) + v[15] * b00) * invDet, ((-v[8] * b04 + v[9] * b02) - v[11] * b00) * invDet, ((-v[4] * b09 + v[5] * b07) - v[6] * b06) * invDet, ((v[0] * b09 - v[1] * b07) + v[2] * b06) * invDet, ((-v[12] * b03 + v[13] * b01) - v[14] * b00) * invDet, ((v[8] * b03 - v[9] * b01) + v[10] * b00) * invDet ]);
        };
        throw new Error("Failed pattern match at Data.Matrix4 line 69, column 1 - line 70, column 1: " + [ $347.constructor.name ]);
    };
    return Extensions.fail("Matrix4>>inverse: Impossible!");
};
var unProject = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v.length === 3 && v3.length === 4) {
                    var mvProjMatrix = mulM(v2)(v1);
                    var $368 = inverse(mvProjMatrix);
                    if ($368 instanceof Data_Maybe.Nothing) {
                        return Data_Maybe.Nothing.value;
                    };
                    if ($368 instanceof Data_Maybe.Just) {
                        var inVect = [ ((v[0] - v3[0]) / v3[2]) * 2.0 - 1.0, ((v[1] - v3[1]) / v3[3]) * 2.0 - 1.0, 2.0 * v[2] - 1.0, 1.0 ];
                        var out = mulMatVect($368.value0)(inVect);
                        if (out.length === 4) {
                            var $370 = out[3] === 0.0;
                            if ($370) {
                                return Data_Maybe.Nothing.value;
                            };
                            if (!$370) {
                                var out3$prime = 1.0 / out[3];
                                return new Data_Maybe.Just([ out[0] * out3$prime, out[1] * out3$prime, out[2] * out3$prime ]);
                            };
                            throw new Error("Failed pattern match at Data.Matrix4 line 414, column 1 - line 422, column 1: " + [ $370.constructor.name ]);
                        };
                        return Extensions.fail("Matrix4>>unProject: Impossible!");
                    };
                    throw new Error("Failed pattern match at Data.Matrix4 line 414, column 1 - line 422, column 1: " + [ $368.constructor.name ]);
                };
                return Extensions.fail("Matrix4>>unProject: Impossible!");
            };
        };
    };
};
var identity = [ 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 ];
module.exports = {
    mulMatVect: mulMatVect, 
    unProject: unProject, 
    project: project, 
    makeBasis: makeBasis, 
    makeLookAt: makeLookAt, 
    translate: translate, 
    translate3: translate3, 
    makeTranslate: makeTranslate, 
    makeTranslate3: makeTranslate3, 
    scale: scale, 
    scale3: scale3, 
    makeScale: makeScale, 
    makeScale3: makeScale3, 
    rotate: rotate, 
    makeRotate: makeRotate, 
    mulAffine: mulAffine, 
    mulM: mulM, 
    makeOrtho2D: makeOrtho2D, 
    makeOrtho: makeOrtho, 
    makePerspective: makePerspective, 
    makeFrustum: makeFrustum, 
    inverse: inverse, 
    inverseOrthonormal: inverseOrthonormal, 
    transform: transform, 
    identity: identity, 
    mat4: mat4
};

},{"Data.Matrix":"/Users/gene/Programming/pure_morph/output/Data.Matrix/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.TypeNat":"/Users/gene/Programming/pure_morph/output/Data.TypeNat/index.js","Data.Vector":"/Users/gene/Programming/pure_morph/output/Data.Vector/index.js","Data.Vector3":"/Users/gene/Programming/pure_morph/output/Data.Vector3/index.js","Data.Vector4":"/Users/gene/Programming/pure_morph/output/Data.Vector4/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Math":"/Users/gene/Programming/pure_morph/output/Math/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Maybe.First/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return v;
        };
        return v1;
    };
});
var runFirst = function (v) {
    return v;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var functorFirst = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
    };
});
var invariantFirst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorFirst));
var extendFirst = new Control_Extend.Extend(function () {
    return functorFirst;
}, function (f) {
    return function (v) {
        return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
            return f(First($34));
        })(v);
    };
});
var eqFirst = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
        };
    });
};
var ordFirst = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqFirst(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
        };
    });
};
var boundedFirst = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
};
var applyFirst = new Prelude.Apply(function () {
    return functorFirst;
}, function (v) {
    return function (v1) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
    };
});
var bindFirst = new Prelude.Bind(function () {
    return applyFirst;
}, function (v) {
    return function (f) {
        return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
            return runFirst(f($35));
        });
    };
});
var applicativeFirst = new Prelude.Applicative(function () {
    return applyFirst;
}, function ($36) {
    return First(Prelude.pure(Data_Maybe.applicativeMaybe)($36));
});
var monadFirst = new Prelude.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First, 
    runFirst: runFirst, 
    eqFirst: eqFirst, 
    ordFirst: ordFirst, 
    boundedFirst: boundedFirst, 
    functorFirst: functorFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    invariantFirst: invariantFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Maybe.Last/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Last = function (x) {
    return x;
};
var showLast = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Last (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
    });
};
var semigroupLast = new Prelude.Semigroup(function (v) {
    return function (v1) {
        if (v1 instanceof Data_Maybe.Just) {
            return v1;
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return v;
        };
        throw new Error("Failed pattern match at Data.Maybe.Last line 57, column 1 - line 61, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var runLast = function (v) {
    return v;
};
var monoidLast = new Data_Monoid.Monoid(function () {
    return semigroupLast;
}, Data_Maybe.Nothing.value);
var functorLast = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
    };
});
var invariantLast = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLast));
var extendLast = new Control_Extend.Extend(function () {
    return functorLast;
}, function (f) {
    return function (v) {
        return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
            return f(Last($34));
        })(v);
    };
});
var eqLast = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
        };
    });
};
var ordLast = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqLast(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
        };
    });
};
var boundedLast = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
};
var applyLast = new Prelude.Apply(function () {
    return functorLast;
}, function (v) {
    return function (v1) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
    };
});
var bindLast = new Prelude.Bind(function () {
    return applyLast;
}, function (v) {
    return function (f) {
        return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
            return runLast(f($35));
        });
    };
});
var applicativeLast = new Prelude.Applicative(function () {
    return applyLast;
}, function ($36) {
    return Last(Prelude.pure(Data_Maybe.applicativeMaybe)($36));
});
var monadLast = new Prelude.Monad(function () {
    return applicativeLast;
}, function () {
    return bindLast;
});
module.exports = {
    Last: Last, 
    runLast: runLast, 
    eqLast: eqLast, 
    ordLast: ordLast, 
    boundedLast: boundedLast, 
    functorLast: functorLast, 
    applyLast: applyLast, 
    applicativeLast: applicativeLast, 
    bindLast: bindLast, 
    monadLast: monadLast, 
    extendLast: extendLast, 
    invariantLast: invariantLast, 
    showLast: showLast, 
    semigroupLast: semigroupLast, 
    monoidLast: monoidLast
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Maybe.Unsafe

exports.unsafeThrow = function (msg) {
  throw new Error(msg);
};

},{}],"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var fromJust = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
    };
    throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
};
module.exports = {
    fromJust: fromJust, 
    unsafeThrow: $foreign.unsafeThrow
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/foreign.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Extend = require("Control.Extend");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (dictShow) {
    return new Prelude.Show(function (v) {
        if (v instanceof Just) {
            return "Just (" + (Prelude.show(dictShow)(v.value0) + ")");
        };
        if (v instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match at Data.Maybe line 289, column 1 - line 291, column 19: " + [ v.constructor.name ]);
    });
};
var semigroupMaybe = function (dictSemigroup) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            if (v instanceof Nothing) {
                return v1;
            };
            if (v1 instanceof Nothing) {
                return v;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return new Just(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 236, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var monoidMaybe = function (dictSemigroup) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMaybe(dictSemigroup);
    }, Nothing.value);
};
var maybe$prime = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v(Prelude.unit);
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 39, column 1 - line 40, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var maybe = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof Nothing) {
                return v;
            };
            if (v2 instanceof Just) {
                return v1(v2.value0);
            };
            throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (v) {
    return function (v1) {
        if (v1 instanceof Just) {
            return new Just(v(v1.value0));
        };
        return Nothing.value;
    };
});
var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
var fromMaybe$prime = function (a) {
    return maybe$prime(a)(Prelude.id(Prelude.categoryFn));
};
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryFn));
};
var extendMaybe = new Control_Extend.Extend(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v1 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(v(v1));
    };
});
var eqMaybe = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            if (v instanceof Nothing && v1 instanceof Nothing) {
                return true;
            };
            if (v instanceof Just && v1 instanceof Just) {
                return Prelude["=="](dictEq)(v.value0)(v1.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqMaybe(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            if (v instanceof Just && v1 instanceof Just) {
                return Prelude.compare(dictOrd)(v.value0)(v1.value0);
            };
            if (v instanceof Nothing && v1 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (v instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (v1 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 275, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var boundedMaybe = function (dictBounded) {
    return new Prelude.Bounded(Nothing.value, new Just(Prelude.top(dictBounded)));
};
var boundedOrdMaybe = function (dictBoundedOrd) {
    return new Prelude.BoundedOrd(function () {
        return boundedMaybe(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
    }, function () {
        return ordMaybe(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
    });
};
var applyMaybe = new Prelude.Apply(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return Prelude["<$>"](functorMaybe)(v.value0)(v1);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var bindMaybe = new Prelude.Bind(function () {
    return applyMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Just) {
            return v1(v.value0);
        };
        if (v instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var booleanAlgebraMaybe = function (dictBooleanAlgebra) {
    return new Prelude.BooleanAlgebra(function () {
        return boundedMaybe(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.conj(dictBooleanAlgebra))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.disj(dictBooleanAlgebra))(x))(y);
        };
    }, Prelude.map(functorMaybe)(Prelude.not(dictBooleanAlgebra)));
};
var semiringMaybe = function (dictSemiring) {
    return new Prelude.Semiring(function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.add(dictSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mul(dictSemiring))(x))(y);
        };
    }, new Just(Prelude.one(dictSemiring)), new Just(Prelude.zero(dictSemiring)));
};
var moduloSemiringMaybe = function (dictModuloSemiring) {
    return new Prelude.ModuloSemiring(function () {
        return semiringMaybe(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.div(dictModuloSemiring))(x))(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mod(dictModuloSemiring))(x))(y);
        };
    });
};
var ringMaybe = function (dictRing) {
    return new Prelude.Ring(function () {
        return semiringMaybe(dictRing["__superclass_Prelude.Semiring_0"]());
    }, function (x) {
        return function (y) {
            return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.sub(dictRing))(x))(y);
        };
    });
};
var divisionRingMaybe = function (dictDivisionRing) {
    return new Prelude.DivisionRing(function () {
        return moduloSemiringMaybe(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
    }, function () {
        return ringMaybe(dictDivisionRing["__superclass_Prelude.Ring_0"]());
    });
};
var numMaybe = function (dictNum) {
    return new Prelude.Num(function () {
        return divisionRingMaybe(dictNum["__superclass_Prelude.DivisionRing_0"]());
    });
};
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function () {
    return functorMaybe;
}, function (v) {
    return function (v1) {
        if (v instanceof Nothing) {
            return v1;
        };
        return v;
    };
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    "fromMaybe'": fromMaybe$prime, 
    fromMaybe: fromMaybe, 
    "maybe'": maybe$prime, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    invariantMaybe: invariantMaybe, 
    semigroupMaybe: semigroupMaybe, 
    monoidMaybe: monoidMaybe, 
    semiringMaybe: semiringMaybe, 
    moduloSemiringMaybe: moduloSemiringMaybe, 
    ringMaybe: ringMaybe, 
    divisionRingMaybe: divisionRingMaybe, 
    numMaybe: numMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe, 
    boundedMaybe: boundedMaybe, 
    boundedOrdMaybe: boundedOrdMaybe, 
    booleanAlgebraMaybe: booleanAlgebraMaybe, 
    showMaybe: showMaybe
};

},{"Control.Alt":"/Users/gene/Programming/pure_morph/output/Control.Alt/index.js","Control.Alternative":"/Users/gene/Programming/pure_morph/output/Control.Alternative/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Control.MonadPlus":"/Users/gene/Programming/pure_morph/output/Control.MonadPlus/index.js","Control.Plus":"/Users/gene/Programming/pure_morph/output/Control.Plus/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid.Additive/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Additive = function (x) {
    return x;
};
var showAdditive = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Additive (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semigroupAdditive = function (dictSemiring) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude["+"](dictSemiring)(v)(v1);
        };
    });
};
var runAdditive = function (v) {
    return v;
};
var monoidAdditive = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupAdditive(dictSemiring);
    }, Prelude.zero(dictSemiring));
};
var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorAdditive = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendAdditive = new Control_Extend.Extend(function () {
    return functorAdditive;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqAdditive = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordAdditive = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqAdditive(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadAdditive = new Control_Comonad.Comonad(function () {
    return extendAdditive;
}, runAdditive);
var applyAdditive = new Prelude.Apply(function () {
    return functorAdditive;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindAdditive = new Prelude.Bind(function () {
    return applyAdditive;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeAdditive = new Prelude.Applicative(function () {
    return applyAdditive;
}, Additive);
var monadAdditive = new Prelude.Monad(function () {
    return applicativeAdditive;
}, function () {
    return bindAdditive;
});
module.exports = {
    Additive: Additive, 
    runAdditive: runAdditive, 
    eqAdditive: eqAdditive, 
    ordAdditive: ordAdditive, 
    functorAdditive: functorAdditive, 
    applyAdditive: applyAdditive, 
    applicativeAdditive: applicativeAdditive, 
    bindAdditive: bindAdditive, 
    monadAdditive: monadAdditive, 
    extendAdditive: extendAdditive, 
    comonadAdditive: comonadAdditive, 
    invariantAdditive: invariantAdditive, 
    showAdditive: showAdditive, 
    semigroupAdditive: semigroupAdditive, 
    monoidAdditive: monoidAdditive
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid.Conj/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Conj = function (x) {
    return x;
};
var showConj = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Conj (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semiringConj = function (dictBooleanAlgebra) {
    return new Prelude.Semiring(function (v) {
        return function (v1) {
            return Prelude.conj(dictBooleanAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Prelude.disj(dictBooleanAlgebra)(v)(v1);
        };
    }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var semigroupConj = function (dictBooleanAlgebra) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude.conj(dictBooleanAlgebra)(v)(v1);
        };
    });
};
var runConj = function (v) {
    return v;
};
var monoidConj = function (dictBooleanAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(dictBooleanAlgebra);
    }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var functorConj = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendConj = new Control_Extend.Extend(function () {
    return functorConj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqConj = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordConj = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqConj(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadConj = new Control_Comonad.Comonad(function () {
    return extendConj;
}, runConj);
var boundedConj = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
};
var applyConj = new Prelude.Apply(function () {
    return functorConj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindConj = new Prelude.Bind(function () {
    return applyConj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeConj = new Prelude.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Prelude.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj, 
    runConj: runConj, 
    eqConj: eqConj, 
    ordConj: ordConj, 
    boundedConj: boundedConj, 
    functorConj: functorConj, 
    applyConj: applyConj, 
    applicativeConj: applicativeConj, 
    bindConj: bindConj, 
    monadConj: monadConj, 
    extendConj: extendConj, 
    comonadConj: comonadConj, 
    showConj: showConj, 
    semigroupConj: semigroupConj, 
    monoidConj: monoidConj, 
    semiringConj: semiringConj
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid.Disj/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Disj = function (x) {
    return x;
};
var showDisj = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Disj (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semiringDisj = function (dictBooleanAlgebra) {
    return new Prelude.Semiring(function (v) {
        return function (v1) {
            return Prelude.disj(dictBooleanAlgebra)(v)(v1);
        };
    }, function (v) {
        return function (v1) {
            return Prelude.conj(dictBooleanAlgebra)(v)(v1);
        };
    }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var semigroupDisj = function (dictBooleanAlgebra) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude.disj(dictBooleanAlgebra)(v)(v1);
        };
    });
};
var runDisj = function (v) {
    return v;
};
var monoidDisj = function (dictBooleanAlgebra) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(dictBooleanAlgebra);
    }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
};
var functorDisj = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendDisj = new Control_Extend.Extend(function () {
    return functorDisj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDisj = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordDisj = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqDisj(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadDisj = new Control_Comonad.Comonad(function () {
    return extendDisj;
}, runDisj);
var boundedDisj = function (dictBounded) {
    return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
};
var applyDisj = new Prelude.Apply(function () {
    return functorDisj;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDisj = new Prelude.Bind(function () {
    return applyDisj;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDisj = new Prelude.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Prelude.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj, 
    runDisj: runDisj, 
    eqDisj: eqDisj, 
    ordDisj: ordDisj, 
    boundedDisj: boundedDisj, 
    functorDisj: functorDisj, 
    applyDisj: applyDisj, 
    applicativeDisj: applicativeDisj, 
    bindDisj: bindDisj, 
    monadDisj: monadDisj, 
    extendDisj: extendDisj, 
    comonadDisj: comonadDisj, 
    showDisj: showDisj, 
    semigroupDisj: semigroupDisj, 
    monoidDisj: monoidDisj, 
    semiringDisj: semiringDisj
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid.Dual/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Dual = function (x) {
    return x;
};
var showDual = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Dual (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semigroupDual = function (dictSemigroup) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude["<>"](dictSemigroup)(v1)(v);
        };
    });
};
var runDual = function (v) {
    return v;
};
var monoidDual = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(dictMonoid));
};
var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorDual = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendDual = new Control_Extend.Extend(function () {
    return functorDual;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDual = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordDual = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqDual(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadDual = new Control_Comonad.Comonad(function () {
    return extendDual;
}, runDual);
var applyDual = new Prelude.Apply(function () {
    return functorDual;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindDual = new Prelude.Bind(function () {
    return applyDual;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeDual = new Prelude.Applicative(function () {
    return applyDual;
}, Dual);
var monadDual = new Prelude.Monad(function () {
    return applicativeDual;
}, function () {
    return bindDual;
});
module.exports = {
    Dual: Dual, 
    runDual: runDual, 
    eqDual: eqDual, 
    ordDual: ordDual, 
    functorDual: functorDual, 
    applyDual: applyDual, 
    applicativeDual: applicativeDual, 
    bindDual: bindDual, 
    monadDual: monadDual, 
    extendDual: extendDual, 
    comonadDual: comonadDual, 
    invariantDual: invariantDual, 
    showDual: showDual, 
    semigroupDual: semigroupDual, 
    monoidDual: monoidDual
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid.Endo/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Endo = function (x) {
    return x;
};
var semigroupEndo = new Prelude.Semigroup(function (v) {
    return function (v1) {
        return function ($10) {
            return v(v1($10));
        };
    };
});
var runEndo = function (v) {
    return v;
};
var monoidEndo = new Data_Monoid.Monoid(function () {
    return semigroupEndo;
}, Prelude.id(Prelude.categoryFn));
var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
    return function (ba) {
        return function (v) {
            return function ($11) {
                return ab(v(ba($11)));
            };
        };
    };
});
module.exports = {
    Endo: Endo, 
    runEndo: runEndo, 
    invariantEndo: invariantEndo, 
    semigroupEndo: semigroupEndo, 
    monoidEndo: monoidEndo
};

},{"Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid.Multiplicative/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Monoid = require("Data.Monoid");
var Multiplicative = function (x) {
    return x;
};
var showMultiplicative = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Multiplicative (" + (Prelude.show(dictShow)(v) + ")");
    });
};
var semigroupMultiplicative = function (dictSemiring) {
    return new Prelude.Semigroup(function (v) {
        return function (v1) {
            return Prelude["*"](dictSemiring)(v)(v1);
        };
    });
};
var runMultiplicative = function (v) {
    return v;
};
var monoidMultiplicative = function (dictSemiring) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMultiplicative(dictSemiring);
    }, Prelude.one(dictSemiring));
};
var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
    return function (v) {
        return function (v1) {
            return f(v1);
        };
    };
});
var functorMultiplicative = new Prelude.Functor(function (f) {
    return function (v) {
        return f(v);
    };
});
var extendMultiplicative = new Control_Extend.Extend(function () {
    return functorMultiplicative;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqMultiplicative = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude["=="](dictEq)(v)(v1);
        };
    });
};
var ordMultiplicative = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqMultiplicative(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (v) {
        return function (v1) {
            return Prelude.compare(dictOrd)(v)(v1);
        };
    });
};
var comonadMultiplicative = new Control_Comonad.Comonad(function () {
    return extendMultiplicative;
}, runMultiplicative);
var applyMultiplicative = new Prelude.Apply(function () {
    return functorMultiplicative;
}, function (v) {
    return function (v1) {
        return v(v1);
    };
});
var bindMultiplicative = new Prelude.Bind(function () {
    return applyMultiplicative;
}, function (v) {
    return function (f) {
        return f(v);
    };
});
var applicativeMultiplicative = new Prelude.Applicative(function () {
    return applyMultiplicative;
}, Multiplicative);
var monadMultiplicative = new Prelude.Monad(function () {
    return applicativeMultiplicative;
}, function () {
    return bindMultiplicative;
});
module.exports = {
    Multiplicative: Multiplicative, 
    runMultiplicative: runMultiplicative, 
    eqMultiplicative: eqMultiplicative, 
    ordMultiplicative: ordMultiplicative, 
    functorMultiplicative: functorMultiplicative, 
    applyMultiplicative: applyMultiplicative, 
    applicativeMultiplicative: applicativeMultiplicative, 
    bindMultiplicative: bindMultiplicative, 
    monadMultiplicative: monadMultiplicative, 
    extendMultiplicative: extendMultiplicative, 
    comonadMultiplicative: comonadMultiplicative, 
    invariantMultiplicative: invariantMultiplicative, 
    showMultiplicative: showMultiplicative, 
    semigroupMultiplicative: semigroupMultiplicative, 
    monoidMultiplicative: monoidMultiplicative
};

},{"Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidArray = new Monoid(function () {
    return Prelude.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Prelude.semigroupFn(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(dictMonoid)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidUnit: monoidUnit, 
    monoidFn: monoidFn, 
    monoidString: monoidString, 
    monoidArray: monoidArray
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Traversable/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Data.Traversable

// jshint maxparams: 3

exports.traverseArrayImpl = function () {
  function Cont (fn) {
    this.fn = fn;
  }

  var emptyList = {};

  var ConsCell = function (head, tail) {
    this.head = head;
    this.tail = tail;
  };

  function consList (x) {
    return function (xs) {
      return new ConsCell(x, xs);
    };
  }

  function listToArray (list) {
    var arr = [];
    while (list !== emptyList) {
      arr.push(list.head);
      list = list.tail;
    }
    return arr;
  }

  return function (apply) {
    return function (map) {
      return function (pure) {
        return function (f) {
          var buildFrom = function (x, ys) {
            return apply(map(consList)(f(x)))(ys);
          };

          var go = function (acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last = xs[currentLen - 1];
              return new Cont(function () {
                return go(buildFrom(last, acc), currentLen - 1, xs);
              });
            }
          };

          return function (array) {
            var result = go(pure(emptyList), array.length, array);
            while (result instanceof Cont) {
              result = result.fn();
            }

            return map(listToArray)(result);
          };
        };
      };
    };
  };
}();

},{}],"/Users/gene/Programming/pure_morph/output/Data.Traversable/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Maybe_Last = require("Data.Maybe.Last");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");
var StateL = function (x) {
    return x;
};
var StateR = function (x) {
    return x;
};
var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
    this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableMultiplicative = new Traversable(function () {
    return Data_Foldable.foldableMultiplicative;
}, function () {
    return Data_Monoid_Multiplicative.functorMultiplicative;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (dictApplicative) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ v.constructor.name ]);
    };
}, function (dictApplicative) {
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v(v1.value0));
            };
            throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
});
var traversableDual = new Traversable(function () {
    return Data_Foldable.foldableDual;
}, function () {
    return Data_Monoid_Dual.functorDual;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(v));
        };
    };
});
var traversableDisj = new Traversable(function () {
    return Data_Foldable.foldableDisj;
}, function () {
    return Data_Monoid_Disj.functorDisj;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(f(v));
        };
    };
});
var traversableConj = new Traversable(function () {
    return Data_Foldable.foldableConj;
}, function () {
    return Data_Monoid_Conj.functorConj;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(f(v));
        };
    };
});
var traversableAdditive = new Traversable(function () {
    return Data_Foldable.foldableAdditive;
}, function () {
    return Data_Monoid_Additive.functorAdditive;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(v);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(v));
        };
    };
});
var stateR = function (v) {
    return v;
};
var stateL = function (v) {
    return v;
};
var sequenceDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (tma) {
            return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
        };
    };
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Prelude.functorArray;
}, function (dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
}, function (dictApplicative) {
    return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
});
var sequence = function (dict) {
    return dict.sequence;
};
var traversableFirst = new Traversable(function () {
    return Data_Foldable.foldableFirst;
}, function () {
    return Data_Maybe_First.functorFirst;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traversableLast = new Traversable(function () {
    return Data_Foldable.foldableLast;
}, function () {
    return Data_Maybe_Last.functorLast;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
        };
    };
});
var traverseDefault = function (dictTraversable) {
    return function (dictApplicative) {
        return function (f) {
            return function (ta) {
                return sequence(dictTraversable)(dictApplicative)(Prelude.map(dictTraversable["__superclass_Prelude.Functor_0"]())(f)(ta));
            };
        };
    };
};
var functorStateR = new Prelude.Functor(function (f) {
    return function (k) {
        return function (s) {
            var $75 = stateR(k)(s);
            return {
                accum: $75.accum, 
                value: f($75.value)
            };
        };
    };
});
var functorStateL = new Prelude.Functor(function (f) {
    return function (k) {
        return function (s) {
            var $78 = stateL(k)(s);
            return {
                accum: $78.accum, 
                value: f($78.value)
            };
        };
    };
});
var $$for = function (dictApplicative) {
    return function (dictTraversable) {
        return function (x) {
            return function (f) {
                return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
        };
    };
};
var applyStateR = new Prelude.Apply(function () {
    return functorStateR;
}, function (f) {
    return function (x) {
        return function (s) {
            var $81 = stateR(x)(s);
            var $82 = stateR(f)($81.accum);
            return {
                accum: $82.accum, 
                value: $82.value($81.value)
            };
        };
    };
});
var applyStateL = new Prelude.Apply(function () {
    return functorStateL;
}, function (f) {
    return function (x) {
        return function (s) {
            var $87 = stateL(f)(s);
            var $88 = stateL(x)($87.accum);
            return {
                accum: $88.accum, 
                value: $87.value($88.value)
            };
        };
    };
});
var applicativeStateR = new Prelude.Applicative(function () {
    return applyStateR;
}, function (a) {
    return function (s) {
        return {
            accum: s, 
            value: a
        };
    };
});
var mapAccumR = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanr = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumR(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(a)(b);
                        return {
                            accum: b$prime, 
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
var applicativeStateL = new Prelude.Applicative(function () {
    return applyStateL;
}, function (a) {
    return function (s) {
        return {
            accum: s, 
            value: a
        };
    };
});
var mapAccumL = function (dictTraversable) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                    return function (s) {
                        return f(s)(a);
                    };
                })(xs))(s0);
            };
        };
    };
};
var scanl = function (dictTraversable) {
    return function (f) {
        return function (b0) {
            return function (xs) {
                return (mapAccumL(dictTraversable)(function (b) {
                    return function (a) {
                        var b$prime = f(b)(a);
                        return {
                            accum: b$prime, 
                            value: b$prime
                        };
                    };
                })(b0)(xs)).value;
            };
        };
    };
};
module.exports = {
    Traversable: Traversable, 
    mapAccumR: mapAccumR, 
    mapAccumL: mapAccumL, 
    scanr: scanr, 
    scanl: scanl, 
    "for": $$for, 
    sequenceDefault: sequenceDefault, 
    traverseDefault: traverseDefault, 
    sequence: sequence, 
    traverse: traverse, 
    traversableArray: traversableArray, 
    traversableMaybe: traversableMaybe, 
    traversableFirst: traversableFirst, 
    traversableLast: traversableLast, 
    traversableAdditive: traversableAdditive, 
    traversableDual: traversableDual, 
    traversableConj: traversableConj, 
    traversableDisj: traversableDisj, 
    traversableMultiplicative: traversableMultiplicative
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.Traversable/foreign.js","Data.Foldable":"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Maybe.First":"/Users/gene/Programming/pure_morph/output/Data.Maybe.First/index.js","Data.Maybe.Last":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Last/index.js","Data.Monoid.Additive":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Additive/index.js","Data.Monoid.Conj":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Conj/index.js","Data.Monoid.Disj":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Disj/index.js","Data.Monoid.Dual":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Dual/index.js","Data.Monoid.Multiplicative":"/Users/gene/Programming/pure_morph/output/Data.Monoid.Multiplicative/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Tuple/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Control_Biapplicative = require("Control.Biapplicative");
var Control_Biapply = require("Control.Biapply");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Control_Lazy = require("Control.Lazy");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Foldable = require("Data.Foldable");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();
var uncurry = function (f) {
    return function (v) {
        return f(v.value0)(v.value1);
    };
};
var swap = function (v) {
    return new Tuple(v.value1, v.value0);
};
var snd = function (v) {
    return v.value1;
};
var showTuple = function (dictShow) {
    return function (dictShow1) {
        return new Prelude.Show(function (v) {
            return "Tuple (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(dictShow1)(v.value1) + ")")));
        });
    };
};
var semiringTuple = function (dictSemiring) {
    return function (dictSemiring1) {
        return new Prelude.Semiring(function (v) {
            return function (v1) {
                return new Tuple(Prelude.add(dictSemiring)(v.value0)(v1.value0), Prelude.add(dictSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.mul(dictSemiring)(v.value0)(v1.value0), Prelude.mul(dictSemiring1)(v.value1)(v1.value1));
            };
        }, new Tuple(Prelude.one(dictSemiring), Prelude.one(dictSemiring1)), new Tuple(Prelude.zero(dictSemiring), Prelude.zero(dictSemiring1)));
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (v) {
    return function (v1) {
        return new Tuple(v1.value0, v.value1);
    };
});
var semigroupTuple = function (dictSemigroup) {
    return function (dictSemigroup1) {
        return new Prelude.Semigroup(function (v) {
            return function (v1) {
                return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), Prelude["<>"](dictSemigroup1)(v.value1)(v1.value1));
            };
        });
    };
};
var ringTuple = function (dictRing) {
    return function (dictRing1) {
        return new Prelude.Ring(function () {
            return semiringTuple(dictRing["__superclass_Prelude.Semiring_0"]())(dictRing1["__superclass_Prelude.Semiring_0"]());
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.sub(dictRing)(v.value0)(v1.value0), Prelude.sub(dictRing1)(v.value1)(v1.value1));
            };
        });
    };
};
var monoidTuple = function (dictMonoid) {
    return function (dictMonoid1) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonoid1["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
    };
};
var moduloSemiringTuple = function (dictModuloSemiring) {
    return function (dictModuloSemiring1) {
        return new Prelude.ModuloSemiring(function () {
            return semiringTuple(dictModuloSemiring["__superclass_Prelude.Semiring_0"]())(dictModuloSemiring1["__superclass_Prelude.Semiring_0"]());
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.div(dictModuloSemiring)(v.value0)(v1.value0), Prelude.div(dictModuloSemiring1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.mod(dictModuloSemiring)(v.value0)(v1.value0), Prelude.mod(dictModuloSemiring1)(v.value1)(v1.value1));
            };
        });
    };
};
var lookup = function (dictFoldable) {
    return function (dictEq) {
        return function (a) {
            return function (f) {
                return Data_Maybe_First.runFirst(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                    var $145 = Prelude["=="](dictEq)(a)(v.value0);
                    if ($145) {
                        return new Data_Maybe.Just(v.value1);
                    };
                    if (!$145) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Data.Tuple line 173, column 1 - line 174, column 1: " + [ $145.constructor.name ]);
                })(f));
            };
        };
    };
};
var functorTuple = new Prelude.Functor(function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v.value1));
    };
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
var fst = function (v) {
    return v.value0;
};
var lazyTuple = function (dictLazy) {
    return function (dictLazy1) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(dictLazy1)(function (v) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (v) {
            return f(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(z)(v.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return f(v.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (v) {
            return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(f(v.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (v) {
        return new Tuple(v.value0, f(v));
    };
});
var eqTuple = function (dictEq) {
    return function (dictEq1) {
        return new Prelude.Eq(function (v) {
            return function (v1) {
                return Prelude["=="](dictEq)(v.value0)(v1.value0) && Prelude["=="](dictEq1)(v.value1)(v1.value1);
            };
        });
    };
};
var ordTuple = function (dictOrd) {
    return function (dictOrd1) {
        return new Prelude.Ord(function () {
            return eqTuple(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
        }, function (v) {
            return function (v1) {
                var $190 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                if ($190 instanceof Prelude.EQ) {
                    return Prelude.compare(dictOrd1)(v.value1)(v1.value1);
                };
                return $190;
            };
        });
    };
};
var divisionRingTuple = function (dictDivisionRing) {
    return function (dictDivisionRing1) {
        return new Prelude.DivisionRing(function () {
            return moduloSemiringTuple(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]())(dictDivisionRing1["__superclass_Prelude.ModuloSemiring_1"]());
        }, function () {
            return ringTuple(dictDivisionRing["__superclass_Prelude.Ring_0"]())(dictDivisionRing1["__superclass_Prelude.Ring_0"]());
        });
    };
};
var numTuple = function (dictNum) {
    return function (dictNum1) {
        return new Prelude.Num(function () {
            return divisionRingTuple(dictNum["__superclass_Prelude.DivisionRing_0"]())(dictNum1["__superclass_Prelude.DivisionRing_0"]());
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var boundedTuple = function (dictBounded) {
    return function (dictBounded1) {
        return new Prelude.Bounded(new Tuple(Prelude.bottom(dictBounded), Prelude.bottom(dictBounded1)), new Tuple(Prelude.top(dictBounded), Prelude.top(dictBounded1)));
    };
};
var boundedOrdTuple = function (dictBoundedOrd) {
    return function (dictBoundedOrd1) {
        return new Prelude.BoundedOrd(function () {
            return boundedTuple(dictBoundedOrd["__superclass_Prelude.Bounded_0"]())(dictBoundedOrd1["__superclass_Prelude.Bounded_0"]());
        }, function () {
            return ordTuple(dictBoundedOrd["__superclass_Prelude.Ord_1"]())(dictBoundedOrd1["__superclass_Prelude.Ord_1"]());
        });
    };
};
var booleanAlgebraTuple = function (dictBooleanAlgebra) {
    return function (dictBooleanAlgebra1) {
        return new Prelude.BooleanAlgebra(function () {
            return boundedTuple(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]())(dictBooleanAlgebra1["__superclass_Prelude.Bounded_0"]());
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.conj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.conj(dictBooleanAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return function (v1) {
                return new Tuple(Prelude.disj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.disj(dictBooleanAlgebra1)(v.value1)(v1.value1));
            };
        }, function (v) {
            return new Tuple(Prelude.not(dictBooleanAlgebra)(v.value0), Prelude.not(dictBooleanAlgebra1)(v.value1));
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Tuple(f(v.value0), g(v.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(g(v.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return g(f(z)(v.value0))(v.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (v) {
                return f(v.value0)(g(v.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (dictApplicative) {
    return function (v) {
        return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
    };
}, function (dictApplicative) {
    return function (f) {
        return function (g) {
            return function (v) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (v) {
    return function (v1) {
        return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);
var applyTuple = function (dictSemigroup) {
    return new Prelude.Apply(function () {
        return functorTuple;
    }, function (v) {
        return function (v1) {
            return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
        };
    });
};
var bindTuple = function (dictSemigroup) {
    return new Prelude.Bind(function () {
        return applyTuple(dictSemigroup);
    }, function (v) {
        return function (f) {
            var $254 = f(v.value1);
            return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)($254.value0), $254.value1);
        };
    });
};
var applicativeTuple = function (dictMonoid) {
    return new Prelude.Applicative(function () {
        return applyTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
};
var monadTuple = function (dictMonoid) {
    return new Prelude.Monad(function () {
        return applicativeTuple(dictMonoid);
    }, function () {
        return bindTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    lookup: lookup, 
    swap: swap, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    boundedTuple: boundedTuple, 
    boundedOrdTuple: boundedOrdTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    semiringTuple: semiringTuple, 
    moduloSemiringTuple: moduloSemiringTuple, 
    ringTuple: ringTuple, 
    divisionRingTuple: divisionRingTuple, 
    numTuple: numTuple, 
    booleanAlgebraTuple: booleanAlgebraTuple, 
    functorTuple: functorTuple, 
    invariantTuple: invariantTuple, 
    bifunctorTuple: bifunctorTuple, 
    applyTuple: applyTuple, 
    biapplyTuple: biapplyTuple, 
    applicativeTuple: applicativeTuple, 
    biapplicativeTuple: biapplicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    foldableTuple: foldableTuple, 
    bifoldableTuple: bifoldableTuple, 
    traversableTuple: traversableTuple, 
    bitraversableTuple: bitraversableTuple
};

},{"Control.Biapplicative":"/Users/gene/Programming/pure_morph/output/Control.Biapplicative/index.js","Control.Biapply":"/Users/gene/Programming/pure_morph/output/Control.Biapply/index.js","Control.Comonad":"/Users/gene/Programming/pure_morph/output/Control.Comonad/index.js","Control.Extend":"/Users/gene/Programming/pure_morph/output/Control.Extend/index.js","Control.Lazy":"/Users/gene/Programming/pure_morph/output/Control.Lazy/index.js","Data.Bifoldable":"/Users/gene/Programming/pure_morph/output/Data.Bifoldable/index.js","Data.Bifunctor":"/Users/gene/Programming/pure_morph/output/Data.Bifunctor/index.js","Data.Bitraversable":"/Users/gene/Programming/pure_morph/output/Data.Bitraversable/index.js","Data.Foldable":"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js","Data.Functor.Invariant":"/Users/gene/Programming/pure_morph/output/Data.Functor.Invariant/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.Maybe.First":"/Users/gene/Programming/pure_morph/output/Data.Maybe.First/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Data.Traversable":"/Users/gene/Programming/pure_morph/output/Data.Traversable/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.TypeNat/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Type_Proxy = require("Type.Proxy");
var Sized = function (sized) {
    this.sized = sized;
};
var sz = new Sized(function (v) {
    return 0;
});
var sized = function (dict) {
    return dict.sized;
};
var s4 = new Sized(function (v) {
    return 4;
});
var s3 = new Sized(function (v) {
    return 3;
});
var s2 = new Sized(function (v) {
    return 2;
});
var s1 = new Sized(function (v) {
    return 1;
});
module.exports = {
    Sized: Sized, 
    sized: sized, 
    sz: sz, 
    s1: s1, 
    s2: s2, 
    s3: s3, 
    s4: s4
};

},{"Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js","Type.Proxy":"/Users/gene/Programming/pure_morph/output/Type.Proxy/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.TypedArray/foreign.js":[function(require,module,exports){
/* global exports */

// module Data.TypedArray


    "use strict";

    // conversion from and to typed arrays
    exports.asInt8Array = function(array)
        {var res = new Int8Array(array);
         return res;};

    exports.asUint8Array = function (array)
        {var res = new Uint8Array(array);
         return res;};

    exports.asUint8ClampedArray = function (array)
        {var res = new Uint8ClampedArray(array);
         return res;};

    exports.asInt16Array = function (array)
        {var res = new Int16Array (array);
         return res;};

    exports.asUint16Array = function (array)
        {var res = new Uint16Array (array);
         return res;};

    exports.asInt32Array = function (array)
        {var res = new Int32Array (array);
         return res;};

    exports.asUint32Array = function (array)
        {var res = new Uint32Array (array);
         return res;};

    exports.asFloat32Array = function (array)
        {var res = new Float32Array (array);
         return res;};

    exports.asFloat64Array = function (array)
        {var res = new Float64Array (array);
         return res;};

    exports.asArray = function (arrayBuffer)
        {var res = Array.prototype.slice.call(arrayBuffer);
         return res;};

    exports.length = function (arrayBuffer)
        {return arrayBuffer.length;};

    exports.byteLength = function (arrayBuffer)
        {return arrayBuffer.byteLength;};

    exports.insertAt = function (index) {
        return function (a) {
          return function (l) {
            var l1 = l.slice();
            l1.splice(index, 0, a);
            return l1;
          };
        };
    };

    exports.unsafeIndex = function (xs) {
        return function(n) {
          return xs[n];
        };
    };

},{}],"/Users/gene/Programming/pure_morph/output/Data.TypedArray/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Data_ArrayBuffer_Types = require("Data.ArrayBuffer.Types");
var Data_Maybe = require("Data.Maybe");
var Prelude = require("Prelude");
var $bang$bang = function (xs) {
    return function (n) {
        var $0 = n < 0 || n >= $foreign.length(xs);
        if ($0) {
            return Data_Maybe.Nothing.value;
        };
        if (!$0) {
            return new Data_Maybe.Just($foreign.unsafeIndex(xs)(n));
        };
        throw new Error("Failed pattern match at Data.TypedArray line 51, column 1 - line 52, column 1: " + [ $0.constructor.name ]);
    };
};
module.exports = {
    "!!": $bang$bang, 
    unsafeIndex: $foreign.unsafeIndex, 
    insertAt: $foreign.insertAt, 
    byteLength: $foreign.byteLength, 
    length: $foreign.length, 
    asArray: $foreign.asArray, 
    asFloat64Array: $foreign.asFloat64Array, 
    asFloat32Array: $foreign.asFloat32Array, 
    asUint32Array: $foreign.asUint32Array, 
    asInt32Array: $foreign.asInt32Array, 
    asUint16Array: $foreign.asUint16Array, 
    asInt16Array: $foreign.asInt16Array, 
    asUint8ClampedArray: $foreign.asUint8ClampedArray, 
    asUint8Array: $foreign.asUint8Array, 
    asInt8Array: $foreign.asInt8Array
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Data.TypedArray/foreign.js","Data.ArrayBuffer.Types":"/Users/gene/Programming/pure_morph/output/Data.ArrayBuffer.Types/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Vector/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Monoid = require("Data.Monoid");
var Data_Foldable = require("Data.Foldable");
var Data_TypeNat = require("Data.TypeNat");
var Control_Apply = require("Control.Apply");
var $$Math = require("Math");
var Type_Proxy = require("Type.Proxy");
var Extensions = require("Extensions");
var Vec = function (x) {
    return x;
};
var toArray = function (v) {
    return v;
};
var showVec = function (dictShow) {
    return new Prelude.Show(function (v) {
        return "Vec " + Prelude.show(Prelude.showArray(dictShow))(v);
    });
};
var functorVec = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude.map(Prelude.functorArray)(f)(v);
    };
});
var scale = function (dictNum) {
    return function (s) {
        return function (v) {
            return Prelude["<$>"](functorVec)(function (e) {
                return Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(e)(s);
            })(v);
        };
    };
};
var vNegate = function (dictNum) {
    return function (v) {
        return Prelude["<$>"](functorVec)(Prelude.negate((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]()))(v);
    };
};
var fromArray = function (dictSized) {
    return function (l) {
        var $25 = Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value);
        if ($25 === Data_Array.length(l)) {
            return l;
        };
        if (Prelude.otherwise) {
            return Extensions.fail("Vector>>fromArray: wrong array length!");
        };
        throw new Error("Failed pattern match at Data.Vector line 32, column 1 - line 33, column 1: " + [ $25.constructor.name ]);
    };
};
var foldableVector = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (xs) {
            return Data_Foldable.foldr(foldableVector)(function (x) {
                return function (acc) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(dictMonoid))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(z)(v);
        };
    };
}, function (f) {
    return function (z) {
        return function (v) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(v);
        };
    };
});
var vlengthSquared = function (v) {
    return Data_Foldable.foldl(foldableVector)(Prelude["+"](Prelude.semiringNumber))(0.0)(Prelude["<$>"](functorVec)(function (e) {
        return e * e;
    })(v));
};
var vlength = function ($36) {
    return $$Math.sqrt(vlengthSquared($36));
};
var normalize = function (v) {
    var im = 1.0 / vlength(v);
    return Prelude["<$>"](functorVec)(function (e) {
        return e * im;
    })(v);
};
var fill = function (dictNum) {
    return function (dictSized) {
        return function (a) {
            return Data_Array.replicate(Data_TypeNat.sized(dictSized)((Type_Proxy["Proxy"]).value))(a);
        };
    };
};
var eqVec = function (dictEq) {
    return new Prelude.Eq(function (v) {
        return function (v1) {
            return Prelude.eq(Prelude.eqArray(dictEq))(v)(v1);
        };
    });
};
var applyVec = new Prelude.Apply(function () {
    return functorVec;
}, function (v) {
    return function (v1) {
        return Data_Array.zipWith(function (f$prime) {
            return function (a$prime) {
                return f$prime(a$prime);
            };
        })(v)(v1);
    };
});
var vAdd = function (dictNum) {
    return Control_Apply.lift2(applyVec)(Prelude["+"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]()));
};
var vMul = function (dictNum) {
    return Control_Apply.lift2(applyVec)(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]()));
};
var dot = function (v1) {
    return function (v2) {
        return Data_Foldable.foldl(foldableVector)(Prelude["+"](Prelude.semiringNumber))(0.0)(vMul(Prelude.numNumber)(v1)(v2));
    };
};
var semiringVector = function (dictSized) {
    return new Prelude.Semiring(vAdd(Prelude.numNumber), vMul(Prelude.numNumber), fill(Prelude.numNumber)(dictSized)(1.0), fill(Prelude.numNumber)(dictSized)(0.0));
};
var vSub = function (dictNum) {
    return Control_Apply.lift2(applyVec)(Prelude["-"]((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]()));
};
var direction = function (v1) {
    return function (v2) {
        return normalize(vSub(Prelude.numNumber)(v1)(v2));
    };
};
var distanceSquared = function (v1) {
    return function (v2) {
        return Data_Foldable.foldl(foldableVector)(Prelude["+"](Prelude.semiringNumber))(0.0)(Prelude["<$>"](functorVec)(function (e) {
            return e * e;
        })(vSub(Prelude.numNumber)(v1)(v2)));
    };
};
var distance = function (v1) {
    return function (v2) {
        return $$Math.sqrt(distanceSquared(v1)(v2));
    };
};
module.exports = {
    Vec: Vec, 
    dot: dot, 
    scale: scale, 
    distance: distance, 
    distanceSquared: distanceSquared, 
    normalize: normalize, 
    vlength: vlength, 
    vlengthSquared: vlengthSquared, 
    direction: direction, 
    vNegate: vNegate, 
    vMul: vMul, 
    vSub: vSub, 
    vAdd: vAdd, 
    toArray: toArray, 
    fromArray: fromArray, 
    fill: fill, 
    eqVec: eqVec, 
    showVec: showVec, 
    functorVec: functorVec, 
    applyVec: applyVec, 
    foldableVector: foldableVector, 
    semiringVector: semiringVector
};

},{"Control.Apply":"/Users/gene/Programming/pure_morph/output/Control.Apply/index.js","Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Data.Foldable":"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js","Data.Monoid":"/Users/gene/Programming/pure_morph/output/Data.Monoid/index.js","Data.TypeNat":"/Users/gene/Programming/pure_morph/output/Data.TypeNat/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Math":"/Users/gene/Programming/pure_morph/output/Math/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js","Type.Proxy":"/Users/gene/Programming/pure_morph/output/Type.Proxy/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Vector3/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Vector = require("Data.Vector");
var Data_TypeNat = require("Data.TypeNat");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Extensions = require("Extensions");
var vec3$prime = function (array) {
    if (Data_Array.length(array) === 3) {
        return array;
    };
    if (Prelude.otherwise) {
        return Extensions.fail("Vector3>>vec3': wrong array length!");
    };
    throw new Error("Failed pattern match at Data.Vector3 line 31, column 1 - line 32, column 1: " + [ array.constructor.name ]);
};
var vec3 = function (x) {
    return function (y) {
        return function (z) {
            return [ x, y, z ];
        };
    };
};
var set3Z = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(2)(n)(v));
    };
};
var set3Y = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(1)(n)(v));
    };
};
var set3X = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(0)(n)(v));
    };
};
var k3 = [ 0.0, 0.0, 1.0 ];
var j3 = [ 0.0, 1.0, 0.0 ];
var i3 = [ 1.0, 0.0, 0.0 ];
var get3Z = function (v) {
    return v[2];
};
var get3Y = function (v) {
    return v[1];
};
var get3X = function (v) {
    return v[0];
};
var cross = function (dictNum) {
    return function (v) {
        return function (v1) {
            if (v.length === 3 && v1.length === 3) {
                return [ Prelude["-"]((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]())(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(v[1])(v1[2]))(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(v[2])(v1[1])), Prelude["-"]((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]())(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(v[2])(v1[0]))(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(v[0])(v1[2])), Prelude["-"]((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.Ring_0"]())(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(v[0])(v1[1]))(Prelude["*"](((dictNum["__superclass_Prelude.DivisionRing_0"]())["__superclass_Prelude.ModuloSemiring_1"]())["__superclass_Prelude.Semiring_0"]())(v[1])(v1[0])) ];
            };
            return Extensions.fail("Vector3>>cross: impossible!");
        };
    };
};
module.exports = {
    cross: cross, 
    set3Z: set3Z, 
    set3Y: set3Y, 
    set3X: set3X, 
    get3Z: get3Z, 
    get3Y: get3Y, 
    get3X: get3X, 
    k3: k3, 
    j3: j3, 
    i3: i3, 
    "vec3'": vec3$prime, 
    vec3: vec3
};

},{"Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Data.Array.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Array.Unsafe/index.js","Data.Maybe.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/index.js","Data.TypeNat":"/Users/gene/Programming/pure_morph/output/Data.TypeNat/index.js","Data.Vector":"/Users/gene/Programming/pure_morph/output/Data.Vector/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Data.Vector4/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Data_Vector = require("Data.Vector");
var Data_TypeNat = require("Data.TypeNat");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Extensions = require("Extensions");
var vec4$prime = function (array) {
    if (Data_Array.length(array) === 4) {
        return array;
    };
    if (Prelude.otherwise) {
        return Extensions.fail("Vector4>>vec4': wrong array length!");
    };
    throw new Error("Failed pattern match at Data.Vector4 line 30, column 1 - line 31, column 1: " + [ array.constructor.name ]);
};
var vec4 = function (x) {
    return function (y) {
        return function (z) {
            return function (u) {
                return [ x, y, z, u ];
            };
        };
    };
};
var set4Z = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(2)(n)(v));
    };
};
var set4Y = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(1)(n)(v));
    };
};
var set4X = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(0)(n)(v));
    };
};
var set4U = function (n) {
    return function (v) {
        return Data_Maybe_Unsafe.fromJust(Data_Array.insertAt(3)(n)(v));
    };
};
var l4 = [ 0.0, 0.0, 0.0, 1.0 ];
var k4 = [ 0.0, 0.0, 1.0, 0.0 ];
var j4 = [ 0.0, 1.0, 0.0, 0.0 ];
var i4 = [ 1.0, 0.0, 0.0, 0.0 ];
var get4Z = function (v) {
    return v[2];
};
var get4Y = function (v) {
    return v[1];
};
var get4X = function (v) {
    return v[0];
};
var get4U = function (v) {
    return v[3];
};
module.exports = {
    set4U: set4U, 
    set4Z: set4Z, 
    set4Y: set4Y, 
    set4X: set4X, 
    get4U: get4U, 
    get4Z: get4Z, 
    get4Y: get4Y, 
    get4X: get4X, 
    l4: l4, 
    k4: k4, 
    j4: j4, 
    i4: i4, 
    "vec4'": vec4$prime, 
    vec4: vec4
};

},{"Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Data.Array.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Array.Unsafe/index.js","Data.Maybe.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Maybe.Unsafe/index.js","Data.TypeNat":"/Users/gene/Programming/pure_morph/output/Data.TypeNat/index.js","Data.Vector":"/Users/gene/Programming/pure_morph/output/Data.Vector/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Extensions/foreign.js":[function(require,module,exports){
/* global exports */

// module Extensions


    "use strict";

    exports.fail = function(s) {
      throw new Error(s);
    }

    exports.undef = function() {
        throw new Error("Encountered undefined");
    }

    exports.unsafeTrace = function(s) {
        return function (r) {
            console.log(s);
            return r;
        };
    }

    exports.unsafeCoerce = function(x) {
         return x;
    }

    exports.mapE = function(f) {
      return function(arr) {
        return function() {
          var res = new Array(arr.length);
          for (var i = 0; i < arr.length; i++) {
            res[i] = f(arr[i])();
          }
          return res;
        };
      };
   }

    exports.timeout = function(millis) {
        return function(action) {
            return function() {
                setTimeout(action, millis);
            };
        };
    }

  exports.alert = function(msg) {
    return function() {
        window.alert(msg);
        return {};
    };
}

},{}],"/Users/gene/Programming/pure_morph/output/Extensions/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Traversable = require("Data.Traversable");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Array = require("Data.Array");
var $$Math = require("Math");
var $greater$greater = function (dictBind) {
    return function (x) {
        return function (y) {
            return Prelude[">>="](dictBind)(x)(Prelude["const"](y));
        };
    };
};
var signum = function (n) {
    if (n > 0) {
        return 1;
    };
    if (n < 0) {
        return -1;
    };
    if (Prelude.otherwise) {
        return 0;
    };
    throw new Error("Failed pattern match at Extensions line 32, column 1 - line 33, column 1: " + [ n.constructor.name ]);
};
var modInt = function (n) {
    return function (d) {
        var r = n % d;
        var $3 = signum(r) === -signum(d);
        if ($3) {
            return r + d | 0;
        };
        if (!$3) {
            return r;
        };
        throw new Error("Failed pattern match at Extensions line 28, column 1 - line 29, column 1: " + [ $3.constructor.name ]);
    };
};
var modFloat = function (n) {
    return function (d) {
        return n - $$Math.floor(n / d) * d;
    };
};
var mapM = function (dictMonad) {
    return function (f) {
        return function (array) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.map(Prelude.functorArray)(f)(array));
        };
    };
};
var hRange = function (a) {
    return function (b) {
        var $4 = a > b;
        if ($4) {
            return [  ];
        };
        if (!$4) {
            return Data_Array.range(a)(b);
        };
        throw new Error("Failed pattern match at Extensions line 24, column 1 - line 25, column 1: " + [ $4.constructor.name ]);
    };
};
module.exports = {
    mapM: mapM, 
    modFloat: modFloat, 
    signum: signum, 
    modInt: modInt, 
    hRange: hRange, 
    ">>": $greater$greater, 
    alert: $foreign.alert, 
    mapE: $foreign.mapE, 
    unsafeCoerce: $foreign.unsafeCoerce, 
    undef: $foreign.undef, 
    fail: $foreign.fail, 
    timeout: $foreign.timeout
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Extensions/foreign.js","Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Data.Traversable":"/Users/gene/Programming/pure_morph/output/Data.Traversable/index.js","Math":"/Users/gene/Programming/pure_morph/output/Math/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGL/foreign.js":[function(require,module,exports){
/* global exports */

// module Graphics.WebGL

    "use strict";

    exports.shaderBindings_ = function (program) {
          return function() {
            var bindings = {};
            var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
            for (var i = 0; i < numUniforms; i += 1) {
                var uniform = gl.getActiveUniform(program, i);
                var uniformLocation = gl.getUniformLocation(program, uniform.name);
                var newUniform = {};
                newUniform.uLocation=uniformLocation;
                newUniform.uName=uniform.name;
                newUniform.uType=uniform.type;
                bindings[uniform.name]=newUniform;
              }
            var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
            for (var i2 = 0; i2 < numAttributes; i2 += 1) {
                var attribute = gl.getActiveAttrib(program, i2);
                var attribLocation = gl.getAttribLocation(program, attribute.name);
                gl.enableVertexAttribArray(attribLocation);
                var newAttr = {};
                newAttr.aLocation=attribLocation;
                newAttr.aName=attribute.name;
                newAttr.aItemType=attribute.type;
                switch (attribute.type) {
                  case gl.FLOAT_VEC2:
                    newAttr.aItemSize=2;
                    break;
                  case gl.FLOAT_VEC3:
                    newAttr.aItemSize=3;
                    break;
                  case gl.FLOAT_VEC4:
                    newAttr.aItemSize=4;
                    break;
                  default:
                    LOG("Unsupported attribute type: " + attribute.type);
                    newAttr.aItemSize=1;
                    break;
                }
                bindings[attribute.name]=newAttr;
            }
            return bindings;
        };};


    exports.initGL_ = function (canvasId, attr) {
            return function() {
              var canvas = document.getElementById(canvasId);
              try {
                gl = canvas.getContext("webgl", attr) || canvas.getContext("experimental-webgl", attr);
              }
              catch(e) {return false;}
              if (!gl)
              {
                gl = null;
                return false;
              }
              return true;
          };
      };

        exports.getCanvasWidth_ = function(canvasId) {
          return function() {
            var canvas = document.getElementById(canvasId);
            return canvas.width;
            };
        };

        exports.getCanvasHeight_ = function(canvasId) {
          return function() {
            var canvas = document.getElementById(canvasId);
            return canvas.height;
            };
        };

        exports.requestAnimationFrame_ = function(x){
            if (typeof rAF === 'undefined') {
               var rAF = (function(){
                  return  window.requestAnimationFrame       ||
                          window.webkitRequestAnimationFrame ||
                          window.mozRequestAnimationFrame    ||
                          function( callback ){
                            window.setTimeout(callback, 1000 / 60);
                          };
                      })();
            }
            return function(){
              return rAF(x);
            };
        };

      exports.bufferData__ = function(target,data,usage)
         {return function()
          {gl.bufferData(target,data,usage);};};

      exports.bufferSubData__ = function(target,offset,data)
         {return function()
          {gl.bufferSubData(target,offset,data);};};

},{}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGL/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff_WebGL = require("Control.Monad.Eff.WebGL");
var Graphics_WebGLRaw = require("Graphics.WebGLRaw");
var Data_ArrayBuffer_Types = require("Data.ArrayBuffer.Types");
var Data_TypedArray = require("Data.TypedArray");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Array = require("Data.Array");
var Data_Either = require("Data.Either");
var Data_Int_Bits = require("Data.Int.Bits");
var Data_Function = require("Data.Function");
var Extensions = require("Extensions");
var WebGLProg = function (x) {
    return x;
};
var Uniform = function (x) {
    return x;
};
var Shaders = (function () {
    function Shaders(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Shaders.create = function (value0) {
        return function (value1) {
            return new Shaders(value0, value1);
        };
    };
    return Shaders;
})();
var FragmentShader = (function () {
    function FragmentShader() {

    };
    FragmentShader.value = new FragmentShader();
    return FragmentShader;
})();
var VertexShader = (function () {
    function VertexShader() {

    };
    VertexShader.value = new VertexShader();
    return VertexShader;
})();
var POINTS = (function () {
    function POINTS() {

    };
    POINTS.value = new POINTS();
    return POINTS;
})();
var LINES = (function () {
    function LINES() {

    };
    LINES.value = new LINES();
    return LINES;
})();
var LINE_STRIP = (function () {
    function LINE_STRIP() {

    };
    LINE_STRIP.value = new LINE_STRIP();
    return LINE_STRIP;
})();
var LINE_LOOP = (function () {
    function LINE_LOOP() {

    };
    LINE_LOOP.value = new LINE_LOOP();
    return LINE_LOOP;
})();
var TRIANGLES = (function () {
    function TRIANGLES() {

    };
    TRIANGLES.value = new TRIANGLES();
    return TRIANGLES;
})();
var TRIANGLE_STRIP = (function () {
    function TRIANGLE_STRIP() {

    };
    TRIANGLE_STRIP.value = new TRIANGLE_STRIP();
    return TRIANGLE_STRIP;
})();
var TRIANGLE_FAN = (function () {
    function TRIANGLE_FAN() {

    };
    TRIANGLE_FAN.value = new TRIANGLE_FAN();
    return TRIANGLE_FAN;
})();
var DEPTH_BUFFER_BIT = (function () {
    function DEPTH_BUFFER_BIT() {

    };
    DEPTH_BUFFER_BIT.value = new DEPTH_BUFFER_BIT();
    return DEPTH_BUFFER_BIT;
})();
var STENCIL_BUFFER_BIT = (function () {
    function STENCIL_BUFFER_BIT() {

    };
    STENCIL_BUFFER_BIT.value = new STENCIL_BUFFER_BIT();
    return STENCIL_BUFFER_BIT;
})();
var COLOR_BUFFER_BIT = (function () {
    function COLOR_BUFFER_BIT() {

    };
    COLOR_BUFFER_BIT.value = new COLOR_BUFFER_BIT();
    return COLOR_BUFFER_BIT;
})();
var NEVER = (function () {
    function NEVER() {

    };
    NEVER.value = new NEVER();
    return NEVER;
})();
var ALWAYS = (function () {
    function ALWAYS() {

    };
    ALWAYS.value = new ALWAYS();
    return ALWAYS;
})();
var LESS = (function () {
    function LESS() {

    };
    LESS.value = new LESS();
    return LESS;
})();
var EQUAL = (function () {
    function EQUAL() {

    };
    EQUAL.value = new EQUAL();
    return EQUAL;
})();
var LEQUAL = (function () {
    function LEQUAL() {

    };
    LEQUAL.value = new LEQUAL();
    return LEQUAL;
})();
var GREATER = (function () {
    function GREATER() {

    };
    GREATER.value = new GREATER();
    return GREATER;
})();
var GEQUAL = (function () {
    function GEQUAL() {

    };
    GEQUAL.value = new GEQUAL();
    return GEQUAL;
})();
var NOTEQUAL = (function () {
    function NOTEQUAL() {

    };
    NOTEQUAL.value = new NOTEQUAL();
    return NOTEQUAL;
})();
var BLEND = (function () {
    function BLEND() {

    };
    BLEND.value = new BLEND();
    return BLEND;
})();
var DEPTH_TEST = (function () {
    function DEPTH_TEST() {

    };
    DEPTH_TEST.value = new DEPTH_TEST();
    return DEPTH_TEST;
})();
var CULL_FACE = (function () {
    function CULL_FACE() {

    };
    CULL_FACE.value = new CULL_FACE();
    return CULL_FACE;
})();
var POLYGON_OFFSET_FILL = (function () {
    function POLYGON_OFFSET_FILL() {

    };
    POLYGON_OFFSET_FILL.value = new POLYGON_OFFSET_FILL();
    return POLYGON_OFFSET_FILL;
})();
var SCISSOR_TEST = (function () {
    function SCISSOR_TEST() {

    };
    SCISSOR_TEST.value = new SCISSOR_TEST();
    return SCISSOR_TEST;
})();
var ARRAY_BUFFER = (function () {
    function ARRAY_BUFFER() {

    };
    ARRAY_BUFFER.value = new ARRAY_BUFFER();
    return ARRAY_BUFFER;
})();
var ELEMENT_ARRAY_BUFFER = (function () {
    function ELEMENT_ARRAY_BUFFER() {

    };
    ELEMENT_ARRAY_BUFFER.value = new ELEMENT_ARRAY_BUFFER();
    return ELEMENT_ARRAY_BUFFER;
})();
var ZERO = (function () {
    function ZERO() {

    };
    ZERO.value = new ZERO();
    return ZERO;
})();
var ONE = (function () {
    function ONE() {

    };
    ONE.value = new ONE();
    return ONE;
})();
var SRC_COLOR = (function () {
    function SRC_COLOR() {

    };
    SRC_COLOR.value = new SRC_COLOR();
    return SRC_COLOR;
})();
var ONE_MINUS_SRC_COLOR = (function () {
    function ONE_MINUS_SRC_COLOR() {

    };
    ONE_MINUS_SRC_COLOR.value = new ONE_MINUS_SRC_COLOR();
    return ONE_MINUS_SRC_COLOR;
})();
var DST_COLOR = (function () {
    function DST_COLOR() {

    };
    DST_COLOR.value = new DST_COLOR();
    return DST_COLOR;
})();
var ONE_MINUS_DST_COLOR = (function () {
    function ONE_MINUS_DST_COLOR() {

    };
    ONE_MINUS_DST_COLOR.value = new ONE_MINUS_DST_COLOR();
    return ONE_MINUS_DST_COLOR;
})();
var SRC_ALPHA = (function () {
    function SRC_ALPHA() {

    };
    SRC_ALPHA.value = new SRC_ALPHA();
    return SRC_ALPHA;
})();
var ONE_MINUS_SRC_ALPHA = (function () {
    function ONE_MINUS_SRC_ALPHA() {

    };
    ONE_MINUS_SRC_ALPHA.value = new ONE_MINUS_SRC_ALPHA();
    return ONE_MINUS_SRC_ALPHA;
})();
var DST_ALPHA = (function () {
    function DST_ALPHA() {

    };
    DST_ALPHA.value = new DST_ALPHA();
    return DST_ALPHA;
})();
var ONE_MINUS_DST_ALPHA = (function () {
    function ONE_MINUS_DST_ALPHA() {

    };
    ONE_MINUS_DST_ALPHA.value = new ONE_MINUS_DST_ALPHA();
    return ONE_MINUS_DST_ALPHA;
})();
var SRC_ALPHA_SATURATE = (function () {
    function SRC_ALPHA_SATURATE() {

    };
    SRC_ALPHA_SATURATE.value = new SRC_ALPHA_SATURATE();
    return SRC_ALPHA_SATURATE;
})();
var BLEND_DST_RGB = (function () {
    function BLEND_DST_RGB() {

    };
    BLEND_DST_RGB.value = new BLEND_DST_RGB();
    return BLEND_DST_RGB;
})();
var BLEND_SRC_RGB = (function () {
    function BLEND_SRC_RGB() {

    };
    BLEND_SRC_RGB.value = new BLEND_SRC_RGB();
    return BLEND_SRC_RGB;
})();
var BLEND_DST_ALPHA = (function () {
    function BLEND_DST_ALPHA() {

    };
    BLEND_DST_ALPHA.value = new BLEND_DST_ALPHA();
    return BLEND_DST_ALPHA;
})();
var BLEND_SRC_ALPHA = (function () {
    function BLEND_SRC_ALPHA() {

    };
    BLEND_SRC_ALPHA.value = new BLEND_SRC_ALPHA();
    return BLEND_SRC_ALPHA;
})();
var CONSTANT_COLOR = (function () {
    function CONSTANT_COLOR() {

    };
    CONSTANT_COLOR.value = new CONSTANT_COLOR();
    return CONSTANT_COLOR;
})();
var ONE_MINUS_CONSTANT_COLOR = (function () {
    function ONE_MINUS_CONSTANT_COLOR() {

    };
    ONE_MINUS_CONSTANT_COLOR.value = new ONE_MINUS_CONSTANT_COLOR();
    return ONE_MINUS_CONSTANT_COLOR;
})();
var CONSTANT_ALPHA = (function () {
    function CONSTANT_ALPHA() {

    };
    CONSTANT_ALPHA.value = new CONSTANT_ALPHA();
    return CONSTANT_ALPHA;
})();
var ONE_MINUS_CONSTANT_ALPHA = (function () {
    function ONE_MINUS_CONSTANT_ALPHA() {

    };
    ONE_MINUS_CONSTANT_ALPHA.value = new ONE_MINUS_CONSTANT_ALPHA();
    return ONE_MINUS_CONSTANT_ALPHA;
})();
var BLEND_COLOR = (function () {
    function BLEND_COLOR() {

    };
    BLEND_COLOR.value = new BLEND_COLOR();
    return BLEND_COLOR;
})();
var FUNC_ADD = (function () {
    function FUNC_ADD() {

    };
    FUNC_ADD.value = new FUNC_ADD();
    return FUNC_ADD;
})();
var BLEND_EQUATION = (function () {
    function BLEND_EQUATION() {

    };
    BLEND_EQUATION.value = new BLEND_EQUATION();
    return BLEND_EQUATION;
})();
var BLEND_EQUATION_RGB = (function () {
    function BLEND_EQUATION_RGB() {

    };
    BLEND_EQUATION_RGB.value = new BLEND_EQUATION_RGB();
    return BLEND_EQUATION_RGB;
})();
var BLEND_EQUATION_ALPHA = (function () {
    function BLEND_EQUATION_ALPHA() {

    };
    BLEND_EQUATION_ALPHA.value = new BLEND_EQUATION_ALPHA();
    return BLEND_EQUATION_ALPHA;
})();
var FUNC_SUBTRACT = (function () {
    function FUNC_SUBTRACT() {

    };
    FUNC_SUBTRACT.value = new FUNC_SUBTRACT();
    return FUNC_SUBTRACT;
})();
var FUNC_REVERSE_SUBTRACT = (function () {
    function FUNC_REVERSE_SUBTRACT() {

    };
    FUNC_REVERSE_SUBTRACT.value = new FUNC_REVERSE_SUBTRACT();
    return FUNC_REVERSE_SUBTRACT;
})();
var Attribute = function (x) {
    return x;
};
var viewport = Data_Function.runFn4(Graphics_WebGLRaw.viewport_);
var vertexPointer = function (v) {
    return Graphics_WebGLRaw.vertexAttribPointer_(v.aLocation, v.aItemSize, Graphics_WebGLRaw._FLOAT, false, 0, 0);
};
var setUniformBoolean = function (v) {
    return function (value) {
        if (v.uType === Graphics_WebGLRaw._BOOL) {
            var toNumber = function (v1) {
                if (v1) {
                    return 1;
                };
                if (!v1) {
                    return 0;
                };
                throw new Error("Failed pattern match at Graphics.WebGL line 280, column 7 - line 281, column 7: " + [ v1.constructor.name ]);
            };
            return Graphics_WebGLRaw.uniform1i_(v.uLocation, toNumber(value));
        };
        if (Prelude.otherwise) {
            return Extensions.fail("WebGL>>setUniformBoolean: Called for not boolean uniform!");
        };
        throw new Error("Failed pattern match at Graphics.WebGL line 276, column 1 - line 277, column 1: " + [ v.constructor.name, value.constructor.name ]);
    };
};
var runWebGLAttr = function (canvasId) {
    return function (attr) {
        return function (failure) {
            return function (success) {
                var makeContext = {
                    canvasName: canvasId
                };
                return function __do() {
                    var v = $foreign.initGL_(canvasId, attr)();
                    if (v) {
                        return Control_Monad_Eff_WebGL.runWebGl_(success(makeContext))();
                    };
                    if (!v) {
                        return failure("Unable to initialize WebGL. Your browser may not support it.")();
                    };
                    throw new Error("Failed pattern match at Graphics.WebGL line 137, column 1 - line 138, column 1: " + [ v.constructor.name ]);
                };
            };
        };
    };
};
var requestAnimationFrame = Data_Function.runFn1($foreign.requestAnimationFrame_);
var modeToConst = function (v) {
    if (v instanceof POINTS) {
        return Graphics_WebGLRaw._POINTS;
    };
    if (v instanceof LINES) {
        return Graphics_WebGLRaw._LINES;
    };
    if (v instanceof LINE_STRIP) {
        return Graphics_WebGLRaw._LINE_STRIP;
    };
    if (v instanceof LINE_LOOP) {
        return Graphics_WebGLRaw._LINE_LOOP;
    };
    if (v instanceof TRIANGLES) {
        return Graphics_WebGLRaw._TRIANGLES;
    };
    if (v instanceof TRIANGLE_STRIP) {
        return Graphics_WebGLRaw._TRIANGLE_STRIP;
    };
    if (v instanceof TRIANGLE_FAN) {
        return Graphics_WebGLRaw._TRIANGLE_FAN;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 476, column 1 - line 477, column 1: " + [ v.constructor.name ]);
};
var maskToConst = function (v) {
    if (v instanceof DEPTH_BUFFER_BIT) {
        return Graphics_WebGLRaw._DEPTH_BUFFER_BIT;
    };
    if (v instanceof STENCIL_BUFFER_BIT) {
        return Graphics_WebGLRaw._STENCIL_BUFFER_BIT;
    };
    if (v instanceof COLOR_BUFFER_BIT) {
        return Graphics_WebGLRaw._COLOR_BUFFER_BIT;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 455, column 1 - line 456, column 1: " + [ v.constructor.name ]);
};
var makeShader = function (shaderType) {
    return function (shaderSrc) {
        var shaderTypeConst = (function () {
            if (shaderType instanceof FragmentShader) {
                return Graphics_WebGLRaw._FRAGMENT_SHADER;
            };
            if (shaderType instanceof VertexShader) {
                return Graphics_WebGLRaw._VERTEX_SHADER;
            };
            throw new Error("Failed pattern match at Graphics.WebGL line 399, column 7 - line 402, column 3: " + [ shaderType.constructor.name ]);
        })();
        return function __do() {
            var v = Graphics_WebGLRaw.createShader_(shaderTypeConst)();
            Graphics_WebGLRaw.shaderSource_(v, shaderSrc)();
            Graphics_WebGLRaw.compileShader_(v)();
            var v1 = Graphics_WebGLRaw.getShaderParameter_(v, Graphics_WebGLRaw._COMPILE_STATUS)();
            if (v1) {
                return new Data_Either.Left(v);
            };
            if (!v1) {
                var v2 = Graphics_WebGLRaw.getShaderInfoLog_(v)();
                return new Data_Either.Right(v2);
            };
            throw new Error("Failed pattern match at Graphics.WebGL line 397, column 1 - line 398, column 1: " + [ v1.constructor.name ]);
        };
    };
};
var makeBufferFloat$prime = function (vertices) {
    return function (flag) {
        return function __do() {
            var v = Graphics_WebGLRaw.createBuffer_()();
            Graphics_WebGLRaw.bindBuffer_(Graphics_WebGLRaw._ARRAY_BUFFER, v)();
            var typedArray = Data_TypedArray.asFloat32Array(vertices);
            $foreign.bufferData__(Graphics_WebGLRaw._ARRAY_BUFFER, typedArray, flag)();
            return {
                webGLBuffer: v, 
                bufferType: Graphics_WebGLRaw._ARRAY_BUFFER, 
                bufferSize: Data_Array.length(vertices)
            };
        };
    };
};
var makeBufferFloatDyn = function (vertices) {
    return makeBufferFloat$prime(vertices)(Graphics_WebGLRaw._DYNAMIC_DRAW);
};
var makeBufferFloat = function (vertices) {
    return makeBufferFloat$prime(vertices)(Graphics_WebGLRaw._STATIC_DRAW);
};
var isContextLost = Graphics_WebGLRaw.isContextLost_();
var initShaders = function (fragmentShader) {
    return function (vertexShader) {
        return function __do() {
            var v = Graphics_WebGLRaw.createProgram_()();
            Graphics_WebGLRaw.attachShader_(v, vertexShader)();
            Graphics_WebGLRaw.attachShader_(v, fragmentShader)();
            Graphics_WebGLRaw.linkProgram_(v)();
            var v1 = Graphics_WebGLRaw.getProgramParameter_(v, Graphics_WebGLRaw._LINK_STATUS)();
            if (v1) {
                Graphics_WebGLRaw.useProgram_(v)();
                return new Data_Maybe.Just(v);
            };
            if (!v1) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Graphics.WebGL line 412, column 1 - line 413, column 1: " + [ v1.constructor.name ]);
        };
    };
};
var withShaders = function (v) {
    return function (failure) {
        return function (success) {
            return function __do() {
                var v1 = makeShader(FragmentShader.value)(v.value0)();
                if (v1 instanceof Data_Either.Right) {
                    return failure("Can't compile fragment shader: " + v1.value0)();
                };
                if (v1 instanceof Data_Either.Left) {
                    var v2 = makeShader(VertexShader.value)(v.value1)();
                    if (v2 instanceof Data_Either.Right) {
                        return failure("Can't compile vertex shader: " + v2.value0)();
                    };
                    if (v2 instanceof Data_Either.Left) {
                        var v3 = initShaders(v1.value0)(v2.value0)();
                        if (v3 instanceof Data_Maybe.Nothing) {
                            return failure("Can't init shaders")();
                        };
                        if (v3 instanceof Data_Maybe.Just) {
                            var v4 = $foreign.shaderBindings_(v3.value0)();
                            return success((function () {
                                var $60 = {};
                                for (var $61 in v4) {
                                    if (v4.hasOwnProperty($61)) {
                                        $60[$61] = v4[$61];
                                    };
                                };
                                $60.webGLProgram = v3.value0;
                                return $60;
                            })())();
                        };
                        throw new Error("Failed pattern match at Graphics.WebGL line 190, column 1 - line 192, column 1: " + [ v3.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Graphics.WebGL line 190, column 1 - line 192, column 1: " + [ v2.constructor.name ]);
                };
                throw new Error("Failed pattern match at Graphics.WebGL line 190, column 1 - line 192, column 1: " + [ v1.constructor.name ]);
            };
        };
    };
};
var getCanvasWidth = function (context) {
    return $foreign.getCanvasWidth_(context.canvasName);
};
var getCanvasHeight = function (context) {
    return $foreign.getCanvasHeight_(context.canvasName);
};
var funcToConst = function (v) {
    if (v instanceof NEVER) {
        return Graphics_WebGLRaw._NEVER;
    };
    if (v instanceof ALWAYS) {
        return Graphics_WebGLRaw._ALWAYS;
    };
    if (v instanceof LESS) {
        return Graphics_WebGLRaw._LESS;
    };
    if (v instanceof EQUAL) {
        return Graphics_WebGLRaw._EQUAL;
    };
    if (v instanceof LEQUAL) {
        return Graphics_WebGLRaw._LEQUAL;
    };
    if (v instanceof GREATER) {
        return Graphics_WebGLRaw._GREATER;
    };
    if (v instanceof GEQUAL) {
        return Graphics_WebGLRaw._GEQUAL;
    };
    if (v instanceof NOTEQUAL) {
        return Graphics_WebGLRaw._NOTEQUAL;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 335, column 1 - line 336, column 1: " + [ v.constructor.name ]);
};
var fillBuffer = function (buffer) {
    return function (offset) {
        return function (vertices) {
            return function __do() {
                Graphics_WebGLRaw.bindBuffer_(buffer.bufferType, buffer.webGLBuffer)();
                var typedArray = Data_TypedArray.asFloat32Array(vertices);
                Graphics_WebGLRaw.bufferSubData_(buffer.bufferType, offset, typedArray)();
                return Prelude.unit;
            };
        };
    };
};
var enableVertexAttribArray = function (v) {
    return Graphics_WebGLRaw.enableVertexAttribArray_(v.aLocation);
};
var drawElements = function (mode) {
    return function (count) {
        return Graphics_WebGLRaw.drawElements_(modeToConst(mode), count, Graphics_WebGLRaw._UNSIGNED_SHORT, 0);
    };
};
var disableVertexAttribArray = function (v) {
    return Graphics_WebGLRaw.disableVertexAttribArray_(v.aLocation);
};
var depthFunc = function ($82) {
    return Graphics_WebGLRaw.depthFunc_(funcToConst($82));
};
var defContextAttributes = {
    alpha: true, 
    depth: true, 
    stencil: false, 
    antialias: true, 
    premultipliedAlpha: true, 
    preserveDrawingBuffer: false, 
    preferLowPowerToHighPerformance: false, 
    failIfMajorPerformanceCaveat: false
};
var runWebGL = function (canvasId) {
    return function (failure) {
        return function (success) {
            var makeContext = {
                canvasName: canvasId
            };
            return function __do() {
                var v = $foreign.initGL_(canvasId, defContextAttributes)();
                if (v) {
                    return Control_Monad_Eff_WebGL.runWebGl_(success(makeContext))();
                };
                if (!v) {
                    return failure("Unable to initialize WebGL. Your browser may not support it.")();
                };
                throw new Error("Failed pattern match at Graphics.WebGL line 149, column 1 - line 150, column 1: " + [ v.constructor.name ]);
            };
        };
    };
};
var colorMask = Data_Function.runFn4(Graphics_WebGLRaw.colorMask_);
var clearStencil = Data_Function.runFn1(Graphics_WebGLRaw.clearStencil_);
var clearDepth = Data_Function.runFn1(Graphics_WebGLRaw.clearDepth_);
var clearColor = Data_Function.runFn4(Graphics_WebGLRaw.clearColor_);
var clear = function (masks) {
    return Graphics_WebGLRaw.clear_(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Int_Bits[".|."])(0)(Prelude.map(Prelude.functorArray)(maskToConst)(masks)));
};
var capacityToConst = function (v) {
    if (v instanceof BLEND) {
        return Graphics_WebGLRaw._BLEND;
    };
    if (v instanceof DEPTH_TEST) {
        return Graphics_WebGLRaw._DEPTH_TEST;
    };
    if (v instanceof CULL_FACE) {
        return Graphics_WebGLRaw._CULL_FACE;
    };
    if (v instanceof POLYGON_OFFSET_FILL) {
        return Graphics_WebGLRaw._POLYGON_OFFSET_FILL;
    };
    if (v instanceof SCISSOR_TEST) {
        return Graphics_WebGLRaw._SCISSOR_TEST;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 440, column 1 - line 441, column 1: " + [ v.constructor.name ]);
};
var disable = function ($83) {
    return Graphics_WebGLRaw.disable_(capacityToConst($83));
};
var enable = function ($84) {
    return Graphics_WebGLRaw.enable_(capacityToConst($84));
};
var isEnabled = function ($85) {
    return Graphics_WebGLRaw.isEnabled_(capacityToConst($85));
};
var bufferTargetToConst = function (v) {
    if (v instanceof ARRAY_BUFFER) {
        return Graphics_WebGLRaw._ARRAY_BUFFER;
    };
    if (v instanceof ELEMENT_ARRAY_BUFFER) {
        return Graphics_WebGLRaw._ELEMENT_ARRAY_BUFFER;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 489, column 1 - line 490, column 1: " + [ v.constructor.name ]);
};
var makeBuffer$prime = function (dictModuloSemiring) {
    return function (bufferTarget) {
        return function (conversion) {
            return function (vertices) {
                return function (flag) {
                    var targetConst = bufferTargetToConst(bufferTarget);
                    return function __do() {
                        var v = Graphics_WebGLRaw.createBuffer_()();
                        Graphics_WebGLRaw.bindBuffer_(targetConst, v)();
                        var typedArray = conversion(vertices);
                        $foreign.bufferData__(targetConst, typedArray, flag)();
                        return {
                            webGLBuffer: v, 
                            bufferType: targetConst, 
                            bufferSize: Data_Array.length(vertices)
                        };
                    };
                };
            };
        };
    };
};
var makeBuffer = function (dictModuloSemiring) {
    return function (bufferTarget) {
        return function (conversion) {
            return function (vertices) {
                return makeBuffer$prime(dictModuloSemiring)(bufferTarget)(conversion)(vertices)(Graphics_WebGLRaw._STATIC_DRAW);
            };
        };
    };
};
var makeBufferDyn = function (dictModuloSemiring) {
    return function (bufferTarget) {
        return function (conversion) {
            return function (vertices) {
                return makeBuffer$prime(dictModuloSemiring)(bufferTarget)(conversion)(vertices)(Graphics_WebGLRaw._DYNAMIC_DRAW);
            };
        };
    };
};
var blendingFactorToConst = function (v) {
    if (v instanceof ZERO) {
        return Graphics_WebGLRaw._ZERO;
    };
    if (v instanceof ONE) {
        return Graphics_WebGLRaw._ONE;
    };
    if (v instanceof SRC_COLOR) {
        return Graphics_WebGLRaw._SRC_COLOR;
    };
    if (v instanceof ONE_MINUS_SRC_COLOR) {
        return Graphics_WebGLRaw._ONE_MINUS_SRC_COLOR;
    };
    if (v instanceof DST_COLOR) {
        return Graphics_WebGLRaw._DST_COLOR;
    };
    if (v instanceof ONE_MINUS_DST_COLOR) {
        return Graphics_WebGLRaw._ONE_MINUS_DST_COLOR;
    };
    if (v instanceof SRC_ALPHA) {
        return Graphics_WebGLRaw._SRC_ALPHA;
    };
    if (v instanceof ONE_MINUS_SRC_ALPHA) {
        return Graphics_WebGLRaw._ONE_MINUS_SRC_ALPHA;
    };
    if (v instanceof DST_ALPHA) {
        return Graphics_WebGLRaw._DST_ALPHA;
    };
    if (v instanceof ONE_MINUS_DST_ALPHA) {
        return Graphics_WebGLRaw._ONE_MINUS_DST_ALPHA;
    };
    if (v instanceof CONSTANT_COLOR) {
        return Graphics_WebGLRaw._CONSTANT_COLOR;
    };
    if (v instanceof ONE_MINUS_CONSTANT_COLOR) {
        return Graphics_WebGLRaw._ONE_MINUS_CONSTANT_COLOR;
    };
    if (v instanceof CONSTANT_ALPHA) {
        return Graphics_WebGLRaw._CONSTANT_ALPHA;
    };
    if (v instanceof ONE_MINUS_CONSTANT_ALPHA) {
        return Graphics_WebGLRaw._ONE_MINUS_CONSTANT_ALPHA;
    };
    if (v instanceof SRC_ALPHA_SATURATE) {
        return Graphics_WebGLRaw._SRC_ALPHA_SATURATE;
    };
    if (v instanceof BLEND_COLOR) {
        return Graphics_WebGLRaw._BLEND_COLOR;
    };
    if (v instanceof BLEND_DST_RGB) {
        return Graphics_WebGLRaw._BLEND_DST_RGB;
    };
    if (v instanceof BLEND_SRC_RGB) {
        return Graphics_WebGLRaw._BLEND_SRC_RGB;
    };
    if (v instanceof BLEND_DST_ALPHA) {
        return Graphics_WebGLRaw._BLEND_DST_ALPHA;
    };
    if (v instanceof BLEND_SRC_ALPHA) {
        return Graphics_WebGLRaw._BLEND_SRC_ALPHA;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 517, column 1 - line 518, column 1: " + [ v.constructor.name ]);
};
var blendFuncSeparate = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                var d$prime = blendingFactorToConst(d);
                var c$prime = blendingFactorToConst(c);
                var b$prime = blendingFactorToConst(b);
                var a$prime = blendingFactorToConst(a);
                return Graphics_WebGLRaw.blendFuncSeparate_(a$prime, b$prime, c$prime, d$prime);
            };
        };
    };
};
var blendFunc = function (a) {
    return function (b) {
        return Graphics_WebGLRaw.blendFunc_(blendingFactorToConst(a), blendingFactorToConst(b));
    };
};
var blendEquationToConst = function (v) {
    if (v instanceof FUNC_ADD) {
        return Graphics_WebGLRaw._FUNC_ADD;
    };
    if (v instanceof BLEND_EQUATION) {
        return Graphics_WebGLRaw._BLEND_EQUATION;
    };
    if (v instanceof BLEND_EQUATION_RGB) {
        return Graphics_WebGLRaw._BLEND_EQUATION_RGB;
    };
    if (v instanceof BLEND_EQUATION_ALPHA) {
        return Graphics_WebGLRaw._BLEND_EQUATION_ALPHA;
    };
    if (v instanceof FUNC_SUBTRACT) {
        return Graphics_WebGLRaw._FUNC_SUBTRACT;
    };
    if (v instanceof FUNC_REVERSE_SUBTRACT) {
        return Graphics_WebGLRaw._FUNC_REVERSE_SUBTRACT;
    };
    throw new Error("Failed pattern match at Graphics.WebGL line 548, column 1 - line 549, column 1: " + [ v.constructor.name ]);
};
var blendEquationSeparate = function (a) {
    return function (b) {
        return Graphics_WebGLRaw.blendEquationSeparate_(blendEquationToConst(a), blendEquationToConst(b));
    };
};
var blendEquation = function ($86) {
    return Graphics_WebGLRaw.blendEquation_(blendEquationToConst($86));
};
var blendColor = Data_Function.runFn4(Graphics_WebGLRaw.blendColor_);
var bindBufAndSetVertexAttr = function (buffer) {
    return function (attr) {
        return function __do() {
            Graphics_WebGLRaw.bindBuffer_(buffer.bufferType, buffer.webGLBuffer)();
            return vertexPointer(attr)();
        };
    };
};
var drawArr = function (mode) {
    return function (buffer) {
        return function (v) {
            return function __do() {
                bindBufAndSetVertexAttr(buffer)(v)();
                return Graphics_WebGLRaw.drawArrays_(modeToConst(mode), 0, buffer.bufferSize / v.aItemSize | 0)();
            };
        };
    };
};
var bindBuf = function (buffer) {
    return Graphics_WebGLRaw.bindBuffer_(buffer.bufferType, buffer.webGLBuffer);
};
var asArrayBuffer = Data_TypedArray.asFloat32Array;
var setUniformFloats = function (v) {
    return function (value) {
        if (v.uType === Graphics_WebGLRaw._FLOAT) {
            return Graphics_WebGLRaw.uniform1f_(v.uLocation, Data_Array_Unsafe.head(value));
        };
        if (v.uType === Graphics_WebGLRaw._FLOAT_MAT4) {
            return Graphics_WebGLRaw.uniformMatrix4fv_(v.uLocation, false, asArrayBuffer(value));
        };
        if (v.uType === Graphics_WebGLRaw._FLOAT_MAT3) {
            return Graphics_WebGLRaw.uniformMatrix3fv_(v.uLocation, false, asArrayBuffer(value));
        };
        if (v.uType === Graphics_WebGLRaw._FLOAT_MAT2) {
            return Graphics_WebGLRaw.uniformMatrix2fv_(v.uLocation, false, asArrayBuffer(value));
        };
        if (v.uType === Graphics_WebGLRaw._FLOAT_VEC4) {
            return Graphics_WebGLRaw.uniform4fv_(v.uLocation, asArrayBuffer(value));
        };
        if (v.uType === Graphics_WebGLRaw._FLOAT_VEC3) {
            return Graphics_WebGLRaw.uniform3fv_(v.uLocation, asArrayBuffer(value));
        };
        if (v.uType === Graphics_WebGLRaw._FLOAT_VEC2) {
            return Graphics_WebGLRaw.uniform2fv_(v.uLocation, asArrayBuffer(value));
        };
        if (Prelude.otherwise) {
            return Extensions.fail("WebGL>>setUniformFloats: Called for non float uniform!");
        };
        throw new Error("Failed pattern match at Graphics.WebGL line 265, column 1 - line 266, column 1: " + [ v.constructor.name, value.constructor.name ]);
    };
};
module.exports = {
    BLEND: BLEND, 
    DEPTH_TEST: DEPTH_TEST, 
    CULL_FACE: CULL_FACE, 
    POLYGON_OFFSET_FILL: POLYGON_OFFSET_FILL, 
    SCISSOR_TEST: SCISSOR_TEST, 
    ZERO: ZERO, 
    ONE: ONE, 
    SRC_COLOR: SRC_COLOR, 
    ONE_MINUS_SRC_COLOR: ONE_MINUS_SRC_COLOR, 
    DST_COLOR: DST_COLOR, 
    ONE_MINUS_DST_COLOR: ONE_MINUS_DST_COLOR, 
    SRC_ALPHA: SRC_ALPHA, 
    ONE_MINUS_SRC_ALPHA: ONE_MINUS_SRC_ALPHA, 
    DST_ALPHA: DST_ALPHA, 
    ONE_MINUS_DST_ALPHA: ONE_MINUS_DST_ALPHA, 
    SRC_ALPHA_SATURATE: SRC_ALPHA_SATURATE, 
    BLEND_DST_RGB: BLEND_DST_RGB, 
    BLEND_SRC_RGB: BLEND_SRC_RGB, 
    BLEND_DST_ALPHA: BLEND_DST_ALPHA, 
    BLEND_SRC_ALPHA: BLEND_SRC_ALPHA, 
    CONSTANT_COLOR: CONSTANT_COLOR, 
    ONE_MINUS_CONSTANT_COLOR: ONE_MINUS_CONSTANT_COLOR, 
    CONSTANT_ALPHA: CONSTANT_ALPHA, 
    ONE_MINUS_CONSTANT_ALPHA: ONE_MINUS_CONSTANT_ALPHA, 
    BLEND_COLOR: BLEND_COLOR, 
    FUNC_ADD: FUNC_ADD, 
    BLEND_EQUATION: BLEND_EQUATION, 
    BLEND_EQUATION_RGB: BLEND_EQUATION_RGB, 
    BLEND_EQUATION_ALPHA: BLEND_EQUATION_ALPHA, 
    FUNC_SUBTRACT: FUNC_SUBTRACT, 
    FUNC_REVERSE_SUBTRACT: FUNC_REVERSE_SUBTRACT, 
    POINTS: POINTS, 
    LINES: LINES, 
    LINE_STRIP: LINE_STRIP, 
    LINE_LOOP: LINE_LOOP, 
    TRIANGLES: TRIANGLES, 
    TRIANGLE_STRIP: TRIANGLE_STRIP, 
    TRIANGLE_FAN: TRIANGLE_FAN, 
    DEPTH_BUFFER_BIT: DEPTH_BUFFER_BIT, 
    STENCIL_BUFFER_BIT: STENCIL_BUFFER_BIT, 
    COLOR_BUFFER_BIT: COLOR_BUFFER_BIT, 
    NEVER: NEVER, 
    ALWAYS: ALWAYS, 
    LESS: LESS, 
    EQUAL: EQUAL, 
    LEQUAL: LEQUAL, 
    GREATER: GREATER, 
    GEQUAL: GEQUAL, 
    NOTEQUAL: NOTEQUAL, 
    ARRAY_BUFFER: ARRAY_BUFFER, 
    ELEMENT_ARRAY_BUFFER: ELEMENT_ARRAY_BUFFER, 
    Shaders: Shaders, 
    Attribute: Attribute, 
    Uniform: Uniform, 
    requestAnimationFrame: requestAnimationFrame, 
    isContextLost: isContextLost, 
    colorMask: colorMask, 
    clearStencil: clearStencil, 
    clearDepth: clearDepth, 
    clearColor: clearColor, 
    clear: clear, 
    isEnabled: isEnabled, 
    enable: enable, 
    disable: disable, 
    getCanvasHeight: getCanvasHeight, 
    getCanvasWidth: getCanvasWidth, 
    viewport: viewport, 
    blendEquationSeparate: blendEquationSeparate, 
    blendEquation: blendEquation, 
    blendFuncSeparate: blendFuncSeparate, 
    blendFunc: blendFunc, 
    blendColor: blendColor, 
    depthFunc: depthFunc, 
    drawElements: drawElements, 
    drawArr: drawArr, 
    disableVertexAttribArray: disableVertexAttribArray, 
    enableVertexAttribArray: enableVertexAttribArray, 
    vertexPointer: vertexPointer, 
    bindBuf: bindBuf, 
    bindBufAndSetVertexAttr: bindBufAndSetVertexAttr, 
    setUniformBoolean: setUniformBoolean, 
    setUniformFloats: setUniformFloats, 
    fillBuffer: fillBuffer, 
    makeBufferFloatDyn: makeBufferFloatDyn, 
    makeBufferFloat: makeBufferFloat, 
    makeBufferDyn: makeBufferDyn, 
    makeBuffer: makeBuffer, 
    withShaders: withShaders, 
    runWebGLAttr: runWebGLAttr, 
    runWebGL: runWebGL, 
    defContextAttributes: defContextAttributes
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Graphics.WebGL/foreign.js","Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","Control.Monad.Eff.WebGL":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/index.js","Data.Array":"/Users/gene/Programming/pure_morph/output/Data.Array/index.js","Data.Array.Unsafe":"/Users/gene/Programming/pure_morph/output/Data.Array.Unsafe/index.js","Data.ArrayBuffer.Types":"/Users/gene/Programming/pure_morph/output/Data.ArrayBuffer.Types/index.js","Data.Either":"/Users/gene/Programming/pure_morph/output/Data.Either/index.js","Data.Foldable":"/Users/gene/Programming/pure_morph/output/Data.Foldable/index.js","Data.Function":"/Users/gene/Programming/pure_morph/output/Data.Function/index.js","Data.Int.Bits":"/Users/gene/Programming/pure_morph/output/Data.Int.Bits/index.js","Data.Maybe":"/Users/gene/Programming/pure_morph/output/Data.Maybe/index.js","Data.TypedArray":"/Users/gene/Programming/pure_morph/output/Data.TypedArray/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Graphics.WebGLRaw":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLRaw/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLAll/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Graphics_WebGL = require("Graphics.WebGL");
var Graphics_WebGLFramebuffer = require("Graphics.WebGLFramebuffer");
var Graphics_WebGLTexture = require("Graphics.WebGLTexture");
var Control_Monad_Eff_WebGL = require("Control.Monad.Eff.WebGL");
module.exports = {};

},{"Control.Monad.Eff.WebGL":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/index.js","Graphics.WebGL":"/Users/gene/Programming/pure_morph/output/Graphics.WebGL/index.js","Graphics.WebGLFramebuffer":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLFramebuffer/index.js","Graphics.WebGLTexture":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLTexture/index.js"}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLFramebuffer/foreign.js":[function(require,module,exports){
/* global exports */

// module Graphics.WebGLFramebuffer

"use strict";

exports.unbindRenderbuffer_ = function(target)
    {return function()
     {gl.bindRenderbuffer(target,null);};};

exports.unbindFramebuffer_ = function(target)
{return function()
 {gl.bindFramebuffer(target,null);};};

 exports.readPixels__ = function(x,y,width,height,format,type,pixels)
         {return function()
          { gl.readPixels(x,y,width,height,format,type,pixels);};};

},{}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLFramebuffer/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff_WebGL = require("Control.Monad.Eff.WebGL");
var Graphics_WebGLRaw = require("Graphics.WebGLRaw");
var Graphics_WebGLTexture = require("Graphics.WebGLTexture");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_ArrayBuffer_Types = require("Data.ArrayBuffer.Types");
var Data_TypedArray = require("Data.TypedArray");
var Data_Function = require("Data.Function");
var WebGLRendBuf = function (x) {
    return x;
};
var WebGLBuf = function (x) {
    return x;
};
var RGBA4 = (function () {
    function RGBA4() {

    };
    RGBA4.value = new RGBA4();
    return RGBA4;
})();
var RGB565 = (function () {
    function RGB565() {

    };
    RGB565.value = new RGB565();
    return RGB565;
})();
var RGB5_A1 = (function () {
    function RGB5_A1() {

    };
    RGB5_A1.value = new RGB5_A1();
    return RGB5_A1;
})();
var DEPTH_COMPONENT16 = (function () {
    function DEPTH_COMPONENT16() {

    };
    DEPTH_COMPONENT16.value = new DEPTH_COMPONENT16();
    return DEPTH_COMPONENT16;
})();
var COLOR_ATTACHMENT0 = (function () {
    function COLOR_ATTACHMENT0() {

    };
    COLOR_ATTACHMENT0.value = new COLOR_ATTACHMENT0();
    return COLOR_ATTACHMENT0;
})();
var DEPTH_ATTACHMENT = (function () {
    function DEPTH_ATTACHMENT() {

    };
    DEPTH_ATTACHMENT.value = new DEPTH_ATTACHMENT();
    return DEPTH_ATTACHMENT;
})();
var STENCIL_ATTACHMENT = (function () {
    function STENCIL_ATTACHMENT() {

    };
    STENCIL_ATTACHMENT.value = new STENCIL_ATTACHMENT();
    return STENCIL_ATTACHMENT;
})();
var DEPTH_STENCIL_ATTACHMENT = (function () {
    function DEPTH_STENCIL_ATTACHMENT() {

    };
    DEPTH_STENCIL_ATTACHMENT.value = new DEPTH_STENCIL_ATTACHMENT();
    return DEPTH_STENCIL_ATTACHMENT;
})();
var unbindRenderbuffer = $foreign.unbindRenderbuffer_(Graphics_WebGLRaw._RENDERBUFFER);
var unbindFramebuffer = $foreign.unbindFramebuffer_(Graphics_WebGLRaw._FRAMEBUFFER);
var renderbufferFormatToConst = function (v) {
    if (v instanceof RGBA4) {
        return Graphics_WebGLRaw._RGBA4;
    };
    if (v instanceof RGB565) {
        return Graphics_WebGLRaw._RGB565;
    };
    if (v instanceof RGB5_A1) {
        return Graphics_WebGLRaw._RGB5_A1;
    };
    if (v instanceof DEPTH_COMPONENT16) {
        return Graphics_WebGLRaw._DEPTH_COMPONENT16;
    };
    throw new Error("Failed pattern match at Graphics.WebGLFramebuffer line 51, column 1 - line 52, column 1: " + [ v.constructor.name ]);
};
var renderbufferStorage = function (renderbufferFormat) {
    return function (width) {
        return function (height) {
            return Graphics_WebGLRaw.renderbufferStorage_(Graphics_WebGLRaw._RENDERBUFFER, renderbufferFormatToConst(renderbufferFormat), width, height);
        };
    };
};
var readPixels = function (x) {
    return function (y) {
        return function (width) {
            return function (height) {
                return function (uint8Array) {
                    var copiedArray = Data_TypedArray.asUint8Array(Data_TypedArray.asArray(uint8Array));
                    return function __do() {
                        $foreign.readPixels__(x, y, width, height, Graphics_WebGLRaw._RGBA, Graphics_WebGLRaw._UNSIGNED_BYTE, copiedArray)();
                        return copiedArray;
                    };
                };
            };
        };
    };
};
var createRenderbuffer = function __do() {
    var v = Graphics_WebGLRaw.createRenderbuffer_()();
    return v;
};
var createFramebuffer = function __do() {
    var v = Graphics_WebGLRaw.createFramebuffer_()();
    return v;
};
var checkFramebufferStatus = Data_Function.runFn1(Graphics_WebGLRaw.checkFramebufferStatus_);
var bindRenderbuffer = function (v) {
    return Graphics_WebGLRaw.bindRenderbuffer_(Graphics_WebGLRaw._RENDERBUFFER, v);
};
var bindFramebuffer = function (v) {
    return Graphics_WebGLRaw.bindFramebuffer_(Graphics_WebGLRaw._FRAMEBUFFER, v);
};
var attachementPointToConst = function (v) {
    if (v instanceof COLOR_ATTACHMENT0) {
        return Graphics_WebGLRaw._COLOR_ATTACHMENT0;
    };
    if (v instanceof DEPTH_ATTACHMENT) {
        return Graphics_WebGLRaw._DEPTH_ATTACHMENT;
    };
    if (v instanceof STENCIL_ATTACHMENT) {
        return Graphics_WebGLRaw._STENCIL_ATTACHMENT;
    };
    if (v instanceof DEPTH_STENCIL_ATTACHMENT) {
        return Graphics_WebGLRaw._DEPTH_STENCIL_ATTACHMENT;
    };
    throw new Error("Failed pattern match at Graphics.WebGLFramebuffer line 59, column 1 - line 60, column 1: " + [ v.constructor.name ]);
};
var framebufferRenderbuffer = function (attachementPoint) {
    return function (v) {
        return Graphics_WebGLRaw.framebufferRenderbuffer_(Graphics_WebGLRaw._FRAMEBUFFER, attachementPointToConst(attachementPoint), Graphics_WebGLRaw._RENDERBUFFER, v);
    };
};
var framebufferTexture2D = function (attachementPoint) {
    return function (targetType) {
        return function (v) {
            return Graphics_WebGLRaw.framebufferTexture2D_(Graphics_WebGLRaw._FRAMEBUFFER, attachementPointToConst(attachementPoint), Graphics_WebGLTexture.targetTypeToConst(targetType), v, 0);
        };
    };
};
module.exports = {
    COLOR_ATTACHMENT0: COLOR_ATTACHMENT0, 
    DEPTH_ATTACHMENT: DEPTH_ATTACHMENT, 
    STENCIL_ATTACHMENT: STENCIL_ATTACHMENT, 
    DEPTH_STENCIL_ATTACHMENT: DEPTH_STENCIL_ATTACHMENT, 
    RGBA4: RGBA4, 
    RGB565: RGB565, 
    RGB5_A1: RGB5_A1, 
    DEPTH_COMPONENT16: DEPTH_COMPONENT16, 
    WebGLRendBuf: WebGLRendBuf, 
    WebGLBuf: WebGLBuf, 
    readPixels: readPixels, 
    framebufferTexture2D: framebufferTexture2D, 
    framebufferRenderbuffer: framebufferRenderbuffer, 
    renderbufferStorage: renderbufferStorage, 
    unbindRenderbuffer: unbindRenderbuffer, 
    bindRenderbuffer: bindRenderbuffer, 
    createRenderbuffer: createRenderbuffer, 
    unbindFramebuffer: unbindFramebuffer, 
    bindFramebuffer: bindFramebuffer, 
    checkFramebufferStatus: checkFramebufferStatus, 
    createFramebuffer: createFramebuffer
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLFramebuffer/foreign.js","Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","Control.Monad.Eff.WebGL":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/index.js","Data.ArrayBuffer.Types":"/Users/gene/Programming/pure_morph/output/Data.ArrayBuffer.Types/index.js","Data.Function":"/Users/gene/Programming/pure_morph/output/Data.Function/index.js","Data.TypedArray":"/Users/gene/Programming/pure_morph/output/Data.TypedArray/index.js","Graphics.WebGLRaw":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLRaw/index.js","Graphics.WebGLTexture":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLTexture/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLRaw/foreign.js":[function(require,module,exports){
// Auto generated: don't change manually, use purescript-webgl-generator to modify!!
/* global exports */

// module Graphics.WebGLRaw

  "use strict";


    exports.getContextAttributes_ = function () 
    {return function ()
   {var res = gl.getContextAttributes();
    if (res === undefined){
      throw "Undefined in  getContextAttributes"};
    return res;}
   ;}
    
    exports.isContextLost_ = function () 
    {return function ()
   {var res = gl.isContextLost();
    if (res === undefined){
      throw "Undefined in  isContextLost"};
    return res;}
   ;}
    
    exports.getSupportedExtensions_ = function () 
    {return function ()
   {var res = gl.getSupportedExtensions();
    if (res === undefined){
      throw "Undefined in  getSupportedExtensions"};
    return res;}
   ;}
    
    exports.getExtension_ = function (name)
    {return function ()
   {var res = gl.getExtension(name);
    if (res === undefined){
      throw "Undefined in  getExtension"};
    return res;}
   ;}
    
    exports.activeTexture_ = function (texture)
    {return function ()
   {gl.activeTexture(texture);}
   ;}
    
    exports.attachShader_ = function (program,shader)
    {return function ()
   {gl.attachShader(program,shader);}
   ;}
    
    exports.bindAttribLocation_ = function (program,index,name)
    {return function ()
   {gl.bindAttribLocation(program,index,name);}
   ;}
    
    exports.bindBuffer_ = function (target,buffer)
    {return function ()
   {gl.bindBuffer(target,buffer);}
   ;}
    
    exports.bindFramebuffer_ = function (target,framebuffer)
    {return function ()
   {gl.bindFramebuffer(target,framebuffer);}
   ;}
    
    exports.bindRenderbuffer_ = function (target,renderbuffer)
    {return function ()
   {gl.bindRenderbuffer(target,renderbuffer);}
   ;}
    
    exports.bindTexture_ = function (target,texture)
    {return function ()
   {gl.bindTexture(target,texture);}
   ;}
    
    exports.blendColor_ = function (red,green,blue,alpha)
    {return function ()
   {gl.blendColor(red,green,blue,alpha);}
   ;}
    
    exports.blendEquation_ = function (mode)
    {return function ()
   {gl.blendEquation(mode);}
   ;}
    
    exports.blendEquationSeparate_ = function (modeRGB,modeAlpha)
    {return function ()
   {gl.blendEquationSeparate(modeRGB,modeAlpha);}
   ;}
    
    exports.blendFunc_ = function (sfactor,dfactor)
    {return function ()
   {gl.blendFunc(sfactor,dfactor);}
   ;}
    
    exports.blendFuncSeparate_ = function (srcRGB,dstRGB,srcAlpha,dstAlpha)
    {return function ()
   {gl.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);}
   ;}
    
    exports.bufferData_ = function (target,data,usage)
    {return function ()
   {gl.bufferData(target,data,usage);}
   ;}
    
    exports.bufferSubData_ = function (target,offset,data)
    {return function ()
   {gl.bufferSubData(target,offset,data);}
   ;}
    
    exports.checkFramebufferStatus_ = function (target)
    {return function ()
   {var res = gl.checkFramebufferStatus(target);
    if (res === undefined){
      throw "Undefined in  checkFramebufferStatus"};
    return res;}
   ;}
    
    exports.clear_ = function (mask)
    {return function ()
   {gl.clear(mask);}
   ;}
    
    exports.clearColor_ = function (red,green,blue,alpha)
    {return function ()
   {gl.clearColor(red,green,blue,alpha);}
   ;}
    
    exports.clearDepth_ = function (depth)
    {return function ()
   {gl.clearDepth(depth);}
   ;}
    
    exports.clearStencil_ = function (s)
    {return function ()
   {gl.clearStencil(s);}
   ;}
    
    exports.colorMask_ = function (red,green,blue,alpha)
    {return function ()
   {gl.colorMask(red,green,blue,alpha);}
   ;}
    
    exports.compileShader_ = function (shader)
    {return function ()
   {gl.compileShader(shader);}
   ;}
    
    exports.copyTexImage2D_ = function (target,level,internalformat,x,y,width,height,border)
    {return function ()
   {gl.copyTexImage2D(target,level,internalformat,x,y,width,height,border);}
   ;}
    
    exports.copyTexSubImage2D_ = function (target,level,xoffset,yoffset,x,y,width,height)
    {return function ()
   {gl.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);}
   ;}
    
    exports.createBuffer_ = function () 
    {return function ()
   {var res = gl.createBuffer();
    if (res === undefined){
      throw "Undefined in  createBuffer"};
    return res;}
   ;}
    
    exports.createFramebuffer_ = function () 
    {return function ()
   {var res = gl.createFramebuffer();
    if (res === undefined){
      throw "Undefined in  createFramebuffer"};
    return res;}
   ;}
    
    exports.createProgram_ = function () 
    {return function ()
   {var res = gl.createProgram();
    if (res === undefined){
      throw "Undefined in  createProgram"};
    return res;}
   ;}
    
    exports.createRenderbuffer_ = function () 
    {return function ()
   {var res = gl.createRenderbuffer();
    if (res === undefined){
      throw "Undefined in  createRenderbuffer"};
    return res;}
   ;}
    
    exports.createShader_ = function (type)
    {return function ()
   {var res = gl.createShader(type);
    if (res === undefined){
      throw "Undefined in  createShader"};
    return res;}
   ;}
    
    exports.createTexture_ = function () 
    {return function ()
   {var res = gl.createTexture();
    if (res === undefined){
      throw "Undefined in  createTexture"};
    return res;}
   ;}
    
    exports.cullFace_ = function (mode)
    {return function ()
   {gl.cullFace(mode);}
   ;}
    
    exports.deleteBuffer_ = function (buffer)
    {return function ()
   {gl.deleteBuffer(buffer);}
   ;}
    
    exports.deleteFramebuffer_ = function (framebuffer)
    {return function ()
   {gl.deleteFramebuffer(framebuffer);}
   ;}
    
    exports.deleteProgram_ = function (program)
    {return function ()
   {gl.deleteProgram(program);}
   ;}
    
    exports.deleteRenderbuffer_ = function (renderbuffer)
    {return function ()
   {gl.deleteRenderbuffer(renderbuffer);}
   ;}
    
    exports.deleteShader_ = function (shader)
    {return function ()
   {gl.deleteShader(shader);}
   ;}
    
    exports.deleteTexture_ = function (texture)
    {return function ()
   {gl.deleteTexture(texture);}
   ;}
    
    exports.depthFunc_ = function (func)
    {return function ()
   {gl.depthFunc(func);}
   ;}
    
    exports.depthMask_ = function (flag)
    {return function ()
   {gl.depthMask(flag);}
   ;}
    
    exports.depthRange_ = function (zNear,zFar)
    {return function ()
   {gl.depthRange(zNear,zFar);}
   ;}
    
    exports.detachShader_ = function (program,shader)
    {return function ()
   {gl.detachShader(program,shader);}
   ;}
    
    exports.disable_ = function (cap)
    {return function ()
   {gl.disable(cap);}
   ;}
    
    exports.disableVertexAttribArray_ = function (index)
    {return function ()
   {gl.disableVertexAttribArray(index);}
   ;}
    
    exports.drawArrays_ = function (mode,first,count)
    {return function ()
   {gl.drawArrays(mode,first,count);}
   ;}
    
    exports.drawElements_ = function (mode,count,type,offset)
    {return function ()
   {gl.drawElements(mode,count,type,offset);}
   ;}
    
    exports.enable_ = function (cap)
    {return function ()
   {gl.enable(cap);}
   ;}
    
    exports.enableVertexAttribArray_ = function (index)
    {return function ()
   {gl.enableVertexAttribArray(index);}
   ;}
    
    exports.finish_ = function () 
    {return function ()
   {gl.finish();}
   ;}
    
    exports.flush_ = function () 
    {return function ()
   {gl.flush();}
   ;}
    
    exports.framebufferRenderbuffer_ = function (target,attachment,renderbuffertarget,renderbuffer)
    {return function ()
   {gl.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);}
   ;}
    
    exports.framebufferTexture2D_ = function (target,attachment,textarget,texture,level)
    {return function ()
   {gl.framebufferTexture2D(target,attachment,textarget,texture,level);}
   ;}
    
    exports.frontFace_ = function (mode)
    {return function ()
   {gl.frontFace(mode);}
   ;}
    
    exports.generateMipmap_ = function (target)
    {return function ()
   {gl.generateMipmap(target);}
   ;}
    
    exports.getActiveAttrib_ = function (program,index)
    {return function ()
   {var res = gl.getActiveAttrib(program,index);
    if (res === undefined){
      throw "Undefined in  getActiveAttrib"};
    return res;}
   ;}
    
    exports.getActiveUniform_ = function (program,index)
    {return function ()
   {var res = gl.getActiveUniform(program,index);
    if (res === undefined){
      throw "Undefined in  getActiveUniform"};
    return res;}
   ;}
    
    exports.getAttachedShaders_ = function (program)
    {return function ()
   {var res = gl.getAttachedShaders(program);
    if (res === undefined){
      throw "Undefined in  getAttachedShaders"};
    return res;}
   ;}
    
    exports.getAttribLocation_ = function (program,name)
    {return function ()
   {var res = gl.getAttribLocation(program,name);
    if (res === undefined){
      throw "Undefined in  getAttribLocation"};
    return res;}
   ;}
    
    exports.getParameter_ = function (pname)
    {return function ()
   {var res = gl.getParameter(pname);
    if (res === undefined){
      throw "Undefined in  getParameter"};
    return res;}
   ;}
    
    exports.getBufferParameter_ = function (target,pname)
    {return function ()
   {var res = gl.getBufferParameter(target,pname);
    if (res === undefined){
      throw "Undefined in  getBufferParameter"};
    return res;}
   ;}
    
    exports.getError_ = function () 
    {return function ()
   {var res = gl.getError();
    if (res === undefined){
      throw "Undefined in  getError"};
    return res;}
   ;}
    
    exports.getFramebufferAttachmentParameter_ = function (target,attachment,pname)
    {return function ()
   {var res = gl.getFramebufferAttachmentParameter(target,attachment,pname);
    if (res === undefined){
      throw "Undefined in  getFramebufferAttachmentParameter"};
    return res;}
   ;}
    
    exports.getProgramParameter_ = function (program,pname)
    {return function ()
   {var res = gl.getProgramParameter(program,pname);
    if (res === undefined){
      throw "Undefined in  getProgramParameter"};
    return res;}
   ;}
    
    exports.getProgramInfoLog_ = function (program)
    {return function ()
   {var res = gl.getProgramInfoLog(program);
    if (res === undefined){
      throw "Undefined in  getProgramInfoLog"};
    return res;}
   ;}
    
    exports.getRenderbufferParameter_ = function (target,pname)
    {return function ()
   {var res = gl.getRenderbufferParameter(target,pname);
    if (res === undefined){
      throw "Undefined in  getRenderbufferParameter"};
    return res;}
   ;}
    
    exports.getShaderParameter_ = function (shader,pname)
    {return function ()
   {var res = gl.getShaderParameter(shader,pname);
    if (res === undefined){
      throw "Undefined in  getShaderParameter"};
    return res;}
   ;}
    
    exports.getShaderInfoLog_ = function (shader)
    {return function ()
   {var res = gl.getShaderInfoLog(shader);
    if (res === undefined){
      throw "Undefined in  getShaderInfoLog"};
    return res;}
   ;}
    
    exports.getShaderSource_ = function (shader)
    {return function ()
   {var res = gl.getShaderSource(shader);
    if (res === undefined){
      throw "Undefined in  getShaderSource"};
    return res;}
   ;}
    
    exports.getTexParameter_ = function (target,pname)
    {return function ()
   {var res = gl.getTexParameter(target,pname);
    if (res === undefined){
      throw "Undefined in  getTexParameter"};
    return res;}
   ;}
    
    exports.getUniform_ = function (program,location)
    {return function ()
   {var res = gl.getUniform(program,location);
    if (res === undefined){
      throw "Undefined in  getUniform"};
    return res;}
   ;}
    
    exports.getUniformLocation_ = function (program,name)
    {return function ()
   {var res = gl.getUniformLocation(program,name);
    if (res === undefined){
      throw "Undefined in  getUniformLocation"};
    return res;}
   ;}
    
    exports.getVertexAttrib_ = function (index,pname)
    {return function ()
   {var res = gl.getVertexAttrib(index,pname);
    if (res === undefined){
      throw "Undefined in  getVertexAttrib"};
    return res;}
   ;}
    
    exports.getVertexAttribOffset_ = function (index,pname)
    {return function ()
   {var res = gl.getVertexAttribOffset(index,pname);
    if (res === undefined){
      throw "Undefined in  getVertexAttribOffset"};
    return res;}
   ;}
    
    exports.hint_ = function (target,mode)
    {return function ()
   {gl.hint(target,mode);}
   ;}
    
    exports.isBuffer_ = function (buffer)
    {return function ()
   {var res = gl.isBuffer(buffer);
    if (res === undefined){
      throw "Undefined in  isBuffer"};
    return res;}
   ;}
    
    exports.isEnabled_ = function (cap)
    {return function ()
   {var res = gl.isEnabled(cap);
    if (res === undefined){
      throw "Undefined in  isEnabled"};
    return res;}
   ;}
    
    exports.isFramebuffer_ = function (framebuffer)
    {return function ()
   {var res = gl.isFramebuffer(framebuffer);
    if (res === undefined){
      throw "Undefined in  isFramebuffer"};
    return res;}
   ;}
    
    exports.isProgram_ = function (program)
    {return function ()
   {var res = gl.isProgram(program);
    if (res === undefined){
      throw "Undefined in  isProgram"};
    return res;}
   ;}
    
    exports.isRenderbuffer_ = function (renderbuffer)
    {return function ()
   {var res = gl.isRenderbuffer(renderbuffer);
    if (res === undefined){
      throw "Undefined in  isRenderbuffer"};
    return res;}
   ;}
    
    exports.isShader_ = function (shader)
    {return function ()
   {var res = gl.isShader(shader);
    if (res === undefined){
      throw "Undefined in  isShader"};
    return res;}
   ;}
    
    exports.isTexture_ = function (texture)
    {return function ()
   {var res = gl.isTexture(texture);
    if (res === undefined){
      throw "Undefined in  isTexture"};
    return res;}
   ;}
    
    exports.lineWidth_ = function (width)
    {return function ()
   {gl.lineWidth(width);}
   ;}
    
    exports.linkProgram_ = function (program)
    {return function ()
   {gl.linkProgram(program);}
   ;}
    
    exports.pixelStorei_ = function (pname,param)
    {return function ()
   {gl.pixelStorei(pname,param);}
   ;}
    
    exports.polygonOffset_ = function (factor,units)
    {return function ()
   {gl.polygonOffset(factor,units);}
   ;}
    
    exports.readPixels_ = function (x,y,width,height,format,type,pixels)
    {return function ()
   {gl.readPixels(x,y,width,height,format,type,pixels);}
   ;}
    
    exports.renderbufferStorage_ = function (target,internalformat,width,height)
    {return function ()
   {gl.renderbufferStorage(target,internalformat,width,height);}
   ;}
    
    exports.sampleCoverage_ = function (value,invert)
    {return function ()
   {gl.sampleCoverage(value,invert);}
   ;}
    
    exports.scissor_ = function (x,y,width,height)
    {return function ()
   {gl.scissor(x,y,width,height);}
   ;}
    
    exports.shaderSource_ = function (shader,source)
    {return function ()
   {gl.shaderSource(shader,source);}
   ;}
    
    exports.stencilFunc_ = function (func,ref,mask)
    {return function ()
   {gl.stencilFunc(func,ref,mask);}
   ;}
    
    exports.stencilFuncSeparate_ = function (face,func,ref,mask)
    {return function ()
   {gl.stencilFuncSeparate(face,func,ref,mask);}
   ;}
    
    exports.stencilMask_ = function (mask)
    {return function ()
   {gl.stencilMask(mask);}
   ;}
    
    exports.stencilMaskSeparate_ = function (face,mask)
    {return function ()
   {gl.stencilMaskSeparate(face,mask);}
   ;}
    
    exports.stencilOp_ = function (fail,zfail,zpass)
    {return function ()
   {gl.stencilOp(fail,zfail,zpass);}
   ;}
    
    exports.stencilOpSeparate_ = function (face,fail,zfail,zpass)
    {return function ()
   {gl.stencilOpSeparate(face,fail,zfail,zpass);}
   ;}
    
    exports.texImage2D_ = function (target,level,internalformat,width,height,border,format,type,pixels)
    {return function ()
   {gl.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);}
   ;}
    
    exports.texParameterf_ = function (target,pname,param)
    {return function ()
   {gl.texParameterf(target,pname,param);}
   ;}
    
    exports.texParameteri_ = function (target,pname,param)
    {return function ()
   {gl.texParameteri(target,pname,param);}
   ;}
    
    exports.texSubImage2D_ = function (target,level,xoffset,yoffset,width,height,format,type,pixels)
    {return function ()
   {gl.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);}
   ;}
    
    exports.uniform1f_ = function (location,x)
    {return function ()
   {gl.uniform1f(location,x);}
   ;}
    
    exports.uniform1fv_ = function (location,v)
    {return function ()
   {gl.uniform1fv(location,v);}
   ;}
    
    exports.uniform1i_ = function (location,x)
    {return function ()
   {gl.uniform1i(location,x);}
   ;}
    
    exports.uniform1iv_ = function (location,v)
    {return function ()
   {gl.uniform1iv(location,v);}
   ;}
    
    exports.uniform2f_ = function (location,x,y)
    {return function ()
   {gl.uniform2f(location,x,y);}
   ;}
    
    exports.uniform2fv_ = function (location,v)
    {return function ()
   {gl.uniform2fv(location,v);}
   ;}
    
    exports.uniform2i_ = function (location,x,y)
    {return function ()
   {gl.uniform2i(location,x,y);}
   ;}
    
    exports.uniform2iv_ = function (location,v)
    {return function ()
   {gl.uniform2iv(location,v);}
   ;}
    
    exports.uniform3f_ = function (location,x,y,z)
    {return function ()
   {gl.uniform3f(location,x,y,z);}
   ;}
    
    exports.uniform3fv_ = function (location,v)
    {return function ()
   {gl.uniform3fv(location,v);}
   ;}
    
    exports.uniform3i_ = function (location,x,y,z)
    {return function ()
   {gl.uniform3i(location,x,y,z);}
   ;}
    
    exports.uniform3iv_ = function (location,v)
    {return function ()
   {gl.uniform3iv(location,v);}
   ;}
    
    exports.uniform4f_ = function (location,x,y,z,w)
    {return function ()
   {gl.uniform4f(location,x,y,z,w);}
   ;}
    
    exports.uniform4fv_ = function (location,v)
    {return function ()
   {gl.uniform4fv(location,v);}
   ;}
    
    exports.uniform4i_ = function (location,x,y,z,w)
    {return function ()
   {gl.uniform4i(location,x,y,z,w);}
   ;}
    
    exports.uniform4iv_ = function (location,v)
    {return function ()
   {gl.uniform4iv(location,v);}
   ;}
    
    exports.uniformMatrix2fv_ = function (location,transpose,value)
    {return function ()
   {gl.uniformMatrix2fv(location,transpose,value);}
   ;}
    
    exports.uniformMatrix3fv_ = function (location,transpose,value)
    {return function ()
   {gl.uniformMatrix3fv(location,transpose,value);}
   ;}
    
    exports.uniformMatrix4fv_ = function (location,transpose,value)
    {return function ()
   {gl.uniformMatrix4fv(location,transpose,value);}
   ;}
    
    exports.useProgram_ = function (program)
    {return function ()
   {gl.useProgram(program);}
   ;}
    
    exports.validateProgram_ = function (program)
    {return function ()
   {gl.validateProgram(program);}
   ;}
    
    exports.vertexAttrib1f_ = function (indx,x)
    {return function ()
   {gl.vertexAttrib1f(indx,x);}
   ;}
    
    exports.vertexAttrib1fv_ = function (indx,values)
    {return function ()
   {gl.vertexAttrib1fv(indx,values);}
   ;}
    
    exports.vertexAttrib2f_ = function (indx,x,y)
    {return function ()
   {gl.vertexAttrib2f(indx,x,y);}
   ;}
    
    exports.vertexAttrib2fv_ = function (indx,values)
    {return function ()
   {gl.vertexAttrib2fv(indx,values);}
   ;}
    
    exports.vertexAttrib3f_ = function (indx,x,y,z)
    {return function ()
   {gl.vertexAttrib3f(indx,x,y,z);}
   ;}
    
    exports.vertexAttrib3fv_ = function (indx,values)
    {return function ()
   {gl.vertexAttrib3fv(indx,values);}
   ;}
    
    exports.vertexAttrib4f_ = function (indx,x,y,z,w)
    {return function ()
   {gl.vertexAttrib4f(indx,x,y,z,w);}
   ;}
    
    exports.vertexAttrib4fv_ = function (indx,values)
    {return function ()
   {gl.vertexAttrib4fv(indx,values);}
   ;}
    
    exports.vertexAttribPointer_ = function (indx,size,type,normalized,stride,offset)
    {return function ()
   {gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);}
   ;}
    
    exports.viewport_ = function (x,y,width,height)
    {return function ()
   {gl.viewport(x,y,width,height);}
   ;}
    

},{}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLRaw/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_WebGL = require("Control.Monad.Eff.WebGL");
var Data_ArrayBuffer_Types = require("Data.ArrayBuffer.Types");
var Data_Function = require("Data.Function");
var Prelude = require("Prelude");
var _ZERO = 0;
var _VIEWPORT = 2978;
var _VERTEX_SHADER = 35633;
var _VERTEX_ATTRIB_ARRAY_TYPE = 34341;
var _VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
var _VERTEX_ATTRIB_ARRAY_SIZE = 34339;
var _VERTEX_ATTRIB_ARRAY_POINTER = 34373;
var _VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
var _VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
var _VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
var _VERSION = 7938;
var _VENDOR = 7936;
var _VALIDATE_STATUS = 35715;
var _UNSIGNED_SHORT_5_6_5 = 33635;
var _UNSIGNED_SHORT_5_5_5_1 = 32820;
var _UNSIGNED_SHORT_4_4_4_4 = 32819;
var _UNSIGNED_SHORT = 5123;
var _UNSIGNED_INT = 5125;
var _UNSIGNED_BYTE = 5121;
var _UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
var _UNPACK_FLIP_Y_WEBGL = 37440;
var _UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
var _UNPACK_ALIGNMENT = 3317;
var _TRIANGLE_STRIP = 5;
var _TRIANGLE_FAN = 6;
var _TRIANGLES = 4;
var _TEXTURE_WRAP_T = 10243;
var _TEXTURE_WRAP_S = 10242;
var _TEXTURE_MIN_FILTER = 10241;
var _TEXTURE_MAG_FILTER = 10240;
var _TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
var _TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
var _TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
var _TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
var _TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
var _TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
var _TEXTURE_CUBE_MAP = 34067;
var _TEXTURE_BINDING_CUBE_MAP = 34068;
var _TEXTURE_BINDING_2D = 32873;
var _TEXTURE_2D = 3553;
var _TEXTURE9 = 33993;
var _TEXTURE8 = 33992;
var _TEXTURE7 = 33991;
var _TEXTURE6 = 33990;
var _TEXTURE5 = 33989;
var _TEXTURE4 = 33988;
var _TEXTURE31 = 34015;
var _TEXTURE30 = 34014;
var _TEXTURE3 = 33987;
var _TEXTURE29 = 34013;
var _TEXTURE28 = 34012;
var _TEXTURE27 = 34011;
var _TEXTURE26 = 34010;
var _TEXTURE25 = 34009;
var _TEXTURE24 = 34008;
var _TEXTURE23 = 34007;
var _TEXTURE22 = 34006;
var _TEXTURE21 = 34005;
var _TEXTURE20 = 34004;
var _TEXTURE2 = 33986;
var _TEXTURE19 = 34003;
var _TEXTURE18 = 34002;
var _TEXTURE17 = 34001;
var _TEXTURE16 = 34000;
var _TEXTURE15 = 33999;
var _TEXTURE14 = 33998;
var _TEXTURE13 = 33997;
var _TEXTURE12 = 33996;
var _TEXTURE11 = 33995;
var _TEXTURE10 = 33994;
var _TEXTURE1 = 33985;
var _TEXTURE0 = 33984;
var _TEXTURE = 5890;
var _SUBPIXEL_BITS = 3408;
var _STREAM_DRAW = 35040;
var _STENCIL_WRITEMASK = 2968;
var _STENCIL_VALUE_MASK = 2963;
var _STENCIL_TEST = 2960;
var _STENCIL_REF = 2967;
var _STENCIL_PASS_DEPTH_PASS = 2966;
var _STENCIL_PASS_DEPTH_FAIL = 2965;
var _STENCIL_INDEX8 = 36168;
var _STENCIL_INDEX = 6401;
var _STENCIL_FUNC = 2962;
var _STENCIL_FAIL = 2964;
var _STENCIL_CLEAR_VALUE = 2961;
var _STENCIL_BUFFER_BIT = 1024;
var _STENCIL_BITS = 3415;
var _STENCIL_BACK_WRITEMASK = 36005;
var _STENCIL_BACK_VALUE_MASK = 36004;
var _STENCIL_BACK_REF = 36003;
var _STENCIL_BACK_PASS_DEPTH_PASS = 34819;
var _STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
var _STENCIL_BACK_FUNC = 34816;
var _STENCIL_BACK_FAIL = 34817;
var _STENCIL_ATTACHMENT = 36128;
var _STATIC_DRAW = 35044;
var _SRC_COLOR = 768;
var _SRC_ALPHA_SATURATE = 776;
var _SRC_ALPHA = 770;
var _SHORT = 5122;
var _SHADING_LANGUAGE_VERSION = 35724;
var _SHADER_TYPE = 35663;
var _SHADER_SOURCE_LENGTH = 35720;
var _SCISSOR_TEST = 3089;
var _SCISSOR_BOX = 3088;
var _SAMPLE_COVERAGE_VALUE = 32938;
var _SAMPLE_COVERAGE_INVERT = 32939;
var _SAMPLE_COVERAGE = 32928;
var _SAMPLE_BUFFERS = 32936;
var _SAMPLE_ALPHA_TO_COVERAGE = 32926;
var _SAMPLES = 32937;
var _SAMPLER_CUBE = 35680;
var _SAMPLER_2D = 35678;
var _RGBA4 = 32854;
var _RGBA = 6408;
var _RGB5_A1 = 32855;
var _RGB565 = 36194;
var _RGB = 6407;
var _REPLACE = 7681;
var _REPEAT = 10497;
var _RENDERER = 7937;
var _RENDERBUFFER_WIDTH = 36162;
var _RENDERBUFFER_STENCIL_SIZE = 36181;
var _RENDERBUFFER_RED_SIZE = 36176;
var _RENDERBUFFER_INTERNAL_FORMAT = 36164;
var _RENDERBUFFER_HEIGHT = 36163;
var _RENDERBUFFER_GREEN_SIZE = 36177;
var _RENDERBUFFER_DEPTH_SIZE = 36180;
var _RENDERBUFFER_BLUE_SIZE = 36178;
var _RENDERBUFFER_BINDING = 36007;
var _RENDERBUFFER_ALPHA_SIZE = 36179;
var _RENDERBUFFER = 36161;
var _RED_BITS = 3410;
var _POLYGON_OFFSET_UNITS = 10752;
var _POLYGON_OFFSET_FILL = 32823;
var _POLYGON_OFFSET_FACTOR = 32824;
var _POINTS = 0;
var _PACK_ALIGNMENT = 3333;
var _OUT_OF_MEMORY = 1285;
var _ONE_MINUS_SRC_COLOR = 769;
var _ONE_MINUS_SRC_ALPHA = 771;
var _ONE_MINUS_DST_COLOR = 775;
var _ONE_MINUS_DST_ALPHA = 773;
var _ONE_MINUS_CONSTANT_COLOR = 32770;
var _ONE_MINUS_CONSTANT_ALPHA = 32772;
var _ONE = 1;
var _NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
var _NO_ERROR = 0;
var _NOTEQUAL = 517;
var _NONE = 0;
var _NICEST = 4354;
var _NEVER = 512;
var _NEAREST_MIPMAP_NEAREST = 9984;
var _NEAREST_MIPMAP_LINEAR = 9986;
var _NEAREST = 9728;
var _MIRRORED_REPEAT = 33648;
var _MEDIUM_INT = 36340;
var _MEDIUM_FLOAT = 36337;
var _MAX_VIEWPORT_DIMS = 3386;
var _MAX_VERTEX_UNIFORM_VECTORS = 36347;
var _MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
var _MAX_VERTEX_ATTRIBS = 34921;
var _MAX_VARYING_VECTORS = 36348;
var _MAX_TEXTURE_SIZE = 3379;
var _MAX_TEXTURE_IMAGE_UNITS = 34930;
var _MAX_RENDERBUFFER_SIZE = 34024;
var _MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
var _MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
var _MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
var _LUMINANCE_ALPHA = 6410;
var _LUMINANCE = 6409;
var _LOW_INT = 36339;
var _LOW_FLOAT = 36336;
var _LINK_STATUS = 35714;
var _LINE_WIDTH = 2849;
var _LINE_STRIP = 3;
var _LINE_LOOP = 2;
var _LINES = 1;
var _LINEAR_MIPMAP_NEAREST = 9985;
var _LINEAR_MIPMAP_LINEAR = 9987;
var _LINEAR = 9729;
var _LESS = 513;
var _LEQUAL = 515;
var _KEEP = 7680;
var _INVERT = 5386;
var _INVALID_VALUE = 1281;
var _INVALID_OPERATION = 1282;
var _INVALID_FRAMEBUFFER_OPERATION = 1286;
var _INVALID_ENUM = 1280;
var _INT_VEC4 = 35669;
var _INT_VEC3 = 35668;
var _INT_VEC2 = 35667;
var _INT = 5124;
var _INFO_LOG_LENGTH = 35716;
var _INCR_WRAP = 34055;
var _INCR = 7682;
var _HIGH_INT = 36341;
var _HIGH_FLOAT = 36338;
var _GREEN_BITS = 3411;
var _GREATER = 516;
var _GEQUAL = 518;
var _GENERATE_MIPMAP_HINT = 33170;
var _FUNC_SUBTRACT = 32778;
var _FUNC_REVERSE_SUBTRACT = 32779;
var _FUNC_ADD = 32774;
var _FRONT_FACE = 2886;
var _FRONT_AND_BACK = 1032;
var _FRONT = 1028;
var _FRAMEBUFFER_UNSUPPORTED = 36061;
var _FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
var _FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
var _FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
var _FRAMEBUFFER_COMPLETE = 36053;
var _FRAMEBUFFER_BINDING = 36006;
var _FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
var _FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
var _FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
var _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
var _FRAMEBUFFER = 36160;
var _FRAGMENT_SHADER = 35632;
var _FLOAT_VEC4 = 35666;
var _FLOAT_VEC3 = 35665;
var _FLOAT_VEC2 = 35664;
var _FLOAT_MAT4 = 35676;
var _FLOAT_MAT3 = 35675;
var _FLOAT_MAT2 = 35674;
var _FLOAT = 5126;
var _FASTEST = 4353;
var _EQUAL = 514;
var _ELEMENT_ARRAY_BUFFER_BINDING = 34965;
var _ELEMENT_ARRAY_BUFFER = 34963;
var _DYNAMIC_DRAW = 35048;
var _DST_COLOR = 774;
var _DST_ALPHA = 772;
var _DONT_CARE = 4352;
var _DITHER = 3024;
var _DEPTH_WRITEMASK = 2930;
var _DEPTH_TEST = 2929;
var _DEPTH_STENCIL_ATTACHMENT = 33306;
var _DEPTH_STENCIL = 34041;
var _DEPTH_RANGE = 2928;
var _DEPTH_FUNC = 2932;
var _DEPTH_COMPONENT16 = 33189;
var _DEPTH_COMPONENT = 6402;
var _DEPTH_CLEAR_VALUE = 2931;
var _DEPTH_BUFFER_BIT = 256;
var _DEPTH_BITS = 3414;
var _DEPTH_ATTACHMENT = 36096;
var _DELETE_STATUS = 35712;
var _DECR_WRAP = 34056;
var _DECR = 7683;
var _CW = 2304;
var _CURRENT_VERTEX_ATTRIB = 34342;
var _CURRENT_PROGRAM = 35725;
var _CULL_FACE_MODE = 2885;
var _CULL_FACE = 2884;
var _CONTEXT_LOST_WEBGL = 37442;
var _CONSTANT_COLOR = 32769;
var _CONSTANT_ALPHA = 32771;
var _COMPRESSED_TEXTURE_FORMATS = 34467;
var _COMPILE_STATUS = 35713;
var _COLOR_WRITEMASK = 3107;
var _COLOR_CLEAR_VALUE = 3106;
var _COLOR_BUFFER_BIT = 16384;
var _COLOR_ATTACHMENT0 = 36064;
var _CLAMP_TO_EDGE = 33071;
var _CCW = 2305;
var _BYTE = 5120;
var _BUFFER_USAGE = 34661;
var _BUFFER_SIZE = 34660;
var _BROWSER_DEFAULT_WEBGL = 37444;
var _BOOL_VEC4 = 35673;
var _BOOL_VEC3 = 35672;
var _BOOL_VEC2 = 35671;
var _BOOL = 35670;
var _BLUE_BITS = 3412;
var _BLEND_SRC_RGB = 32969;
var _BLEND_SRC_ALPHA = 32971;
var _BLEND_EQUATION_RGB = 32777;
var _BLEND_EQUATION_ALPHA = 34877;
var _BLEND_EQUATION = 32777;
var _BLEND_DST_RGB = 32968;
var _BLEND_DST_ALPHA = 32970;
var _BLEND_COLOR = 32773;
var _BLEND = 3042;
var _BACK = 1029;
var _ATTACHED_SHADERS = 35717;
var _ARRAY_BUFFER_BINDING = 34964;
var _ARRAY_BUFFER = 34962;
var _ALWAYS = 519;
var _ALPHA_BITS = 3413;
var _ALPHA = 6406;
var _ALIASED_POINT_SIZE_RANGE = 33901;
var _ALIASED_LINE_WIDTH_RANGE = 33902;
var _ACTIVE_UNIFORM_MAX_LENGTH = 35719;
var _ACTIVE_UNIFORMS = 35718;
var _ACTIVE_TEXTURE = 34016;
var _ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
var _ACTIVE_ATTRIBUTES = 35721;
module.exports = {
    _BROWSER_DEFAULT_WEBGL: _BROWSER_DEFAULT_WEBGL, 
    _UNPACK_COLORSPACE_CONVERSION_WEBGL: _UNPACK_COLORSPACE_CONVERSION_WEBGL, 
    _CONTEXT_LOST_WEBGL: _CONTEXT_LOST_WEBGL, 
    _UNPACK_PREMULTIPLY_ALPHA_WEBGL: _UNPACK_PREMULTIPLY_ALPHA_WEBGL, 
    _UNPACK_FLIP_Y_WEBGL: _UNPACK_FLIP_Y_WEBGL, 
    _INVALID_FRAMEBUFFER_OPERATION: _INVALID_FRAMEBUFFER_OPERATION, 
    _MAX_RENDERBUFFER_SIZE: _MAX_RENDERBUFFER_SIZE, 
    _RENDERBUFFER_BINDING: _RENDERBUFFER_BINDING, 
    _FRAMEBUFFER_BINDING: _FRAMEBUFFER_BINDING, 
    _FRAMEBUFFER_UNSUPPORTED: _FRAMEBUFFER_UNSUPPORTED, 
    _FRAMEBUFFER_INCOMPLETE_DIMENSIONS: _FRAMEBUFFER_INCOMPLETE_DIMENSIONS, 
    _FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: _FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, 
    _FRAMEBUFFER_INCOMPLETE_ATTACHMENT: _FRAMEBUFFER_INCOMPLETE_ATTACHMENT, 
    _FRAMEBUFFER_COMPLETE: _FRAMEBUFFER_COMPLETE, 
    _NONE: _NONE, 
    _DEPTH_STENCIL_ATTACHMENT: _DEPTH_STENCIL_ATTACHMENT, 
    _STENCIL_ATTACHMENT: _STENCIL_ATTACHMENT, 
    _DEPTH_ATTACHMENT: _DEPTH_ATTACHMENT, 
    _COLOR_ATTACHMENT0: _COLOR_ATTACHMENT0, 
    _FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: _FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, 
    _FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: _FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, 
    _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, 
    _FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: _FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, 
    _RENDERBUFFER_STENCIL_SIZE: _RENDERBUFFER_STENCIL_SIZE, 
    _RENDERBUFFER_DEPTH_SIZE: _RENDERBUFFER_DEPTH_SIZE, 
    _RENDERBUFFER_ALPHA_SIZE: _RENDERBUFFER_ALPHA_SIZE, 
    _RENDERBUFFER_BLUE_SIZE: _RENDERBUFFER_BLUE_SIZE, 
    _RENDERBUFFER_GREEN_SIZE: _RENDERBUFFER_GREEN_SIZE, 
    _RENDERBUFFER_RED_SIZE: _RENDERBUFFER_RED_SIZE, 
    _RENDERBUFFER_INTERNAL_FORMAT: _RENDERBUFFER_INTERNAL_FORMAT, 
    _RENDERBUFFER_HEIGHT: _RENDERBUFFER_HEIGHT, 
    _RENDERBUFFER_WIDTH: _RENDERBUFFER_WIDTH, 
    _DEPTH_STENCIL: _DEPTH_STENCIL, 
    _STENCIL_INDEX8: _STENCIL_INDEX8, 
    _STENCIL_INDEX: _STENCIL_INDEX, 
    _DEPTH_COMPONENT16: _DEPTH_COMPONENT16, 
    _RGB565: _RGB565, 
    _RGB5_A1: _RGB5_A1, 
    _RGBA4: _RGBA4, 
    _RENDERBUFFER: _RENDERBUFFER, 
    _FRAMEBUFFER: _FRAMEBUFFER, 
    _HIGH_INT: _HIGH_INT, 
    _MEDIUM_INT: _MEDIUM_INT, 
    _LOW_INT: _LOW_INT, 
    _HIGH_FLOAT: _HIGH_FLOAT, 
    _MEDIUM_FLOAT: _MEDIUM_FLOAT, 
    _LOW_FLOAT: _LOW_FLOAT, 
    _SHADER_SOURCE_LENGTH: _SHADER_SOURCE_LENGTH, 
    _INFO_LOG_LENGTH: _INFO_LOG_LENGTH, 
    _COMPILE_STATUS: _COMPILE_STATUS, 
    _VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: _VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, 
    _VERTEX_ATTRIB_ARRAY_POINTER: _VERTEX_ATTRIB_ARRAY_POINTER, 
    _VERTEX_ATTRIB_ARRAY_NORMALIZED: _VERTEX_ATTRIB_ARRAY_NORMALIZED, 
    _VERTEX_ATTRIB_ARRAY_TYPE: _VERTEX_ATTRIB_ARRAY_TYPE, 
    _VERTEX_ATTRIB_ARRAY_STRIDE: _VERTEX_ATTRIB_ARRAY_STRIDE, 
    _VERTEX_ATTRIB_ARRAY_SIZE: _VERTEX_ATTRIB_ARRAY_SIZE, 
    _VERTEX_ATTRIB_ARRAY_ENABLED: _VERTEX_ATTRIB_ARRAY_ENABLED, 
    _SAMPLER_CUBE: _SAMPLER_CUBE, 
    _SAMPLER_2D: _SAMPLER_2D, 
    _FLOAT_MAT4: _FLOAT_MAT4, 
    _FLOAT_MAT3: _FLOAT_MAT3, 
    _FLOAT_MAT2: _FLOAT_MAT2, 
    _BOOL_VEC4: _BOOL_VEC4, 
    _BOOL_VEC3: _BOOL_VEC3, 
    _BOOL_VEC2: _BOOL_VEC2, 
    _BOOL: _BOOL, 
    _INT_VEC4: _INT_VEC4, 
    _INT_VEC3: _INT_VEC3, 
    _INT_VEC2: _INT_VEC2, 
    _FLOAT_VEC4: _FLOAT_VEC4, 
    _FLOAT_VEC3: _FLOAT_VEC3, 
    _FLOAT_VEC2: _FLOAT_VEC2, 
    _MIRRORED_REPEAT: _MIRRORED_REPEAT, 
    _CLAMP_TO_EDGE: _CLAMP_TO_EDGE, 
    _REPEAT: _REPEAT, 
    _ACTIVE_TEXTURE: _ACTIVE_TEXTURE, 
    _TEXTURE31: _TEXTURE31, 
    _TEXTURE30: _TEXTURE30, 
    _TEXTURE29: _TEXTURE29, 
    _TEXTURE28: _TEXTURE28, 
    _TEXTURE27: _TEXTURE27, 
    _TEXTURE26: _TEXTURE26, 
    _TEXTURE25: _TEXTURE25, 
    _TEXTURE24: _TEXTURE24, 
    _TEXTURE23: _TEXTURE23, 
    _TEXTURE22: _TEXTURE22, 
    _TEXTURE21: _TEXTURE21, 
    _TEXTURE20: _TEXTURE20, 
    _TEXTURE19: _TEXTURE19, 
    _TEXTURE18: _TEXTURE18, 
    _TEXTURE17: _TEXTURE17, 
    _TEXTURE16: _TEXTURE16, 
    _TEXTURE15: _TEXTURE15, 
    _TEXTURE14: _TEXTURE14, 
    _TEXTURE13: _TEXTURE13, 
    _TEXTURE12: _TEXTURE12, 
    _TEXTURE11: _TEXTURE11, 
    _TEXTURE10: _TEXTURE10, 
    _TEXTURE9: _TEXTURE9, 
    _TEXTURE8: _TEXTURE8, 
    _TEXTURE7: _TEXTURE7, 
    _TEXTURE6: _TEXTURE6, 
    _TEXTURE5: _TEXTURE5, 
    _TEXTURE4: _TEXTURE4, 
    _TEXTURE3: _TEXTURE3, 
    _TEXTURE2: _TEXTURE2, 
    _TEXTURE1: _TEXTURE1, 
    _TEXTURE0: _TEXTURE0, 
    _MAX_CUBE_MAP_TEXTURE_SIZE: _MAX_CUBE_MAP_TEXTURE_SIZE, 
    _TEXTURE_CUBE_MAP_NEGATIVE_Z: _TEXTURE_CUBE_MAP_NEGATIVE_Z, 
    _TEXTURE_CUBE_MAP_POSITIVE_Z: _TEXTURE_CUBE_MAP_POSITIVE_Z, 
    _TEXTURE_CUBE_MAP_NEGATIVE_Y: _TEXTURE_CUBE_MAP_NEGATIVE_Y, 
    _TEXTURE_CUBE_MAP_POSITIVE_Y: _TEXTURE_CUBE_MAP_POSITIVE_Y, 
    _TEXTURE_CUBE_MAP_NEGATIVE_X: _TEXTURE_CUBE_MAP_NEGATIVE_X, 
    _TEXTURE_CUBE_MAP_POSITIVE_X: _TEXTURE_CUBE_MAP_POSITIVE_X, 
    _TEXTURE_BINDING_CUBE_MAP: _TEXTURE_BINDING_CUBE_MAP, 
    _TEXTURE_CUBE_MAP: _TEXTURE_CUBE_MAP, 
    _TEXTURE: _TEXTURE, 
    _TEXTURE_WRAP_T: _TEXTURE_WRAP_T, 
    _TEXTURE_WRAP_S: _TEXTURE_WRAP_S, 
    _TEXTURE_MIN_FILTER: _TEXTURE_MIN_FILTER, 
    _TEXTURE_MAG_FILTER: _TEXTURE_MAG_FILTER, 
    _LINEAR_MIPMAP_LINEAR: _LINEAR_MIPMAP_LINEAR, 
    _NEAREST_MIPMAP_LINEAR: _NEAREST_MIPMAP_LINEAR, 
    _LINEAR_MIPMAP_NEAREST: _LINEAR_MIPMAP_NEAREST, 
    _NEAREST_MIPMAP_NEAREST: _NEAREST_MIPMAP_NEAREST, 
    _LINEAR: _LINEAR, 
    _NEAREST: _NEAREST, 
    _VERSION: _VERSION, 
    _RENDERER: _RENDERER, 
    _VENDOR: _VENDOR, 
    _DECR_WRAP: _DECR_WRAP, 
    _INCR_WRAP: _INCR_WRAP, 
    _INVERT: _INVERT, 
    _DECR: _DECR, 
    _INCR: _INCR, 
    _REPLACE: _REPLACE, 
    _KEEP: _KEEP, 
    _ALWAYS: _ALWAYS, 
    _GEQUAL: _GEQUAL, 
    _NOTEQUAL: _NOTEQUAL, 
    _GREATER: _GREATER, 
    _LEQUAL: _LEQUAL, 
    _EQUAL: _EQUAL, 
    _LESS: _LESS, 
    _NEVER: _NEVER, 
    _CURRENT_PROGRAM: _CURRENT_PROGRAM, 
    _SHADING_LANGUAGE_VERSION: _SHADING_LANGUAGE_VERSION, 
    _ACTIVE_ATTRIBUTE_MAX_LENGTH: _ACTIVE_ATTRIBUTE_MAX_LENGTH, 
    _ACTIVE_ATTRIBUTES: _ACTIVE_ATTRIBUTES, 
    _ACTIVE_UNIFORM_MAX_LENGTH: _ACTIVE_UNIFORM_MAX_LENGTH, 
    _ACTIVE_UNIFORMS: _ACTIVE_UNIFORMS, 
    _ATTACHED_SHADERS: _ATTACHED_SHADERS, 
    _VALIDATE_STATUS: _VALIDATE_STATUS, 
    _LINK_STATUS: _LINK_STATUS, 
    _DELETE_STATUS: _DELETE_STATUS, 
    _SHADER_TYPE: _SHADER_TYPE, 
    _MAX_FRAGMENT_UNIFORM_VECTORS: _MAX_FRAGMENT_UNIFORM_VECTORS, 
    _MAX_TEXTURE_IMAGE_UNITS: _MAX_TEXTURE_IMAGE_UNITS, 
    _MAX_VERTEX_TEXTURE_IMAGE_UNITS: _MAX_VERTEX_TEXTURE_IMAGE_UNITS, 
    _MAX_COMBINED_TEXTURE_IMAGE_UNITS: _MAX_COMBINED_TEXTURE_IMAGE_UNITS, 
    _MAX_VARYING_VECTORS: _MAX_VARYING_VECTORS, 
    _MAX_VERTEX_UNIFORM_VECTORS: _MAX_VERTEX_UNIFORM_VECTORS, 
    _MAX_VERTEX_ATTRIBS: _MAX_VERTEX_ATTRIBS, 
    _VERTEX_SHADER: _VERTEX_SHADER, 
    _FRAGMENT_SHADER: _FRAGMENT_SHADER, 
    _UNSIGNED_SHORT_5_6_5: _UNSIGNED_SHORT_5_6_5, 
    _UNSIGNED_SHORT_5_5_5_1: _UNSIGNED_SHORT_5_5_5_1, 
    _UNSIGNED_SHORT_4_4_4_4: _UNSIGNED_SHORT_4_4_4_4, 
    _LUMINANCE_ALPHA: _LUMINANCE_ALPHA, 
    _LUMINANCE: _LUMINANCE, 
    _RGBA: _RGBA, 
    _RGB: _RGB, 
    _ALPHA: _ALPHA, 
    _DEPTH_COMPONENT: _DEPTH_COMPONENT, 
    _FLOAT: _FLOAT, 
    _UNSIGNED_INT: _UNSIGNED_INT, 
    _INT: _INT, 
    _UNSIGNED_SHORT: _UNSIGNED_SHORT, 
    _SHORT: _SHORT, 
    _UNSIGNED_BYTE: _UNSIGNED_BYTE, 
    _BYTE: _BYTE, 
    _GENERATE_MIPMAP_HINT: _GENERATE_MIPMAP_HINT, 
    _NICEST: _NICEST, 
    _FASTEST: _FASTEST, 
    _DONT_CARE: _DONT_CARE, 
    _COMPRESSED_TEXTURE_FORMATS: _COMPRESSED_TEXTURE_FORMATS, 
    _NUM_COMPRESSED_TEXTURE_FORMATS: _NUM_COMPRESSED_TEXTURE_FORMATS, 
    _SAMPLE_COVERAGE_INVERT: _SAMPLE_COVERAGE_INVERT, 
    _SAMPLE_COVERAGE_VALUE: _SAMPLE_COVERAGE_VALUE, 
    _SAMPLES: _SAMPLES, 
    _SAMPLE_BUFFERS: _SAMPLE_BUFFERS, 
    _TEXTURE_BINDING_2D: _TEXTURE_BINDING_2D, 
    _POLYGON_OFFSET_FACTOR: _POLYGON_OFFSET_FACTOR, 
    _POLYGON_OFFSET_UNITS: _POLYGON_OFFSET_UNITS, 
    _STENCIL_BITS: _STENCIL_BITS, 
    _DEPTH_BITS: _DEPTH_BITS, 
    _ALPHA_BITS: _ALPHA_BITS, 
    _BLUE_BITS: _BLUE_BITS, 
    _GREEN_BITS: _GREEN_BITS, 
    _RED_BITS: _RED_BITS, 
    _SUBPIXEL_BITS: _SUBPIXEL_BITS, 
    _MAX_VIEWPORT_DIMS: _MAX_VIEWPORT_DIMS, 
    _MAX_TEXTURE_SIZE: _MAX_TEXTURE_SIZE, 
    _PACK_ALIGNMENT: _PACK_ALIGNMENT, 
    _UNPACK_ALIGNMENT: _UNPACK_ALIGNMENT, 
    _COLOR_WRITEMASK: _COLOR_WRITEMASK, 
    _COLOR_CLEAR_VALUE: _COLOR_CLEAR_VALUE, 
    _SCISSOR_BOX: _SCISSOR_BOX, 
    _VIEWPORT: _VIEWPORT, 
    _STENCIL_BACK_WRITEMASK: _STENCIL_BACK_WRITEMASK, 
    _STENCIL_BACK_VALUE_MASK: _STENCIL_BACK_VALUE_MASK, 
    _STENCIL_BACK_REF: _STENCIL_BACK_REF, 
    _STENCIL_BACK_PASS_DEPTH_PASS: _STENCIL_BACK_PASS_DEPTH_PASS, 
    _STENCIL_BACK_PASS_DEPTH_FAIL: _STENCIL_BACK_PASS_DEPTH_FAIL, 
    _STENCIL_BACK_FAIL: _STENCIL_BACK_FAIL, 
    _STENCIL_BACK_FUNC: _STENCIL_BACK_FUNC, 
    _STENCIL_WRITEMASK: _STENCIL_WRITEMASK, 
    _STENCIL_VALUE_MASK: _STENCIL_VALUE_MASK, 
    _STENCIL_REF: _STENCIL_REF, 
    _STENCIL_PASS_DEPTH_PASS: _STENCIL_PASS_DEPTH_PASS, 
    _STENCIL_PASS_DEPTH_FAIL: _STENCIL_PASS_DEPTH_FAIL, 
    _STENCIL_FAIL: _STENCIL_FAIL, 
    _STENCIL_FUNC: _STENCIL_FUNC, 
    _STENCIL_CLEAR_VALUE: _STENCIL_CLEAR_VALUE, 
    _DEPTH_FUNC: _DEPTH_FUNC, 
    _DEPTH_CLEAR_VALUE: _DEPTH_CLEAR_VALUE, 
    _DEPTH_WRITEMASK: _DEPTH_WRITEMASK, 
    _DEPTH_RANGE: _DEPTH_RANGE, 
    _FRONT_FACE: _FRONT_FACE, 
    _CULL_FACE_MODE: _CULL_FACE_MODE, 
    _ALIASED_LINE_WIDTH_RANGE: _ALIASED_LINE_WIDTH_RANGE, 
    _ALIASED_POINT_SIZE_RANGE: _ALIASED_POINT_SIZE_RANGE, 
    _LINE_WIDTH: _LINE_WIDTH, 
    _CCW: _CCW, 
    _CW: _CW, 
    _OUT_OF_MEMORY: _OUT_OF_MEMORY, 
    _INVALID_OPERATION: _INVALID_OPERATION, 
    _INVALID_VALUE: _INVALID_VALUE, 
    _INVALID_ENUM: _INVALID_ENUM, 
    _NO_ERROR: _NO_ERROR, 
    _SAMPLE_COVERAGE: _SAMPLE_COVERAGE, 
    _SAMPLE_ALPHA_TO_COVERAGE: _SAMPLE_ALPHA_TO_COVERAGE, 
    _POLYGON_OFFSET_FILL: _POLYGON_OFFSET_FILL, 
    _SCISSOR_TEST: _SCISSOR_TEST, 
    _DEPTH_TEST: _DEPTH_TEST, 
    _STENCIL_TEST: _STENCIL_TEST, 
    _DITHER: _DITHER, 
    _BLEND: _BLEND, 
    _CULL_FACE: _CULL_FACE, 
    _TEXTURE_2D: _TEXTURE_2D, 
    _FRONT_AND_BACK: _FRONT_AND_BACK, 
    _BACK: _BACK, 
    _FRONT: _FRONT, 
    _CURRENT_VERTEX_ATTRIB: _CURRENT_VERTEX_ATTRIB, 
    _BUFFER_USAGE: _BUFFER_USAGE, 
    _BUFFER_SIZE: _BUFFER_SIZE, 
    _DYNAMIC_DRAW: _DYNAMIC_DRAW, 
    _STATIC_DRAW: _STATIC_DRAW, 
    _STREAM_DRAW: _STREAM_DRAW, 
    _ELEMENT_ARRAY_BUFFER_BINDING: _ELEMENT_ARRAY_BUFFER_BINDING, 
    _ARRAY_BUFFER_BINDING: _ARRAY_BUFFER_BINDING, 
    _ELEMENT_ARRAY_BUFFER: _ELEMENT_ARRAY_BUFFER, 
    _ARRAY_BUFFER: _ARRAY_BUFFER, 
    _BLEND_COLOR: _BLEND_COLOR, 
    _ONE_MINUS_CONSTANT_ALPHA: _ONE_MINUS_CONSTANT_ALPHA, 
    _CONSTANT_ALPHA: _CONSTANT_ALPHA, 
    _ONE_MINUS_CONSTANT_COLOR: _ONE_MINUS_CONSTANT_COLOR, 
    _CONSTANT_COLOR: _CONSTANT_COLOR, 
    _BLEND_SRC_ALPHA: _BLEND_SRC_ALPHA, 
    _BLEND_DST_ALPHA: _BLEND_DST_ALPHA, 
    _BLEND_SRC_RGB: _BLEND_SRC_RGB, 
    _BLEND_DST_RGB: _BLEND_DST_RGB, 
    _FUNC_REVERSE_SUBTRACT: _FUNC_REVERSE_SUBTRACT, 
    _FUNC_SUBTRACT: _FUNC_SUBTRACT, 
    _BLEND_EQUATION_ALPHA: _BLEND_EQUATION_ALPHA, 
    _BLEND_EQUATION_RGB: _BLEND_EQUATION_RGB, 
    _BLEND_EQUATION: _BLEND_EQUATION, 
    _FUNC_ADD: _FUNC_ADD, 
    _SRC_ALPHA_SATURATE: _SRC_ALPHA_SATURATE, 
    _ONE_MINUS_DST_COLOR: _ONE_MINUS_DST_COLOR, 
    _DST_COLOR: _DST_COLOR, 
    _ONE_MINUS_DST_ALPHA: _ONE_MINUS_DST_ALPHA, 
    _DST_ALPHA: _DST_ALPHA, 
    _ONE_MINUS_SRC_ALPHA: _ONE_MINUS_SRC_ALPHA, 
    _SRC_ALPHA: _SRC_ALPHA, 
    _ONE_MINUS_SRC_COLOR: _ONE_MINUS_SRC_COLOR, 
    _SRC_COLOR: _SRC_COLOR, 
    _ONE: _ONE, 
    _ZERO: _ZERO, 
    _TRIANGLE_FAN: _TRIANGLE_FAN, 
    _TRIANGLE_STRIP: _TRIANGLE_STRIP, 
    _TRIANGLES: _TRIANGLES, 
    _LINE_STRIP: _LINE_STRIP, 
    _LINE_LOOP: _LINE_LOOP, 
    _LINES: _LINES, 
    _POINTS: _POINTS, 
    _COLOR_BUFFER_BIT: _COLOR_BUFFER_BIT, 
    _STENCIL_BUFFER_BIT: _STENCIL_BUFFER_BIT, 
    _DEPTH_BUFFER_BIT: _DEPTH_BUFFER_BIT, 
    viewport_: $foreign.viewport_, 
    vertexAttribPointer_: $foreign.vertexAttribPointer_, 
    vertexAttrib4fv_: $foreign.vertexAttrib4fv_, 
    vertexAttrib4f_: $foreign.vertexAttrib4f_, 
    vertexAttrib3fv_: $foreign.vertexAttrib3fv_, 
    vertexAttrib3f_: $foreign.vertexAttrib3f_, 
    vertexAttrib2fv_: $foreign.vertexAttrib2fv_, 
    vertexAttrib2f_: $foreign.vertexAttrib2f_, 
    vertexAttrib1fv_: $foreign.vertexAttrib1fv_, 
    vertexAttrib1f_: $foreign.vertexAttrib1f_, 
    validateProgram_: $foreign.validateProgram_, 
    useProgram_: $foreign.useProgram_, 
    uniformMatrix4fv_: $foreign.uniformMatrix4fv_, 
    uniformMatrix3fv_: $foreign.uniformMatrix3fv_, 
    uniformMatrix2fv_: $foreign.uniformMatrix2fv_, 
    uniform4iv_: $foreign.uniform4iv_, 
    uniform4i_: $foreign.uniform4i_, 
    uniform4fv_: $foreign.uniform4fv_, 
    uniform4f_: $foreign.uniform4f_, 
    uniform3iv_: $foreign.uniform3iv_, 
    uniform3i_: $foreign.uniform3i_, 
    uniform3fv_: $foreign.uniform3fv_, 
    uniform3f_: $foreign.uniform3f_, 
    uniform2iv_: $foreign.uniform2iv_, 
    uniform2i_: $foreign.uniform2i_, 
    uniform2fv_: $foreign.uniform2fv_, 
    uniform2f_: $foreign.uniform2f_, 
    uniform1iv_: $foreign.uniform1iv_, 
    uniform1i_: $foreign.uniform1i_, 
    uniform1fv_: $foreign.uniform1fv_, 
    uniform1f_: $foreign.uniform1f_, 
    texSubImage2D_: $foreign.texSubImage2D_, 
    texParameteri_: $foreign.texParameteri_, 
    texParameterf_: $foreign.texParameterf_, 
    texImage2D_: $foreign.texImage2D_, 
    stencilOpSeparate_: $foreign.stencilOpSeparate_, 
    stencilOp_: $foreign.stencilOp_, 
    stencilMaskSeparate_: $foreign.stencilMaskSeparate_, 
    stencilMask_: $foreign.stencilMask_, 
    stencilFuncSeparate_: $foreign.stencilFuncSeparate_, 
    stencilFunc_: $foreign.stencilFunc_, 
    shaderSource_: $foreign.shaderSource_, 
    scissor_: $foreign.scissor_, 
    sampleCoverage_: $foreign.sampleCoverage_, 
    renderbufferStorage_: $foreign.renderbufferStorage_, 
    readPixels_: $foreign.readPixels_, 
    polygonOffset_: $foreign.polygonOffset_, 
    pixelStorei_: $foreign.pixelStorei_, 
    linkProgram_: $foreign.linkProgram_, 
    lineWidth_: $foreign.lineWidth_, 
    isTexture_: $foreign.isTexture_, 
    isShader_: $foreign.isShader_, 
    isRenderbuffer_: $foreign.isRenderbuffer_, 
    isProgram_: $foreign.isProgram_, 
    isFramebuffer_: $foreign.isFramebuffer_, 
    isEnabled_: $foreign.isEnabled_, 
    isBuffer_: $foreign.isBuffer_, 
    hint_: $foreign.hint_, 
    getVertexAttribOffset_: $foreign.getVertexAttribOffset_, 
    getVertexAttrib_: $foreign.getVertexAttrib_, 
    getUniformLocation_: $foreign.getUniformLocation_, 
    getUniform_: $foreign.getUniform_, 
    getTexParameter_: $foreign.getTexParameter_, 
    getShaderSource_: $foreign.getShaderSource_, 
    getShaderInfoLog_: $foreign.getShaderInfoLog_, 
    getShaderParameter_: $foreign.getShaderParameter_, 
    getRenderbufferParameter_: $foreign.getRenderbufferParameter_, 
    getProgramInfoLog_: $foreign.getProgramInfoLog_, 
    getProgramParameter_: $foreign.getProgramParameter_, 
    getFramebufferAttachmentParameter_: $foreign.getFramebufferAttachmentParameter_, 
    getError_: $foreign.getError_, 
    getBufferParameter_: $foreign.getBufferParameter_, 
    getParameter_: $foreign.getParameter_, 
    getAttribLocation_: $foreign.getAttribLocation_, 
    getAttachedShaders_: $foreign.getAttachedShaders_, 
    getActiveUniform_: $foreign.getActiveUniform_, 
    getActiveAttrib_: $foreign.getActiveAttrib_, 
    generateMipmap_: $foreign.generateMipmap_, 
    frontFace_: $foreign.frontFace_, 
    framebufferTexture2D_: $foreign.framebufferTexture2D_, 
    framebufferRenderbuffer_: $foreign.framebufferRenderbuffer_, 
    flush_: $foreign.flush_, 
    finish_: $foreign.finish_, 
    enableVertexAttribArray_: $foreign.enableVertexAttribArray_, 
    enable_: $foreign.enable_, 
    drawElements_: $foreign.drawElements_, 
    drawArrays_: $foreign.drawArrays_, 
    disableVertexAttribArray_: $foreign.disableVertexAttribArray_, 
    disable_: $foreign.disable_, 
    detachShader_: $foreign.detachShader_, 
    depthRange_: $foreign.depthRange_, 
    depthMask_: $foreign.depthMask_, 
    depthFunc_: $foreign.depthFunc_, 
    deleteTexture_: $foreign.deleteTexture_, 
    deleteShader_: $foreign.deleteShader_, 
    deleteRenderbuffer_: $foreign.deleteRenderbuffer_, 
    deleteProgram_: $foreign.deleteProgram_, 
    deleteFramebuffer_: $foreign.deleteFramebuffer_, 
    deleteBuffer_: $foreign.deleteBuffer_, 
    cullFace_: $foreign.cullFace_, 
    createTexture_: $foreign.createTexture_, 
    createShader_: $foreign.createShader_, 
    createRenderbuffer_: $foreign.createRenderbuffer_, 
    createProgram_: $foreign.createProgram_, 
    createFramebuffer_: $foreign.createFramebuffer_, 
    createBuffer_: $foreign.createBuffer_, 
    copyTexSubImage2D_: $foreign.copyTexSubImage2D_, 
    copyTexImage2D_: $foreign.copyTexImage2D_, 
    compileShader_: $foreign.compileShader_, 
    colorMask_: $foreign.colorMask_, 
    clearStencil_: $foreign.clearStencil_, 
    clearDepth_: $foreign.clearDepth_, 
    clearColor_: $foreign.clearColor_, 
    clear_: $foreign.clear_, 
    checkFramebufferStatus_: $foreign.checkFramebufferStatus_, 
    bufferSubData_: $foreign.bufferSubData_, 
    bufferData_: $foreign.bufferData_, 
    blendFuncSeparate_: $foreign.blendFuncSeparate_, 
    blendFunc_: $foreign.blendFunc_, 
    blendEquationSeparate_: $foreign.blendEquationSeparate_, 
    blendEquation_: $foreign.blendEquation_, 
    blendColor_: $foreign.blendColor_, 
    bindTexture_: $foreign.bindTexture_, 
    bindRenderbuffer_: $foreign.bindRenderbuffer_, 
    bindFramebuffer_: $foreign.bindFramebuffer_, 
    bindBuffer_: $foreign.bindBuffer_, 
    bindAttribLocation_: $foreign.bindAttribLocation_, 
    attachShader_: $foreign.attachShader_, 
    activeTexture_: $foreign.activeTexture_, 
    getExtension_: $foreign.getExtension_, 
    getSupportedExtensions_: $foreign.getSupportedExtensions_, 
    isContextLost_: $foreign.isContextLost_, 
    getContextAttributes_: $foreign.getContextAttributes_
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLRaw/foreign.js","Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","Control.Monad.Eff.WebGL":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/index.js","Data.ArrayBuffer.Types":"/Users/gene/Programming/pure_morph/output/Data.ArrayBuffer.Types/index.js","Data.Function":"/Users/gene/Programming/pure_morph/output/Data.Function/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLTexture/foreign.js":[function(require,module,exports){
/* global exports */

// module Graphics.WebGLTexture


    "use strict";

    exports.loadImage_ = function(name,continuation)
       {return function()
        {var i = new Image();
         i.src = name;
         i.onload = continuation (i);
          };};

    exports.texImage2D__ = function(target,level,internalformat,format,type,pixels)
               {return function()
                {gl.texImage2D(target,level,internalformat,format,type,pixels);};};

    exports.texImage2DNull_ = function(target,level,internalformat,width,height,border,format,type)
               {return function()
                {gl.texImage2D(target,level,internalformat,width,height,border,format,type,null);};};

    exports.bindTexture__ = function(target)
        {return function()
         {gl.bindTexture(target,null);};};

},{}],"/Users/gene/Programming/pure_morph/output/Graphics.WebGLTexture/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff_WebGL = require("Control.Monad.Eff.WebGL");
var Graphics_WebGL = require("Graphics.WebGL");
var Graphics_WebGLRaw = require("Graphics.WebGLRaw");
var Data_Int_Bits = require("Data.Int.Bits");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad = require("Control.Monad");
var Extensions = require("Extensions");
var Data_Function = require("Data.Function");
var WebGLTex = function (x) {
    return x;
};
var UNSIGNED_BYTE = (function () {
    function UNSIGNED_BYTE() {

    };
    UNSIGNED_BYTE.value = new UNSIGNED_BYTE();
    return UNSIGNED_BYTE;
})();
var RGBA = (function () {
    function RGBA() {

    };
    RGBA.value = new RGBA();
    return RGBA;
})();
var FLOAT = (function () {
    function FLOAT() {

    };
    FLOAT.value = new FLOAT();
    return FLOAT;
})();
var UNSIGNED_SHORT_5_6_5 = (function () {
    function UNSIGNED_SHORT_5_6_5() {

    };
    UNSIGNED_SHORT_5_6_5.value = new UNSIGNED_SHORT_5_6_5();
    return UNSIGNED_SHORT_5_6_5;
})();
var UNSIGNED_SHORT_4_4_4_4 = (function () {
    function UNSIGNED_SHORT_4_4_4_4() {

    };
    UNSIGNED_SHORT_4_4_4_4.value = new UNSIGNED_SHORT_4_4_4_4();
    return UNSIGNED_SHORT_4_4_4_4;
})();
var UNSIGNED_SHORT_5_5_5_1 = (function () {
    function UNSIGNED_SHORT_5_5_5_1() {

    };
    UNSIGNED_SHORT_5_5_5_1.value = new UNSIGNED_SHORT_5_5_5_1();
    return UNSIGNED_SHORT_5_5_5_1;
})();
var TTEXTURE_2D = (function () {
    function TTEXTURE_2D() {

    };
    TTEXTURE_2D.value = new TTEXTURE_2D();
    return TTEXTURE_2D;
})();
var TTEXTURE_CUBE_MAP = (function () {
    function TTEXTURE_CUBE_MAP() {

    };
    TTEXTURE_CUBE_MAP.value = new TTEXTURE_CUBE_MAP();
    return TTEXTURE_CUBE_MAP;
})();
var TEXTURE_MIN_FILTER = (function () {
    function TEXTURE_MIN_FILTER() {

    };
    TEXTURE_MIN_FILTER.value = new TEXTURE_MIN_FILTER();
    return TEXTURE_MIN_FILTER;
})();
var TEXTURE_MAG_FILTER = (function () {
    function TEXTURE_MAG_FILTER() {

    };
    TEXTURE_MAG_FILTER.value = new TEXTURE_MAG_FILTER();
    return TEXTURE_MAG_FILTER;
})();
var TEXTURE_WRAP_S = (function () {
    function TEXTURE_WRAP_S() {

    };
    TEXTURE_WRAP_S.value = new TEXTURE_WRAP_S();
    return TEXTURE_WRAP_S;
})();
var TEXTURE_WRAP_T = (function () {
    function TEXTURE_WRAP_T() {

    };
    TEXTURE_WRAP_T.value = new TEXTURE_WRAP_T();
    return TEXTURE_WRAP_T;
})();
var NEAREST = (function () {
    function NEAREST() {

    };
    NEAREST.value = new NEAREST();
    return NEAREST;
})();
var LINEAR = (function () {
    function LINEAR() {

    };
    LINEAR.value = new LINEAR();
    return LINEAR;
})();
var MIPMAP = (function () {
    function MIPMAP() {

    };
    MIPMAP.value = new MIPMAP();
    return MIPMAP;
})();
var TEXTURE_2D = (function () {
    function TEXTURE_2D() {

    };
    TEXTURE_2D.value = new TEXTURE_2D();
    return TEXTURE_2D;
})();
var TEXTURE_CUBE_MAP_POSITIVE_X = (function () {
    function TEXTURE_CUBE_MAP_POSITIVE_X() {

    };
    TEXTURE_CUBE_MAP_POSITIVE_X.value = new TEXTURE_CUBE_MAP_POSITIVE_X();
    return TEXTURE_CUBE_MAP_POSITIVE_X;
})();
var TEXTURE_CUBE_MAP_NEGATIVE_X = (function () {
    function TEXTURE_CUBE_MAP_NEGATIVE_X() {

    };
    TEXTURE_CUBE_MAP_NEGATIVE_X.value = new TEXTURE_CUBE_MAP_NEGATIVE_X();
    return TEXTURE_CUBE_MAP_NEGATIVE_X;
})();
var TEXTURE_CUBE_MAP_POSITIVE_Y = (function () {
    function TEXTURE_CUBE_MAP_POSITIVE_Y() {

    };
    TEXTURE_CUBE_MAP_POSITIVE_Y.value = new TEXTURE_CUBE_MAP_POSITIVE_Y();
    return TEXTURE_CUBE_MAP_POSITIVE_Y;
})();
var TEXTURE_CUBE_MAP_NEGATIVE_Y = (function () {
    function TEXTURE_CUBE_MAP_NEGATIVE_Y() {

    };
    TEXTURE_CUBE_MAP_NEGATIVE_Y.value = new TEXTURE_CUBE_MAP_NEGATIVE_Y();
    return TEXTURE_CUBE_MAP_NEGATIVE_Y;
})();
var TEXTURE_CUBE_MAP_POSITIVE_Z = (function () {
    function TEXTURE_CUBE_MAP_POSITIVE_Z() {

    };
    TEXTURE_CUBE_MAP_POSITIVE_Z.value = new TEXTURE_CUBE_MAP_POSITIVE_Z();
    return TEXTURE_CUBE_MAP_POSITIVE_Z;
})();
var TEXTURE_CUBE_MAP_NEGATIVE_Z = (function () {
    function TEXTURE_CUBE_MAP_NEGATIVE_Z() {

    };
    TEXTURE_CUBE_MAP_NEGATIVE_Z.value = new TEXTURE_CUBE_MAP_NEGATIVE_Z();
    return TEXTURE_CUBE_MAP_NEGATIVE_Z;
})();
var PACK_ALIGNMENT = (function () {
    function PACK_ALIGNMENT() {

    };
    PACK_ALIGNMENT.value = new PACK_ALIGNMENT();
    return PACK_ALIGNMENT;
})();
var UNPACK_ALIGNMENT = (function () {
    function UNPACK_ALIGNMENT() {

    };
    UNPACK_ALIGNMENT.value = new UNPACK_ALIGNMENT();
    return UNPACK_ALIGNMENT;
})();
var UNPACK_FLIP_Y_WEBGL = (function () {
    function UNPACK_FLIP_Y_WEBGL() {

    };
    UNPACK_FLIP_Y_WEBGL.value = new UNPACK_FLIP_Y_WEBGL();
    return UNPACK_FLIP_Y_WEBGL;
})();
var UNPACK_PREMULTIPLY_ALPHA_WEBGL = (function () {
    function UNPACK_PREMULTIPLY_ALPHA_WEBGL() {

    };
    UNPACK_PREMULTIPLY_ALPHA_WEBGL.value = new UNPACK_PREMULTIPLY_ALPHA_WEBGL();
    return UNPACK_PREMULTIPLY_ALPHA_WEBGL;
})();
var UNPACK_COLORSPACE_CONVERSION_WEBGL = (function () {
    function UNPACK_COLORSPACE_CONVERSION_WEBGL() {

    };
    UNPACK_COLORSPACE_CONVERSION_WEBGL.value = new UNPACK_COLORSPACE_CONVERSION_WEBGL();
    return UNPACK_COLORSPACE_CONVERSION_WEBGL;
})();
var IF_ALPHA = (function () {
    function IF_ALPHA() {

    };
    IF_ALPHA.value = new IF_ALPHA();
    return IF_ALPHA;
})();
var IF_LUMINANCE = (function () {
    function IF_LUMINANCE() {

    };
    IF_LUMINANCE.value = new IF_LUMINANCE();
    return IF_LUMINANCE;
})();
var IF_LUMINANCE_ALPHA = (function () {
    function IF_LUMINANCE_ALPHA() {

    };
    IF_LUMINANCE_ALPHA.value = new IF_LUMINANCE_ALPHA();
    return IF_LUMINANCE_ALPHA;
})();
var IF_RGB = (function () {
    function IF_RGB() {

    };
    IF_RGB.value = new IF_RGB();
    return IF_RGB;
})();
var IF_RGBA = (function () {
    function IF_RGBA() {

    };
    IF_RGBA.value = new IF_RGBA();
    return IF_RGBA;
})();
var uniform1i = Data_Function.runFn2(Graphics_WebGLRaw.uniform1i_);
var textureTypeToConst = function (v) {
    if (v instanceof UNSIGNED_BYTE) {
        return Graphics_WebGLRaw._UNSIGNED_BYTE;
    };
    if (v instanceof RGBA) {
        return Graphics_WebGLRaw._RGBA;
    };
    if (v instanceof FLOAT) {
        return Graphics_WebGLRaw._FLOAT;
    };
    if (v instanceof UNSIGNED_SHORT_5_6_5) {
        return Graphics_WebGLRaw._UNSIGNED_SHORT_5_6_5;
    };
    if (v instanceof UNSIGNED_SHORT_4_4_4_4) {
        return Graphics_WebGLRaw._UNSIGNED_SHORT_4_4_4_4;
    };
    if (v instanceof UNSIGNED_SHORT_5_5_5_1) {
        return Graphics_WebGLRaw._UNSIGNED_SHORT_5_5_5_1;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 91, column 1 - line 92, column 1: " + [ v.constructor.name ]);
};
var texTargetToConst = function (v) {
    if (v instanceof TTEXTURE_2D) {
        return Graphics_WebGLRaw._TEXTURE_2D;
    };
    if (v instanceof TTEXTURE_CUBE_MAP) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 117, column 1 - line 118, column 1: " + [ v.constructor.name ]);
};
var texParNameToConst = function (v) {
    if (v instanceof TEXTURE_MIN_FILTER) {
        return Graphics_WebGLRaw._TEXTURE_MIN_FILTER;
    };
    if (v instanceof TEXTURE_MAG_FILTER) {
        return Graphics_WebGLRaw._TEXTURE_MAG_FILTER;
    };
    if (v instanceof TEXTURE_WRAP_S) {
        return Graphics_WebGLRaw._TEXTURE_WRAP_S;
    };
    if (v instanceof TEXTURE_WRAP_T) {
        return Graphics_WebGLRaw._TEXTURE_WRAP_T;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 128, column 1 - line 129, column 1: " + [ v.constructor.name ]);
};
var texParameteri = function (target) {
    return function (pname) {
        return function (param) {
            return Graphics_WebGLRaw.texParameteri_(texTargetToConst(target), texParNameToConst(pname), param);
        };
    };
};
var texFilterSpecToMinConst = function (v) {
    if (v instanceof NEAREST) {
        return Graphics_WebGLRaw._NEAREST;
    };
    if (v instanceof LINEAR) {
        return Graphics_WebGLRaw._LINEAR;
    };
    if (v instanceof MIPMAP) {
        return Graphics_WebGLRaw._LINEAR_MIPMAP_NEAREST;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 145, column 1 - line 146, column 1: " + [ v.constructor.name ]);
};
var texFilterSpecToMagConst = function (v) {
    if (v instanceof NEAREST) {
        return Graphics_WebGLRaw._NEAREST;
    };
    if (v instanceof LINEAR) {
        return Graphics_WebGLRaw._LINEAR;
    };
    if (v instanceof MIPMAP) {
        return Graphics_WebGLRaw._LINEAR;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 140, column 1 - line 141, column 1: " + [ v.constructor.name ]);
};
var targetTypeToConst = function (v) {
    if (v instanceof TEXTURE_2D) {
        return Graphics_WebGLRaw._TEXTURE_2D;
    };
    if (v instanceof TEXTURE_CUBE_MAP_POSITIVE_X) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP_POSITIVE_X;
    };
    if (v instanceof TEXTURE_CUBE_MAP_NEGATIVE_X) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP_NEGATIVE_X;
    };
    if (v instanceof TEXTURE_CUBE_MAP_POSITIVE_Y) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP_POSITIVE_Y;
    };
    if (v instanceof TEXTURE_CUBE_MAP_NEGATIVE_Y) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP_NEGATIVE_Y;
    };
    if (v instanceof TEXTURE_CUBE_MAP_POSITIVE_Z) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP_POSITIVE_Z;
    };
    if (v instanceof TEXTURE_CUBE_MAP_NEGATIVE_Z) {
        return Graphics_WebGLRaw._TEXTURE_CUBE_MAP_NEGATIVE_Z;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 60, column 1 - line 61, column 1: " + [ v.constructor.name ]);
};
var unbindTexture = function (tt) {
    return $foreign.bindTexture__(targetTypeToConst(tt));
};
var symbolicParameterToConst = function (v) {
    if (v instanceof PACK_ALIGNMENT) {
        return Graphics_WebGLRaw._PACK_ALIGNMENT;
    };
    if (v instanceof UNPACK_ALIGNMENT) {
        return Graphics_WebGLRaw._UNPACK_ALIGNMENT;
    };
    if (v instanceof UNPACK_FLIP_Y_WEBGL) {
        return Graphics_WebGLRaw._UNPACK_FLIP_Y_WEBGL;
    };
    if (v instanceof UNPACK_PREMULTIPLY_ALPHA_WEBGL) {
        return Graphics_WebGLRaw._UNPACK_PREMULTIPLY_ALPHA_WEBGL;
    };
    if (v instanceof UNPACK_COLORSPACE_CONVERSION_WEBGL) {
        return Graphics_WebGLRaw._UNPACK_COLORSPACE_CONVERSION_WEBGL;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 106, column 1 - line 107, column 1: " + [ v.constructor.name ]);
};
var pixelStorei = function (symbolicParameter) {
    return function (num) {
        return Graphics_WebGLRaw.pixelStorei_(symbolicParameterToConst(symbolicParameter), num);
    };
};
var internalFormatToConst = function (v) {
    if (v instanceof IF_ALPHA) {
        return Graphics_WebGLRaw._ALPHA;
    };
    if (v instanceof IF_LUMINANCE) {
        return Graphics_WebGLRaw._LUMINANCE;
    };
    if (v instanceof IF_LUMINANCE_ALPHA) {
        return Graphics_WebGLRaw._LUMINANCE_ALPHA;
    };
    if (v instanceof IF_RGB) {
        return Graphics_WebGLRaw._RGB;
    };
    if (v instanceof IF_RGBA) {
        return Graphics_WebGLRaw._RGBA;
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 76, column 1 - line 77, column 1: " + [ v.constructor.name ]);
};
var texImage2D = function (target) {
    return function (level) {
        return function (internalFormat) {
            return function (format) {
                return function (typ) {
                    return function (pixels) {
                        return $foreign.texImage2D__(targetTypeToConst(target), level, internalFormatToConst(internalFormat), internalFormatToConst(format), textureTypeToConst(typ), pixels);
                    };
                };
            };
        };
    };
};
var texImage2DNull = function (target) {
    return function (level) {
        return function (internalFormat) {
            return function (width) {
                return function (height) {
                    return function (format) {
                        return function (typ) {
                            return $foreign.texImage2DNull_(targetTypeToConst(target), level, internalFormatToConst(internalFormat), width, height, 0, internalFormatToConst(format), textureTypeToConst(typ));
                        };
                    };
                };
            };
        };
    };
};
var createTexture = function __do() {
    var v = Graphics_WebGLRaw.createTexture_()();
    return v;
};
var bindTexture = function (tt) {
    return function (v) {
        return Graphics_WebGLRaw.bindTexture_(targetTypeToConst(tt), v);
    };
};
var handleLoad2D = function (texture) {
    return function (filterSpec) {
        return function (whatever) {
            return function __do() {
                bindTexture(TEXTURE_2D.value)(texture)();
                pixelStorei(UNPACK_FLIP_Y_WEBGL.value)(1)();
                texImage2D(TEXTURE_2D.value)(0)(IF_RGBA.value)(IF_RGBA.value)(UNSIGNED_BYTE.value)(whatever)();
                texParameteri(TTEXTURE_2D.value)(TEXTURE_MAG_FILTER.value)(texFilterSpecToMagConst(filterSpec))();
                texParameteri(TTEXTURE_2D.value)(TEXTURE_MIN_FILTER.value)(texFilterSpecToMinConst(filterSpec))();
                (function () {
                    if (filterSpec instanceof MIPMAP) {
                        return Graphics_WebGLRaw.generateMipmap_(Graphics_WebGLRaw._TEXTURE_2D);
                    };
                    return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                })()();
                return unbindTexture(TEXTURE_2D.value)();
            };
        };
    };
};
var texture2DFor = function (name) {
    return function (filterSpec) {
        return function (continuation) {
            return function __do() {
                var v = createTexture();
                return $foreign.loadImage_(name, function (image) {
                    return function __do() {
                        handleLoad2D(v)(filterSpec)(image)();
                        return continuation(v)();
                    };
                })();
            };
        };
    };
};
var newTexture = function (width) {
    return function (height) {
        return function (filterSpec) {
            return function __do() {
                var v = createTexture();
                bindTexture(TEXTURE_2D.value)(v)();
                texParameteri(TTEXTURE_2D.value)(TEXTURE_MAG_FILTER.value)(texFilterSpecToMagConst(filterSpec))();
                texParameteri(TTEXTURE_2D.value)(TEXTURE_MIN_FILTER.value)(texFilterSpecToMinConst(filterSpec))();
                Control_Monad.when(Control_Monad_Eff.monadEff)(((width | height) & 1) === 1)(function __do() {
                    texParameteri(TTEXTURE_2D.value)(TEXTURE_WRAP_S.value)(Graphics_WebGLRaw._CLAMP_TO_EDGE)();
                    return texParameteri(TTEXTURE_2D.value)(TEXTURE_WRAP_T.value)(Graphics_WebGLRaw._CLAMP_TO_EDGE)();
                })();
                texImage2DNull(TEXTURE_2D.value)(0)(IF_RGBA.value)(width)(height)(IF_RGBA.value)(UNSIGNED_BYTE.value)();
                (function () {
                    if (filterSpec instanceof MIPMAP) {
                        return Graphics_WebGLRaw.generateMipmap_(Graphics_WebGLRaw._TEXTURE_2D);
                    };
                    return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                })()();
                unbindTexture(TEXTURE_2D.value)();
                return v;
            };
        };
    };
};
var activeTexture = function (n) {
    if (n < Graphics_WebGLRaw._MAX_COMBINED_TEXTURE_IMAGE_UNITS) {
        return Graphics_WebGLRaw.activeTexture_(Graphics_WebGLRaw._TEXTURE0 + n | 0);
    };
    if (Prelude.otherwise) {
        return Extensions.fail("WebGLTexture>>activeTexture: wrong argument!");
    };
    throw new Error("Failed pattern match at Graphics.WebGLTexture line 215, column 1 - line 216, column 1: " + [ n.constructor.name ]);
};
var withTexture2D = function (texture) {
    return function (index) {
        return function (v) {
            return function (pos) {
                return function __do() {
                    activeTexture(index)();
                    bindTexture(TEXTURE_2D.value)(texture)();
                    return uniform1i(v.uLocation)(pos)();
                };
            };
        };
    };
};
module.exports = {
    NEAREST: NEAREST, 
    LINEAR: LINEAR, 
    MIPMAP: MIPMAP, 
    WebGLTex: WebGLTex, 
    TEXTURE_MIN_FILTER: TEXTURE_MIN_FILTER, 
    TEXTURE_MAG_FILTER: TEXTURE_MAG_FILTER, 
    TEXTURE_WRAP_S: TEXTURE_WRAP_S, 
    TEXTURE_WRAP_T: TEXTURE_WRAP_T, 
    TTEXTURE_2D: TTEXTURE_2D, 
    TTEXTURE_CUBE_MAP: TTEXTURE_CUBE_MAP, 
    PACK_ALIGNMENT: PACK_ALIGNMENT, 
    UNPACK_ALIGNMENT: UNPACK_ALIGNMENT, 
    UNPACK_FLIP_Y_WEBGL: UNPACK_FLIP_Y_WEBGL, 
    UNPACK_PREMULTIPLY_ALPHA_WEBGL: UNPACK_PREMULTIPLY_ALPHA_WEBGL, 
    UNPACK_COLORSPACE_CONVERSION_WEBGL: UNPACK_COLORSPACE_CONVERSION_WEBGL, 
    UNSIGNED_BYTE: UNSIGNED_BYTE, 
    RGBA: RGBA, 
    FLOAT: FLOAT, 
    UNSIGNED_SHORT_5_6_5: UNSIGNED_SHORT_5_6_5, 
    UNSIGNED_SHORT_4_4_4_4: UNSIGNED_SHORT_4_4_4_4, 
    UNSIGNED_SHORT_5_5_5_1: UNSIGNED_SHORT_5_5_5_1, 
    IF_ALPHA: IF_ALPHA, 
    IF_LUMINANCE: IF_LUMINANCE, 
    IF_LUMINANCE_ALPHA: IF_LUMINANCE_ALPHA, 
    IF_RGB: IF_RGB, 
    IF_RGBA: IF_RGBA, 
    TEXTURE_2D: TEXTURE_2D, 
    TEXTURE_CUBE_MAP_POSITIVE_X: TEXTURE_CUBE_MAP_POSITIVE_X, 
    TEXTURE_CUBE_MAP_NEGATIVE_X: TEXTURE_CUBE_MAP_NEGATIVE_X, 
    TEXTURE_CUBE_MAP_POSITIVE_Y: TEXTURE_CUBE_MAP_POSITIVE_Y, 
    TEXTURE_CUBE_MAP_NEGATIVE_Y: TEXTURE_CUBE_MAP_NEGATIVE_Y, 
    TEXTURE_CUBE_MAP_POSITIVE_Z: TEXTURE_CUBE_MAP_POSITIVE_Z, 
    TEXTURE_CUBE_MAP_NEGATIVE_Z: TEXTURE_CUBE_MAP_NEGATIVE_Z, 
    targetTypeToConst: targetTypeToConst, 
    newTexture: newTexture, 
    createTexture: createTexture, 
    handleLoad2D: handleLoad2D, 
    unbindTexture: unbindTexture, 
    bindTexture: bindTexture, 
    activeTexture: activeTexture, 
    withTexture2D: withTexture2D, 
    texture2DFor: texture2DFor
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLTexture/foreign.js","Control.Monad":"/Users/gene/Programming/pure_morph/output/Control.Monad/index.js","Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","Control.Monad.Eff.WebGL":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.WebGL/index.js","Data.Function":"/Users/gene/Programming/pure_morph/output/Data.Function/index.js","Data.Int.Bits":"/Users/gene/Programming/pure_morph/output/Data.Int.Bits/index.js","Extensions":"/Users/gene/Programming/pure_morph/output/Extensions/index.js","Graphics.WebGL":"/Users/gene/Programming/pure_morph/output/Graphics.WebGL/index.js","Graphics.WebGLRaw":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLRaw/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Main/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Prelude = require("Prelude");
var Graphics_WebGLAll = require("Graphics.WebGLAll");
var Data_Matrix4 = require("Data.Matrix4");
var Data_Matrix = require("Data.Matrix");
var Data_Vector3 = require("Data.Vector3");
var Control_Monad_Eff_Alert = require("Control.Monad.Eff.Alert");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Data_Int = require("Data.Int");
var Graphics_WebGL = require("Graphics.WebGL");
var shaders = new Graphics_WebGL.Shaders("precision mediump float;\n\n  void main(void) {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      }\n  ", "\n      attribute vec3 aVertexPosition;\n\n      uniform mat4 uMVMatrix;\n      uniform mat4 uPMatrix;\n\n      void main(void) {\n          gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      }\n  ");
var main = Graphics_WebGL.runWebGL("glcanvas")(function (s) {
    return Control_Monad_Eff_Alert.alert(s);
})(function (context) {
    return function __do() {
        Control_Monad_Eff_Console.log("WebGL ready")();
        return Graphics_WebGL.withShaders(shaders)(function (s) {
            return Control_Monad_Eff_Alert.alert(s);
        })(function (bindings) {
            return function __do() {
                Control_Monad_Eff_Console.log("Shaders and bindings ready")();
                Graphics_WebGL.clearColor(0.0)(0.0)(0.0)(1.0)();
                Graphics_WebGL.enable(Graphics_WebGL.DEPTH_TEST.value)();
                var v = Graphics_WebGL.getCanvasWidth(context)();
                var v1 = Graphics_WebGL.getCanvasHeight(context)();
                Graphics_WebGL.viewport(0)(0)(v)(v1)();
                Graphics_WebGL.clear([ Graphics_WebGL.COLOR_BUFFER_BIT.value, Graphics_WebGL.DEPTH_BUFFER_BIT.value ])();
                var pMatrix = Data_Matrix4.makePerspective(45.0)(Data_Int.toNumber(v) / Data_Int.toNumber(v1))(0.1)(100.0);
                Graphics_WebGL.setUniformFloats(bindings.uPMatrix)(Data_Matrix.toArray(pMatrix))();
                var mvMatrix = Data_Matrix4.translate(Data_Vector3.vec3(-1.5)(0.0)(-7.0))(Data_Matrix4.identity);
                Graphics_WebGL.setUniformFloats(bindings.uMVMatrix)(Data_Matrix.toArray(mvMatrix))();
                var v2 = Graphics_WebGL.makeBufferFloat([ 0.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0 ])();
                Graphics_WebGL.drawArr(Graphics_WebGL.TRIANGLES.value)(v2)(bindings.aVertexPosition)();
                var mvMatrix$prime = Data_Matrix4.translate(Data_Vector3.vec3(3.0)(0.0)(0.0))(mvMatrix);
                Graphics_WebGL.setUniformFloats(bindings.uMVMatrix)(Data_Matrix.toArray(mvMatrix$prime))();
                var v3 = Graphics_WebGL.makeBufferFloat([ 1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 0.0 ])();
                Graphics_WebGL.drawArr(Graphics_WebGL.TRIANGLE_STRIP.value)(v3)(bindings.aVertexPosition)();
                return Control_Monad_Eff_Console.log("WebGL completed")();
            };
        })();
    };
});
module.exports = {
    main: main, 
    shaders: shaders
};

},{"Control.Monad.Eff":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff/index.js","Control.Monad.Eff.Alert":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Alert/index.js","Control.Monad.Eff.Console":"/Users/gene/Programming/pure_morph/output/Control.Monad.Eff.Console/index.js","Data.Int":"/Users/gene/Programming/pure_morph/output/Data.Int/index.js","Data.Matrix":"/Users/gene/Programming/pure_morph/output/Data.Matrix/index.js","Data.Matrix4":"/Users/gene/Programming/pure_morph/output/Data.Matrix4/index.js","Data.Vector3":"/Users/gene/Programming/pure_morph/output/Data.Vector3/index.js","Graphics.WebGL":"/Users/gene/Programming/pure_morph/output/Graphics.WebGL/index.js","Graphics.WebGLAll":"/Users/gene/Programming/pure_morph/output/Graphics.WebGLAll/index.js","Prelude":"/Users/gene/Programming/pure_morph/output/Prelude/index.js"}],"/Users/gene/Programming/pure_morph/output/Math/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Math

exports.abs = Math.abs;

exports.acos = Math.acos;

exports.asin = Math.asin;

exports.atan = Math.atan;

exports.atan2 = function (y) {
  return function (x) {
    return Math.atan2(y, x);
  };
};

exports.ceil = Math.ceil;

exports.cos = Math.cos;

exports.exp = Math.exp;

exports.floor = Math.floor;

exports.log = Math.log;

exports.max = function (n1) {
  return function (n2) {
    return Math.max(n1, n2);
  };
};

exports.min = function (n1) {
  return function (n2) {
    return Math.min(n1, n2);
  };
};

exports.pow = function (n) {
  return function (p) {
    return Math.pow(n, p);
  };
};

exports["%"] = function(n) {
  return function(m) {
    return n % m;
  };
};

exports.round = Math.round;

exports.sin = Math.sin;

exports.sqrt = Math.sqrt;

exports.tan = Math.tan;

exports.e = Math.E;

exports.ln2 = Math.LN2;

exports.ln10 = Math.LN10;

exports.log2e = Math.LOG2E;

exports.log10e = Math.LOG10E;

exports.pi = Math.PI;

exports.sqrt1_2 = Math.SQRT1_2;

exports.sqrt2 = Math.SQRT2;

},{}],"/Users/gene/Programming/pure_morph/output/Math/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
module.exports = {
    sqrt2: $foreign.sqrt2, 
    sqrt1_2: $foreign.sqrt1_2, 
    pi: $foreign.pi, 
    log10e: $foreign.log10e, 
    log2e: $foreign.log2e, 
    ln10: $foreign.ln10, 
    ln2: $foreign.ln2, 
    e: $foreign.e, 
    "%": $foreign["%"], 
    tan: $foreign.tan, 
    sqrt: $foreign.sqrt, 
    sin: $foreign.sin, 
    round: $foreign.round, 
    pow: $foreign.pow, 
    min: $foreign.min, 
    max: $foreign.max, 
    log: $foreign.log, 
    floor: $foreign.floor, 
    exp: $foreign.exp, 
    cos: $foreign.cos, 
    ceil: $foreign.ceil, 
    atan2: $foreign.atan2, 
    atan: $foreign.atan, 
    asin: $foreign.asin, 
    acos: $foreign.acos, 
    abs: $foreign.abs
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Math/foreign.js"}],"/Users/gene/Programming/pure_morph/output/Prelude/foreign.js":[function(require,module,exports){
/* global exports */
"use strict";

// module Prelude

//- Functor --------------------------------------------------------------------

exports.arrayMap = function (f) {
  return function (arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

//- Bind -----------------------------------------------------------------------

exports.arrayBind = function (arr) {
  return function (f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

//- Monoid ---------------------------------------------------------------------

exports.concatString = function (s1) {
  return function (s2) {
    return s1 + s2;
  };
};

exports.concatArray = function (xs) {
  return function (ys) {
    return xs.concat(ys);
  };
};

//- Semiring -------------------------------------------------------------------

exports.intAdd = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x + y | 0;
  };
};

exports.intMul = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x * y | 0;
  };
};

exports.numAdd = function (n1) {
  return function (n2) {
    return n1 + n2;
  };
};

exports.numMul = function (n1) {
  return function (n2) {
    return n1 * n2;
  };
};

//- ModuloSemiring -------------------------------------------------------------

exports.intDiv = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x / y | 0;
  };
};

exports.intMod = function (x) {
  return function (y) {
    return x % y;
  };
};

exports.numDiv = function (n1) {
  return function (n2) {
    return n1 / n2;
  };
};

//- Ring -----------------------------------------------------------------------

exports.intSub = function (x) {
  return function (y) {
    /* jshint bitwise: false */
    return x - y | 0;
  };
};

exports.numSub = function (n1) {
  return function (n2) {
    return n1 - n2;
  };
};

//- Eq -------------------------------------------------------------------------

exports.refEq = function (r1) {
  return function (r2) {
    return r1 === r2;
  };
};

exports.refIneq = function (r1) {
  return function (r2) {
    return r1 !== r2;
  };
};

exports.eqArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      if (xs.length !== ys.length) return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i])) return false;
      }
      return true;
    };
  };
};

exports.ordArrayImpl = function (f) {
  return function (xs) {
    return function (ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

//- Ord ------------------------------------------------------------------------

exports.unsafeCompareImpl = function (lt) {
  return function (eq) {
    return function (gt) {
      return function (x) {
        return function (y) {
          return x < y ? lt : x > y ? gt : eq;
        };
      };
    };
  };
};

//- Bounded --------------------------------------------------------------------

exports.topInt = 2147483647;
exports.bottomInt = -2147483648;

exports.topChar = String.fromCharCode(65535);
exports.bottomChar = String.fromCharCode(0);

//- BooleanAlgebra -------------------------------------------------------------

exports.boolOr = function (b1) {
  return function (b2) {
    return b1 || b2;
  };
};

exports.boolAnd = function (b1) {
  return function (b2) {
    return b1 && b2;
  };
};

exports.boolNot = function (b) {
  return !b;
};

//- Show -----------------------------------------------------------------------

exports.showIntImpl = function (n) {
  return n.toString();
};

exports.showNumberImpl = function (n) {
  /* jshint bitwise: false */
  return n === (n | 0) ? n + ".0" : n.toString();
};

exports.showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\a": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

exports.showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g,
    function (c, i) { // jshint ignore:line
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\a": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

exports.showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

},{}],"/Users/gene/Programming/pure_morph/output/Prelude/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var $foreign = require("./foreign");
var Unit = function (x) {
    return x;
};
var LT = (function () {
    function LT() {

    };
    LT.value = new LT();
    return LT;
})();
var GT = (function () {
    function GT() {

    };
    GT.value = new GT();
    return GT;
})();
var EQ = (function () {
    function EQ() {

    };
    EQ.value = new EQ();
    return EQ;
})();
var Semigroupoid = function (compose) {
    this.compose = compose;
};
var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
var Functor = function (map) {
    this.map = map;
};
var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.apply = apply;
};
var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
var Bind = function (__superclass_Prelude$dotApply_0, bind) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.bind = bind;
};
var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
var Semigroup = function (append) {
    this.append = append;
};
var Semiring = function (add, mul, one, zero) {
    this.add = add;
    this.mul = mul;
    this.one = one;
    this.zero = zero;
};
var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.sub = sub;
};
var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    this.div = div;
    this.mod = mod;
};
var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
};
var Num = function (__superclass_Prelude$dotDivisionRing_0) {
    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
};
var Eq = function (eq) {
    this.eq = eq;
};
var Ord = function (__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
var Bounded = function (bottom, top) {
    this.bottom = bottom;
    this.top = top;
};
var BoundedOrd = function (__superclass_Prelude$dotBounded_0, __superclass_Prelude$dotOrd_1) {
    this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
    this["__superclass_Prelude.Ord_1"] = __superclass_Prelude$dotOrd_1;
};
var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
    this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
    this.conj = conj;
    this.disj = disj;
    this.not = not;
};
var Show = function (show) {
    this.show = show;
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zero = function (dict) {
    return dict.zero;
};
var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var top = function (dict) {
    return dict.top;
};
var sub = function (dict) {
    return dict.sub;
};
var $minus = function (dictRing) {
    return sub(dictRing);
};
var showUnit = new Show(function (v) {
    return "unit";
});
var showString = new Show($foreign.showStringImpl);
var showOrdering = new Show(function (v) {
    if (v instanceof LT) {
        return "LT";
    };
    if (v instanceof GT) {
        return "GT";
    };
    if (v instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match at Prelude line 863, column 1 - line 868, column 1: " + [ v.constructor.name ]);
});
var showNumber = new Show($foreign.showNumberImpl);
var showInt = new Show($foreign.showIntImpl);
var showChar = new Show($foreign.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    };
    if (!v) {
        return "false";
    };
    throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show($foreign.showArrayImpl(show(dictShow)));
};
var semiringUnit = new Semiring(function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return function (v1) {
        return unit;
    };
}, unit, unit);
var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
var semigroupoidFn = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (v) {
    return function (v1) {
        return unit;
    };
});
var semigroupString = new Semigroup($foreign.concatString);
var semigroupOrdering = new Semigroup(function (v) {
    return function (v1) {
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        if (v instanceof EQ) {
            return v1;
        };
        throw new Error("Failed pattern match at Prelude line 413, column 1 - line 418, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var semigroupArray = new Semigroup($foreign.concatArray);
var ringUnit = new Ring(function () {
    return semiringUnit;
}, function (v) {
    return function (v1) {
        return unit;
    };
});
var ringNumber = new Ring(function () {
    return semiringNumber;
}, $foreign.numSub);
var ringInt = new Ring(function () {
    return semiringInt;
}, $foreign.intSub);
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (dictApplicative) {
    return pure(dictApplicative);
};
var otherwise = true;
var one = function (dict) {
    return dict.one;
};
var not = function (dict) {
    return dict.not;
};
var negate = function (dictRing) {
    return function (a) {
        return $minus(dictRing)(zero(dictRing["__superclass_Prelude.Semiring_0"]()))(a);
    };
};
var mul = function (dict) {
    return dict.mul;
};
var $times = function (dictSemiring) {
    return mul(dictSemiring);
};
var moduloSemiringUnit = new ModuloSemiring(function () {
    return semiringUnit;
}, function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return function (v1) {
        return unit;
    };
});
var moduloSemiringNumber = new ModuloSemiring(function () {
    return semiringNumber;
}, $foreign.numDiv, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var moduloSemiringInt = new ModuloSemiring(function () {
    return semiringInt;
}, $foreign.intDiv, $foreign.intMod);
var mod = function (dict) {
    return dict.mod;
};
var map = function (dict) {
    return dict.map;
};
var $less$dollar$greater = function (dictFunctor) {
    return map(dictFunctor);
};
var $less$hash$greater = function (dictFunctor) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(dictFunctor)(f)(fa);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArray = new Functor($foreign.arrayMap);
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (v) {
    return function (v1) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (v) {
    return function (v1) {
        return EQ.value;
    };
});
var eqString = new Eq($foreign.refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqOrdering = new Eq(function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return true;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return true;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var ordOrdering = new Ord(function () {
    return eqOrdering;
}, function (v) {
    return function (v1) {
        if (v instanceof LT && v1 instanceof LT) {
            return EQ.value;
        };
        if (v instanceof EQ && v1 instanceof EQ) {
            return EQ.value;
        };
        if (v instanceof GT && v1 instanceof GT) {
            return EQ.value;
        };
        if (v instanceof LT) {
            return LT.value;
        };
        if (v instanceof EQ && v1 instanceof LT) {
            return GT.value;
        };
        if (v instanceof EQ && v1 instanceof GT) {
            return LT.value;
        };
        if (v instanceof GT) {
            return GT.value;
        };
        throw new Error("Failed pattern match at Prelude line 668, column 1 - line 677, column 1: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var eqNumber = new Eq($foreign.refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqInt = new Eq($foreign.refEq);
var ordInt = new Ord(function () {
    return eqInt;
}, unsafeCompare);
var eqChar = new Eq($foreign.refEq);
var ordChar = new Ord(function () {
    return eqChar;
}, unsafeCompare);
var eqBoolean = new Eq($foreign.refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, unsafeCompare);
var eq = function (dict) {
    return dict.eq;
};
var $eq$eq = function (dictEq) {
    return eq(dictEq);
};
var eqArray = function (dictEq) {
    return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
};
var divisionRingUnit = new DivisionRing(function () {
    return moduloSemiringUnit;
}, function () {
    return ringUnit;
});
var numUnit = new Num(function () {
    return divisionRingUnit;
});
var divisionRingNumber = new DivisionRing(function () {
    return moduloSemiringNumber;
}, function () {
    return ringNumber;
});
var numNumber = new Num(function () {
    return divisionRingNumber;
});
var div = function (dict) {
    return dict.div;
};
var $div = function (dictModuloSemiring) {
    return div(dictModuloSemiring);
};
var disj = function (dict) {
    return dict.disj;
};
var $bar$bar = function (dictBooleanAlgebra) {
    return disj(dictBooleanAlgebra);
};
var $$const = function (a) {
    return function (v) {
        return a;
    };
};
var $$void = function (dictFunctor) {
    return function (fa) {
        return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
    };
};
var conj = function (dict) {
    return dict.conj;
};
var $amp$amp = function (dictBooleanAlgebra) {
    return conj(dictBooleanAlgebra);
};
var compose = function (dict) {
    return dict.compose;
};
var functorFn = new Functor(compose(semigroupoidFn));
var $less$less$less = function (dictSemigroupoid) {
    return compose(dictSemigroupoid);
};
var $greater$greater$greater = function (dictSemigroupoid) {
    return flip(compose(dictSemigroupoid));
};
var compare = function (dict) {
    return dict.compare;
};
var ordArray = function (dictOrd) {
    return new Ord(function () {
        return eqArray(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            return $dollar(compare(ordInt)(0))($foreign.ordArrayImpl(function (x) {
                return function (y) {
                    var $79 = compare(dictOrd)(x)(y);
                    if ($79 instanceof EQ) {
                        return 0;
                    };
                    if ($79 instanceof LT) {
                        return 1;
                    };
                    if ($79 instanceof GT) {
                        return negate(ringInt)(1);
                    };
                    throw new Error("Failed pattern match at Prelude line 660, column 1 - line 666, column 1: " + [ $79.constructor.name ]);
                };
            })(xs)(ys));
        };
    });
};
var $less = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $80 = compare(dictOrd)(a1)(a2);
            if ($80 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $81 = compare(dictOrd)(a1)(a2);
            if ($81 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $82 = compare(dictOrd)(a1)(a2);
            if ($82 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (dictOrd) {
    return function (a1) {
        return function (a2) {
            var $83 = compare(dictOrd)(a1)(a2);
            if ($83 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryFn = new Category(function () {
    return semigroupoidFn;
}, function (x) {
    return x;
});
var boundedUnit = new Bounded(unit, unit);
var boundedOrdering = new Bounded(LT.value, GT.value);
var boundedOrdUnit = new BoundedOrd(function () {
    return boundedUnit;
}, function () {
    return ordUnit;
});
var boundedOrdOrdering = new BoundedOrd(function () {
    return boundedOrdering;
}, function () {
    return ordOrdering;
});
var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
var boundedOrdInt = new BoundedOrd(function () {
    return boundedInt;
}, function () {
    return ordInt;
});
var boundedChar = new Bounded($foreign.bottomChar, $foreign.topChar);
var boundedOrdChar = new BoundedOrd(function () {
    return boundedChar;
}, function () {
    return ordChar;
});
var boundedBoolean = new Bounded(false, true);
var boundedOrdBoolean = new BoundedOrd(function () {
    return boundedBoolean;
}, function () {
    return ordBoolean;
});
var bottom = function (dict) {
    return dict.bottom;
};
var boundedFn = function (dictBounded) {
    return new Bounded(function (v) {
        return bottom(dictBounded);
    }, function (v) {
        return top(dictBounded);
    });
};
var booleanAlgebraUnit = new BooleanAlgebra(function () {
    return boundedUnit;
}, function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return function (v1) {
        return unit;
    };
}, function (v) {
    return unit;
});
var booleanAlgebraFn = function (dictBooleanAlgebra) {
    return new BooleanAlgebra(function () {
        return boundedFn(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
    }, function (fx) {
        return function (fy) {
            return function (a) {
                return conj(dictBooleanAlgebra)(fx(a))(fy(a));
            };
        };
    }, function (fx) {
        return function (fy) {
            return function (a) {
                return disj(dictBooleanAlgebra)(fx(a))(fy(a));
            };
        };
    }, function (fx) {
        return function (a) {
            return not(dictBooleanAlgebra)(fx(a));
        };
    });
};
var booleanAlgebraBoolean = new BooleanAlgebra(function () {
    return boundedBoolean;
}, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
var $div$eq = function (dictEq) {
    return function (x) {
        return function (y) {
            return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
        };
    };
};
var bind = function (dict) {
    return dict.bind;
};
var liftM1 = function (dictMonad) {
    return function (f) {
        return function (a) {
            return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
            });
        };
    };
};
var $greater$greater$eq = function (dictBind) {
    return bind(dictBind);
};
var asTypeOf = function (x) {
    return function (v) {
        return x;
    };
};
var applyFn = new Apply(function () {
    return functorFn;
}, function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
});
var bindFn = new Bind(function () {
    return applyFn;
}, function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
});
var apply = function (dict) {
    return dict.apply;
};
var $less$times$greater = function (dictApply) {
    return apply(dictApply);
};
var liftA1 = function (dictApplicative) {
    return function (f) {
        return function (a) {
            return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
        };
    };
};
var applicativeFn = new Applicative(function () {
    return applyFn;
}, $$const);
var monadFn = new Monad(function () {
    return applicativeFn;
}, function () {
    return bindFn;
});
var append = function (dict) {
    return dict.append;
};
var $plus$plus = function (dictSemigroup) {
    return append(dictSemigroup);
};
var $less$greater = function (dictSemigroup) {
    return append(dictSemigroup);
};
var semigroupFn = function (dictSemigroup) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(dictSemigroup)(f(x))(g(x));
            };
        };
    });
};
var ap = function (dictMonad) {
    return function (f) {
        return function (a) {
            return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                    return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                });
            });
        };
    };
};
var monadArray = new Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Bind(function () {
    return applyArray;
}, $foreign.arrayBind);
var applyArray = new Apply(function () {
    return functorArray;
}, ap(monadArray));
var applicativeArray = new Applicative(function () {
    return applyArray;
}, function (x) {
    return [ x ];
});
var add = function (dict) {
    return dict.add;
};
var $plus = function (dictSemiring) {
    return add(dictSemiring);
};
module.exports = {
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Show: Show, 
    BooleanAlgebra: BooleanAlgebra, 
    BoundedOrd: BoundedOrd, 
    Bounded: Bounded, 
    Ord: Ord, 
    Eq: Eq, 
    DivisionRing: DivisionRing, 
    Num: Num, 
    Ring: Ring, 
    ModuloSemiring: ModuloSemiring, 
    Semiring: Semiring, 
    Semigroup: Semigroup, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    show: show, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    not: not, 
    disj: disj, 
    conj: conj, 
    bottom: bottom, 
    top: top, 
    unsafeCompare: unsafeCompare, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    eq: eq, 
    "-": $minus, 
    negate: negate, 
    sub: sub, 
    "/": $div, 
    mod: mod, 
    div: div, 
    "*": $times, 
    "+": $plus, 
    one: one, 
    mul: mul, 
    zero: zero, 
    add: add, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    append: append, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    bind: bind, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    apply: apply, 
    "void": $$void, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    map: map, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    compose: compose, 
    otherwise: otherwise, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    "#": $hash, 
    "$": $dollar, 
    unit: unit, 
    semigroupoidFn: semigroupoidFn, 
    categoryFn: categoryFn, 
    functorFn: functorFn, 
    functorArray: functorArray, 
    applyFn: applyFn, 
    applyArray: applyArray, 
    applicativeFn: applicativeFn, 
    applicativeArray: applicativeArray, 
    bindFn: bindFn, 
    bindArray: bindArray, 
    monadFn: monadFn, 
    monadArray: monadArray, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupFn: semigroupFn, 
    semigroupOrdering: semigroupOrdering, 
    semigroupArray: semigroupArray, 
    semiringInt: semiringInt, 
    semiringNumber: semiringNumber, 
    semiringUnit: semiringUnit, 
    ringInt: ringInt, 
    ringNumber: ringNumber, 
    ringUnit: ringUnit, 
    moduloSemiringInt: moduloSemiringInt, 
    moduloSemiringNumber: moduloSemiringNumber, 
    moduloSemiringUnit: moduloSemiringUnit, 
    divisionRingNumber: divisionRingNumber, 
    divisionRingUnit: divisionRingUnit, 
    numNumber: numNumber, 
    numUnit: numUnit, 
    eqBoolean: eqBoolean, 
    eqInt: eqInt, 
    eqNumber: eqNumber, 
    eqChar: eqChar, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    ordBoolean: ordBoolean, 
    ordInt: ordInt, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordChar: ordChar, 
    ordUnit: ordUnit, 
    ordArray: ordArray, 
    ordOrdering: ordOrdering, 
    boundedBoolean: boundedBoolean, 
    boundedUnit: boundedUnit, 
    boundedOrdering: boundedOrdering, 
    boundedInt: boundedInt, 
    boundedChar: boundedChar, 
    boundedFn: boundedFn, 
    boundedOrdBoolean: boundedOrdBoolean, 
    boundedOrdUnit: boundedOrdUnit, 
    boundedOrdOrdering: boundedOrdOrdering, 
    boundedOrdInt: boundedOrdInt, 
    boundedOrdChar: boundedOrdChar, 
    booleanAlgebraBoolean: booleanAlgebraBoolean, 
    booleanAlgebraUnit: booleanAlgebraUnit, 
    booleanAlgebraFn: booleanAlgebraFn, 
    showBoolean: showBoolean, 
    showInt: showInt, 
    showNumber: showNumber, 
    showChar: showChar, 
    showString: showString, 
    showUnit: showUnit, 
    showArray: showArray, 
    showOrdering: showOrdering
};

},{"./foreign":"/Users/gene/Programming/pure_morph/output/Prelude/foreign.js"}],"/Users/gene/Programming/pure_morph/output/Type.Proxy/index.js":[function(require,module,exports){
// Generated by psc version 0.8.0.0
"use strict";
var Proxy3 = (function () {
    function Proxy3() {

    };
    Proxy3.value = new Proxy3();
    return Proxy3;
})();
var Proxy2 = (function () {
    function Proxy2() {

    };
    Proxy2.value = new Proxy2();
    return Proxy2;
})();
var $$Proxy = (function () {
    function Proxy() {

    };
    Proxy.value = new Proxy();
    return Proxy;
})();
module.exports = {
    Proxy3: Proxy3, 
    Proxy2: Proxy2, 
    "Proxy": $$Proxy
};

},{}],"/Users/gene/Programming/pure_morph/output/browserify.js":[function(require,module,exports){
module.exports = require("Main");

},{"Main":"/Users/gene/Programming/pure_morph/output/Main/index.js"}]},{},["/Users/gene/Programming/pure_morph/output/browserify.js"])("/Users/gene/Programming/pure_morph/output/browserify.js")
});